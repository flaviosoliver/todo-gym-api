var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.66,1,2.778]],["body/controllers/AppController.html",[0,2.609,1,4.366,2,1.96,3,0.186,4,0.186,5,0.165,6,4.168,7,0.32,8,2.388,9,6.145,10,2.414,11,6.123,12,1.656,13,0.015,14,1.063,15,4.809,16,2.388,17,0.738,18,4.809,19,4.11,20,6.123,21,4.809,22,1.96,23,0.985,24,0.367,25,1.111,26,6.736,27,4.809,28,0.37,29,1.202,30,3.429,31,4.156,32,4.168,33,6.123,34,0.186,35,0.028,36,4.809,37,1.96,38,2.194,39,4.809,40,4.809,41,4.809,42,4.809,43,0.012,44,0.012]],["title/modules/AppModule.html",[45,1.52,46,2.778]],["body/modules/AppModule.html",[1,4.253,2,2.121,3,0.146,4,0.146,5,0.129,10,1.349,13,0.016,28,0.395,29,0.941,31,4.309,32,3.263,34,0.146,35,0.022,38,1.349,43,0.01,44,0.01,45,2.326,46,5.62,47,1.852,48,2.183,49,2.488,50,2.488,51,2.183,52,3.262,53,2.06,54,3.263,55,3.263,56,3.263,57,4.614,58,4.309,59,4.614,60,4.614,61,4.309,62,4.309,63,3.438,64,2.488,65,2.488,66,3.766,67,3.457,68,2.324,69,1.295,70,4.51,71,5.575,72,2.932,73,3.766,74,3.766,75,3.263,76,3.263,77,3.766,78,3.263,79,3.766,80,3.766,81,3.766,82,3.263,83,1.173,84,3.766,85,3.766,86,3.766,87,3.766,88,5.205,89,3.766,90,1.95,91,3.766,92,3.766,93,3.766,94,1.762]],["title/injectables/AppService.html",[31,2.404,95,1.013]],["body/injectables/AppService.html",[3,0.217,4,0.217,5,0.193,7,0.373,8,2.629,9,6.49,13,0.015,14,0.975,16,2.192,17,0.812,28,0.293,29,1.404,31,4.159,34,0.217,35,0.032,38,2.013,43,0.013,44,0.013,95,1.753,96,2.394,97,4.869,98,5.619,99,5.619,100,5.619]],["title/classes/Auth.html",[35,0.022,101,2.258]],["body/classes/Auth.html",[3,0.169,4,0.169,5,0.15,7,0.29,12,1.738,13,0.015,14,1.116,17,0.929,24,0.557,28,0.336,34,0.249,35,0.025,43,0.011,44,0.011,69,1.5,83,0.858,101,3.961,102,1.329,103,3.11,104,0.8,105,2.255,106,4.872,107,2.507,108,3.966,109,2.507,110,3.78,111,3.961,112,3.492,113,4.362,114,4.362,115,4.362,116,1.13,117,4.362,118,3.516,119,2.565,120,2.528,121,2.349,122,1.227,123,3.332,124,1.946,125,3.397,126,2.882,127,2.528,128,3.008,129,3.11,130,3.78]],["title/controllers/AuthController.html",[0,1.66,131,2.778]],["body/controllers/AuthController.html",[0,1.753,2,1.676,3,0.159,4,0.159,5,0.141,7,0.273,8,2.156,10,2.237,12,1.113,13,0.016,14,0.714,16,1.605,19,2.385,22,1.676,23,0.843,24,0.477,25,0.95,28,0.382,29,1.028,34,0.159,35,0.024,37,1.676,38,1.474,43,0.011,44,0.011,83,0.809,94,1.925,101,2.385,105,1.358,122,1.157,128,3.259,131,3.942,132,3.565,133,2.933,134,3.942,135,4.114,136,4.41,137,3.565,138,2.933,139,2.933,140,2.933,141,2.933,142,3.852,143,2.544,144,4.114,145,4.452,146,1.328,147,2.933,148,3.942,149,3.942,150,3.942,151,3.942,152,3.942,153,2.933,154,3.942,155,2.718,156,3.652,157,3.204,158,3.942,159,4.114,160,3.411,161,3.411,162,3.411,163,3.411,164,2.933,165,2.933,166,4.114,167,2.385,168,1.253,169,4.114,170,4.114,171,1.836,172,1.676,173,4.114,174,2.131,175,2.933,176,4.114,177,2.863,178,1.676,179,4.114]],["title/classes/AuthDto.html",[35,0.022,167,2.258]],["body/classes/AuthDto.html",[3,0.189,4,0.189,5,0.168,7,0.325,12,1.836,13,0.015,14,1.178,17,0.906,24,0.519,28,0.323,34,0.189,35,0.036,43,0.012,44,0.012,102,1.49,104,0.861,105,2.241,106,4.841,107,2.648,121,2.453,122,1.376,167,3.587,180,4.238,181,3.808,182,4.891,183,4.891,184,4.891,185,2.835,186,4.891,187,3.339,188,4.088,189,6.188,190,3.385,191,3.339,192,3.339,193,1.828]],["title/modules/AuthModule.html",[45,1.52,57,2.574]],["body/modules/AuthModule.html",[2,2.133,3,0.147,4,0.147,5,0.13,10,1.361,13,0.016,23,0.778,28,0.407,29,0.95,34,0.147,35,0.022,43,0.01,44,0.01,45,2.337,47,1.868,48,2.202,49,2.51,50,2.51,51,2.202,52,3.277,53,2.078,57,4.83,62,4.321,63,3.459,64,2.51,65,2.51,67,3.473,68,2.344,69,1.306,70,4.538,71,5.596,72,2.958,76,3.292,82,3.292,94,1.778,101,2.202,119,1.695,129,3.734,131,4.272,155,3.459,157,2.958,172,1.548,194,3.292,195,3.292,196,3.799,197,4.626,198,3.799,199,4.538,200,3.799,201,2.958,202,3.799,203,3.734,204,3.799,205,3.734,206,3.799,207,3.459,208,2.958,209,2.958,210,2.864,211,3.292,212,3.035,213,3.799,214,3.799,215,2.51,216,3.799,217,3.799,218,3.799,219,3.799,220,3.799,221,2.344,222,3.799,223,4.272,224,4.272,225,3.799]],["title/injectables/AuthRepository.html",[95,1.013,205,2.778]],["body/injectables/AuthRepository.html",[3,0.185,4,0.185,5,0.164,7,0.318,8,2.38,10,2.407,13,0.015,14,1.059,16,1.865,22,2.486,23,1.25,24,0.466,25,1.409,28,0.382,29,1.195,34,0.185,35,0.027,37,1.949,38,1.714,43,0.012,44,0.012,69,1.644,95,1.586,96,2.038,101,4.237,124,2.134,125,3.724,146,1.466,171,2.134,172,2.486,178,1.949,205,4.351,208,3.724,209,3.724,226,4.145,227,1.858,228,3.41,229,5.33,230,4.783,231,6.101,232,4.783,233,3.41,234,4.031,235,4.783,236,4.783]],["title/injectables/AuthService.html",[95,1.013,203,2.778]],["body/injectables/AuthService.html",[3,0.125,4,0.125,5,0.111,7,0.214,8,1.82,10,1.964,13,0.016,14,1.106,16,2.138,17,0.885,22,2.447,23,1.23,24,0.459,25,1.387,28,0.366,29,0.807,34,0.125,35,0.019,37,2.596,38,1.964,43,0.009,44,0.009,83,1.253,94,1.51,95,1.213,96,1.375,104,0.649,105,2.103,106,4.282,107,1.259,109,2.065,134,3.327,143,2.447,145,3.327,146,1.121,156,3.083,157,2.513,167,2.705,168,0.983,171,1.44,172,1.901,174,3.439,177,3.11,178,2.233,201,2.513,203,3.327,207,2.132,208,2.513,210,1.765,211,2.796,212,3.177,234,3.967,237,2.796,238,4.282,239,4.043,240,4.043,241,2.301,242,3.481,243,6.848,244,4.666,245,3.327,246,4.666,247,3.227,248,4.666,249,3.227,250,4.666,251,3.227,252,2.132,253,2.132,254,2.982,255,4.666,256,3.327,257,4.043,258,2.513,259,3.227,260,3.227,261,3.227,262,2.513,263,2.796,264,3.227,265,4.043,266,4.268,267,3.227,268,3.227,269,2.301,270,2.796,271,2.998,272,3.227,273,4.666,274,3.227,275,2.513,276,3.227,277,3.227,278,3.227,279,2.301,280,2.132,281,2.301]],["title/classes/CreateExerciseDto.html",[35,0.022,282,2.018]],["body/classes/CreateExerciseDto.html",[3,0.17,4,0.17,5,0.151,7,0.291,12,1.924,13,0.015,14,1.235,17,0.929,23,1.32,24,0.543,25,1.686,28,0.301,34,0.17,35,0.033,43,0.011,44,0.011,102,1.335,104,0.803,121,2.51,122,1.233,187,3.016,191,2.699,192,3.329,193,1.638,282,2.987,283,6.328,284,3.799,285,3.169,286,4.257,287,3.525,288,4.257,289,2.705,290,4.384,291,4.491,292,4.384,293,3.126,294,4.384,295,3.799,296,4.384,297,4.384,298,3.558,299,3.343,300,3.546,301,5.018]],["title/classes/CreatePlanDto.html",[35,0.022,302,2.018]],["body/classes/CreatePlanDto.html",[3,0.168,4,0.168,5,0.149,7,0.288,12,1.917,13,0.015,14,1.231,17,0.877,23,1.313,24,0.542,25,1.575,28,0.335,34,0.168,35,0.033,43,0.011,44,0.011,102,1.322,104,0.797,107,2.501,121,2.503,122,1.221,185,2.516,187,3.191,190,3.133,191,3.001,192,3.001,193,1.622,221,3.957,285,3.153,289,2.678,298,3.535,299,3.717,300,3.321,302,2.967,303,6.31,304,3.38,305,3.249,306,3.133,307,3.38,308,4.34,309,4.34,310,2.867,311,4.34,312,3.761,313,3.761,314,3.761,315,3.535,316,3.761]],["title/classes/CreateUserDto.html",[35,0.022,317,2.018]],["body/classes/CreateUserDto.html",[3,0.144,4,0.144,5,0.127,7,0.247,12,1.966,13,0.015,14,1.262,17,0.918,24,0.555,25,1.19,28,0.309,34,0.144,35,0.03,43,0.01,44,0.01,102,1.13,104,0.717,105,1.953,121,2.538,122,1.044,177,3.478,187,3.402,188,3.403,191,3.336,192,3.253,193,1.386,289,2.289,293,3.673,298,3.178,299,2.985,300,2.667,315,3.178,317,2.667,318,6.396,319,3.215,320,3.909,321,4.219,322,4.219,323,4.219,324,4.219,325,3.143,326,3.178,327,3.215,328,3.71,329,2.451,330,3.71,331,3.71,332,3.71,333,3.71,334,3.71,335,3.71,336,3.71,337,3.71,338,5.151,339,5.151,340,4.463,341,4.463,342,4.463,343,3.71,344,2.91,345,3.71,346,3.673,347,3.215,348,3.71,349,3.71]],["title/classes/Exercise.html",[35,0.022,350,1.66]],["body/classes/Exercise.html",[3,0.221,4,0.135,5,0.119,7,0.231,12,1.842,13,0.015,14,1.182,17,0.953,23,1.273,24,0.584,25,1.573,28,0.257,34,0.221,35,0.02,43,0.009,44,0.009,69,1.196,83,0.684,90,3.527,102,1.06,104,0.685,108,4.202,111,4.275,112,3.225,116,1.29,118,3.725,119,2.197,120,2.017,121,2.407,122,0.979,123,2.017,126,2.298,127,2.017,128,3.187,285,2.811,286,4.106,287,3.587,288,4.106,350,3.258,351,2.481,352,4.267,353,4.267,354,2.709,355,1.628,356,3.479,357,3.479,358,6.215,359,6.215,360,3.479,361,3.479,362,2.709,363,3.479,364,3.479,365,3.479,366,3.479,367,3.479,368,2.709,369,2.147,370,2.481,371,3.015]],["title/classes/ExerciseDto.html",[35,0.022,372,1.916]],["body/classes/ExerciseDto.html",[3,0.165,4,0.165,5,0.146,7,0.283,12,1.958,13,0.015,14,1.257,17,0.938,23,1.3,24,0.553,25,1.672,28,0.295,34,0.165,35,0.032,43,0.011,44,0.011,102,1.296,104,0.787,116,1.249,121,2.54,122,1.197,185,2.466,187,3.167,190,3.092,191,2.972,192,3.389,193,1.59,285,3.123,286,4.195,287,3.473,288,4.195,289,2.625,291,4.403,293,3.034,295,3.687,298,3.489,299,3.277,300,3.504,301,4.945,372,2.78,373,3.687,374,4.255,375,4.255,376,4.255,377,4.255,378,4.255,379,4.255]],["title/controllers/ExercisesController.html",[0,1.66,380,2.778]],["body/controllers/ExercisesController.html",[0,1.048,2,1.002,3,0.095,4,0.095,5,0.084,7,0.163,8,1.485,10,2.598,12,1.534,13,0.016,14,0.984,16,2.212,17,0.723,19,1.425,22,2.136,23,1.074,24,0.542,25,1.211,28,0.346,29,0.615,34,0.095,35,0.014,37,1.002,38,2.149,43,0.007,44,0.007,83,0.748,94,1.151,116,1.115,122,0.692,128,3.58,133,1.753,138,4.044,139,4.044,140,3.739,141,3.739,142,4.094,146,1.629,147,2.714,148,2.714,149,4.277,150,4.044,151,4.277,152,4.277,153,1.753,154,4.277,160,3.701,161,3.701,162,3.701,163,3.499,164,1.753,165,1.753,168,0.749,171,1.097,172,1.002,174,1.273,175,1.753,178,2.311,227,1.159,254,1.151,271,1.345,282,3.106,350,3.059,355,2.18,369,1.517,372,3.076,380,2.714,381,2.131,382,1.698,383,1.731,384,1.364,385,1.537,386,1.915,387,2.131,388,3.077,389,1.915,390,2.459,391,1.624,392,1.959,393,2.131,394,2.459,395,1.622,396,1.753,397,1.915,398,2.459,399,1.273,400,1.915,401,2.459,402,1.273,403,1.915,404,1.915,405,2.459,406,1.915,407,1.915,408,1.517,409,1.915,410,1.915,411,4.671,412,2.964,413,1.915,414,1.624,415,1.517,416,2.515,417,1.915,418,2.714,419,2.459,420,1.753,421,1.517,422,2.459,423,2.459,424,2.459,425,4.416,426,2.131,427,2.131,428,2.459,429,2.131,430,2.459,431,1.425,432,1.915,433,1.915,434,1.915,435,1.517,436,1.425,437,2.131,438,2.459,439,1.915,440,1.915,441,1.915]],["title/modules/ExercisesModule.html",[45,1.52,58,2.404]],["body/modules/ExercisesModule.html",[2,2.499,3,0.187,4,0.187,5,0.166,13,0.016,23,0.988,28,0.402,29,1.205,34,0.187,35,0.028,43,0.012,44,0.012,45,2.392,47,2.372,52,2.638,53,2.638,58,3.784,67,2.795,68,2.976,69,1.658,119,2.152,215,3.186,223,4.374,224,4.374,350,2.055,370,4.374,380,4.809,415,4.162,417,3.755,420,3.439,442,4.823,443,4.052,444,4.823,445,4.823,446,4.456,447,3.755,448,4.374,449,4.823,450,4.179]],["title/injectables/ExercisesRepository.html",[95,1.013,448,2.778]],["body/injectables/ExercisesRepository.html",[3,0.139,4,0.139,5,0.124,7,0.239,8,1.968,10,2.771,13,0.015,14,1.195,16,2.591,17,0.83,22,2.707,23,1.361,24,0.508,25,1.534,28,0.369,29,0.9,34,0.139,35,0.021,37,1.468,38,2.261,43,0.01,44,0.01,69,1.238,95,1.312,96,1.535,116,1.145,124,1.607,146,1.785,168,1.097,171,1.607,172,2.056,178,2.707,227,1.537,228,2.568,229,4.911,233,2.568,282,3.268,350,2.934,368,2.805,372,3.103,382,2.251,383,2.083,384,1.808,385,1.665,386,3.929,391,3.333,392,2.358,395,1.535,399,2.613,402,2.613,420,2.568,421,2.222,447,2.805,448,3.598,451,3.121,452,3.602,453,3.602,454,3.602,455,3.602,456,3.602,457,3.602,458,3.333,459,3.602,460,3.602,461,3.121,462,3.121,463,3.121,464,2.805,465,2.222]],["title/injectables/ExercisesService.html",[95,1.013,443,2.574]],["body/injectables/ExercisesService.html",[3,0.103,4,0.103,5,0.091,7,0.177,8,1.578,10,2.638,13,0.016,14,1.117,16,2.293,17,0.746,22,2.522,23,1.204,24,0.449,25,1.358,28,0.346,29,0.665,34,0.103,35,0.023,37,2.227,38,2.218,43,0.008,44,0.008,83,1.075,94,1.246,95,1.052,96,1.134,104,0.563,116,1.335,146,1.664,168,0.811,171,1.188,172,1.649,174,2.831,178,2.622,193,0.995,227,1.232,238,3.898,241,1.898,245,2.885,252,1.759,253,1.759,254,3.178,256,1.898,269,4.192,271,3.519,279,4.192,280,4.251,281,4.192,282,2.831,350,2.951,355,1.893,369,3.019,372,2.688,382,1.805,383,1.804,384,1.45,385,1.335,386,3.151,391,2.673,392,2.043,395,1.724,396,1.898,399,2.095,402,2.095,408,1.643,416,2.673,417,2.073,421,1.643,431,2.345,435,1.643,436,2.345,443,2.673,446,1.759,447,2.073,458,3.611,466,2.307,467,4.046,468,2.662,469,2.662,470,2.662,471,2.662,472,2.662,473,4.046,474,2.073,475,2.662,476,1.898,477,1.898,478,2.307,479,2.307,480,2.662,481,2.307,482,2.307,483,2.307,484,2.662,485,2.662,486,2.662,487,3.151,488,3.151,489,1.898,490,2.662,491,2.307,492,2.662,493,2.073,494,2.073,495,2.662,496,2.073,497,2.073,498,2.673,499,2.073,500,2.662,501,2.073,502,2.073]],["title/interfaces/IAuthController.html",[158,2.778,503,0.865]],["body/interfaces/IAuthController.html",[3,0.216,4,0.216,5,0.192,7,0.371,13,0.015,24,0.427,28,0.291,34,0.26,43,0.013,44,0.013,83,1.098,104,0.934,134,5.328,136,4.436,145,3.981,146,1.341,158,4.788,167,3.236,168,1.7,503,1.239,504,2.178,505,4.347,506,2.736,507,5.229]],["title/interfaces/IAuthRepository.html",[234,2.574,503,0.865]],["body/interfaces/IAuthRepository.html",[3,0.217,4,0.217,5,0.192,7,0.372,13,0.015,24,0.428,28,0.292,34,0.26,43,0.013,44,0.013,83,1.101,101,4.18,104,0.936,146,1.346,207,4.445,209,4.361,227,2.278,234,4.445,503,1.243,504,2.185,506,2.741,508,4.361]],["title/interfaces/IAuthService.html",[156,2.574,503,0.865]],["body/interfaces/IAuthService.html",[3,0.198,4,0.198,5,0.175,7,0.339,13,0.015,17,0.873,24,0.529,28,0.332,34,0.246,43,0.012,44,0.012,83,1.004,104,0.885,105,1.685,106,3.641,109,1.756,134,5.167,143,2.591,146,1.227,155,4.201,156,4.201,167,2.96,177,2.645,239,6.28,240,6.28,503,1.133,504,1.992,506,3.097,509,3.976,510,5.107,511,5.107]],["title/interfaces/IDefaultController.html",[503,0.865,512,3.034]],["body/interfaces/IDefaultController.html",[3,0.193,4,0.193,5,0.171,7,0.332,13,0.015,17,0.755,24,0.566,34,0.193,43,0.012,44,0.012,104,0.872,116,1.232,145,4.468,146,1.779,227,2.189,383,2.372,385,2.372,503,1.107,504,1.946,506,3.211,512,4.88,513,4.323,514,4.748,515,7.186,516,4.88,517,4.323]],["title/interfaces/IExercisesController.html",[418,2.778,503,0.865]],["body/interfaces/IExercisesController.html",[3,0.182,4,0.182,5,0.161,7,0.312,13,0.015,17,0.726,24,0.555,28,0.348,34,0.233,43,0.011,44,0.011,83,0.923,104,0.839,116,1.185,146,1.746,168,1.429,227,2.14,282,3.121,350,2.837,372,2.964,382,3.135,383,2.319,384,2.518,385,2.319,392,2.252,395,1.999,418,4.298,420,3.346,503,1.041,504,1.83,506,3.179,518,3.654,519,2.895,520,4.693]],["title/interfaces/IExercisesRepository.html",[458,2.574,503,0.865]],["body/interfaces/IExercisesRepository.html",[3,0.184,4,0.184,5,0.163,7,0.316,13,0.015,17,0.733,24,0.558,28,0.317,34,0.235,43,0.012,44,0.012,83,0.935,104,0.846,116,1.196,146,1.754,168,1.449,227,2.151,282,3.149,350,2.591,372,2.99,382,3.151,383,2.331,384,2.531,385,2.331,392,2.272,395,2.027,446,4.017,458,4.017,503,1.056,504,1.855,506,3.186,519,2.935,521,3.704]],["title/interfaces/IExercisesService.html",[416,2.574,503,0.865]],["body/interfaces/IExercisesService.html",[3,0.184,4,0.184,5,0.163,7,0.316,13,0.015,17,0.733,24,0.558,28,0.317,34,0.235,43,0.012,44,0.012,83,0.935,104,0.846,116,1.196,146,1.754,168,1.449,227,2.151,282,3.149,350,2.591,372,2.99,382,3.151,383,2.331,384,2.531,385,2.331,392,2.272,395,2.027,415,3.751,416,4.017,503,1.056,504,1.855,506,3.186,519,2.935,522,3.704]],["title/interfaces/IPlansController.html",[503,0.865,523,2.778]],["body/interfaces/IPlansController.html",[3,0.159,4,0.159,5,0.141,7,0.273,13,0.016,17,0.838,24,0.559,28,0.363,30,2.927,34,0.214,43,0.01,44,0.01,83,0.807,104,0.768,116,1.311,146,1.759,168,1.25,227,2.031,302,2.858,382,2.976,383,2.201,384,2.39,385,2.201,392,2.062,395,1.749,503,0.911,504,1.601,506,3.192,519,2.532,523,3.935,524,3.196,525,4.755,526,4.115,527,6.068,528,2.858,529,3.557,530,2.714,531,2.918,532,2.711,533,4.298,534,3.557,535,2.245]],["title/interfaces/IPlansRepository.html",[503,0.865,536,2.574]],["body/interfaces/IPlansRepository.html",[3,0.166,4,0.166,5,0.147,7,0.285,13,0.015,17,0.768,24,0.574,28,0.333,34,0.22,43,0.011,44,0.011,83,0.843,104,0.791,107,1.672,116,1.117,146,1.806,168,1.306,227,2.067,302,2.943,382,3.028,383,2.24,384,2.432,385,2.24,392,2.123,395,1.827,503,0.951,504,1.672,506,3.237,519,2.645,526,4.187,530,2.794,531,3.304,532,2.832,536,3.754,537,3.338,538,5.881,539,5.881,540,3.754,541,4.051]],["title/interfaces/IPlansService.html",[503,0.865,542,2.574]],["body/interfaces/IPlansService.html",[3,0.164,4,0.164,5,0.146,7,0.282,13,0.015,17,0.915,24,0.564,28,0.331,34,0.218,43,0.011,44,0.011,83,0.835,104,0.786,107,2.636,116,1.11,146,1.774,168,1.293,227,2.059,302,2.923,382,3.016,383,2.231,384,2.422,385,2.231,392,2.109,395,1.809,503,0.942,504,1.656,506,3.206,519,2.619,525,4.82,526,4.171,528,3.285,529,3.678,530,2.776,531,2.642,535,2.322,542,3.729,543,3.305,544,3.729,545,4.396]],["title/interfaces/IUsersController.html",[503,0.865,546,2.778]],["body/interfaces/IUsersController.html",[3,0.171,4,0.171,5,0.152,7,0.294,13,0.015,17,0.86,24,0.57,28,0.303,34,0.225,43,0.011,44,0.011,83,0.871,104,0.808,105,1.462,109,2.227,116,1.352,143,2.365,146,1.793,168,1.349,227,2.093,317,3.007,325,2.178,344,2.855,383,2.269,385,2.269,503,0.983,504,1.727,506,3.224,546,4.14,547,3.449,548,4.241,549,4.241,550,4.241,551,4.241,552,3.158,553,4.521]],["title/interfaces/IUsersRepository.html",[503,0.865,554,2.574]],["body/interfaces/IUsersRepository.html",[3,0.163,4,0.163,5,0.145,7,0.281,13,0.015,17,0.889,24,0.58,28,0.221,34,0.218,43,0.011,44,0.011,83,0.831,104,0.783,105,1.394,109,1.934,116,1.421,143,2.293,146,1.823,168,1.287,227,2.055,317,2.914,325,2.077,344,2.767,383,2.227,384,2.417,385,2.227,503,0.937,504,1.648,506,3.252,514,4.457,548,4.163,549,4.163,550,4.163,551,4.163,554,3.717,555,3.289,556,3.717]],["title/interfaces/IUsersService.html",[242,2.258,503,0.865]],["body/interfaces/IUsersService.html",[3,0.163,4,0.163,5,0.145,7,0.281,13,0.015,17,0.889,24,0.58,28,0.221,34,0.218,43,0.011,44,0.011,83,0.831,104,0.783,105,1.394,109,1.934,116,1.421,143,2.293,146,1.823,168,1.287,210,3.077,227,2.055,242,3.261,317,2.914,325,2.077,344,2.767,383,2.227,384,2.417,385,2.227,503,0.937,504,1.648,506,3.252,514,4.457,548,4.163,549,4.163,550,4.163,551,4.163,557,3.289]],["title/interfaces/JwtPayload.html",[503,0.865,558,2.778]],["body/interfaces/JwtPayload.html",[3,0.225,4,0.225,5,0.2,7,0.387,13,0.015,17,0.884,24,0.445,34,0.225,43,0.013,44,0.013,104,0.959,105,2.501,503,1.293,504,2.273,558,4.912,559,5.049,560,5.049]],["title/injectables/JwtStrategy.html",[95,1.013,197,2.574]],["body/injectables/JwtStrategy.html",[3,0.168,4,0.168,5,0.149,7,0.288,8,2.234,10,2.298,13,0.016,14,0.994,16,1.693,22,2.334,23,1.173,24,0.438,25,1.323,28,0.38,29,1.085,34,0.168,35,0.025,37,1.768,38,1.555,43,0.011,44,0.011,83,1.126,90,2.248,94,2.031,95,1.489,96,1.849,105,1.433,109,2.205,143,1.768,146,1.376,172,2.334,174,2.248,178,1.768,197,3.785,210,2.374,212,3.321,242,3.953,254,2.031,257,4.964,262,3.38,263,4.964,270,3.761,271,2.374,414,2.867,476,4.085,558,4.863,561,3.761,562,4.34,563,4.34,564,5.729,565,4.34,566,4.34,567,4.34,568,4.34,569,3.761,570,4.964,571,4.34,572,4.34,573,4.34,574,4.34,575,4.34,576,4.34,577,4.34,578,4.34,579,4.34,580,4.34,581,4.34,582,4.34]],["title/classes/LoginDto.html",[35,0.022,136,2.574]],["body/classes/LoginDto.html",[3,0.201,4,0.201,5,0.178,7,0.344,12,1.735,13,0.015,14,1.114,17,0.878,24,0.49,28,0.335,34,0.201,35,0.037,43,0.012,44,0.012,102,1.578,104,0.893,105,2.301,121,2.397,122,1.458,136,4.239,177,3.61,181,4.036,187,3.262,188,4.239,191,3.262,192,3.262,193,1.937,310,3.424,583,4.491,584,5.183,585,5.183]],["title/classes/ParamsDto.html",[35,0.022,392,1.456]],["body/classes/ParamsDto.html",[3,0.209,4,0.209,5,0.186,7,0.359,13,0.015,14,1.233,17,0.929,23,1.455,24,0.543,25,1.78,34,0.209,35,0.031,43,0.013,44,0.013,102,1.647,104,0.917,107,2.771,285,3.493,392,2.462,586,4.687,587,5.409,588,5.409,589,5.409]],["title/classes/Plan.html",[35,0.022,531,1.823]],["body/classes/Plan.html",[3,0.132,4,0.132,5,0.117,7,0.226,12,1.829,13,0.015,14,1.174,17,0.904,23,1.26,24,0.589,25,1.421,28,0.321,34,0.218,35,0.02,43,0.009,44,0.009,69,1.17,83,0.669,90,2.511,102,1.037,104,0.675,107,2.203,108,4.172,109,1.667,111,4.255,112,3.559,116,1.368,118,3.698,119,2.163,120,1.973,121,2.392,122,0.958,123,1.973,124,2.163,126,2.249,127,1.973,128,3.164,221,3.484,285,2.777,305,3.104,306,3.366,352,4.202,353,4.202,354,3.775,355,2.643,362,2.651,369,2.992,531,3.54,590,2.427,591,4.848,592,4.848,593,3.404,594,3.404,595,3.404,596,3.404,597,4.848,598,3.404,599,4.202,600,3.775,601,3.457,602,3.404,603,2.992,604,2.651,605,2.651,606,2.651,607,2.651,608,2.427,609,2.95]],["title/classes/PlanDto.html",[35,0.022,530,1.916]],["body/classes/PlanDto.html",[3,0.163,4,0.163,5,0.145,7,0.281,12,1.954,13,0.015,14,1.254,17,0.903,23,1.296,24,0.552,25,1.558,28,0.33,34,0.163,35,0.032,43,0.011,44,0.011,102,1.287,104,0.783,107,2.468,116,1.244,121,2.536,122,1.188,185,3.261,187,3.288,190,3.46,191,3.157,192,3.157,193,1.579,221,3.904,285,3.111,289,2.606,298,3.472,299,3.667,300,3.277,305,3.224,306,3.077,307,3.289,310,2.791,312,3.661,315,3.472,316,3.661,530,2.767,610,3.661,611,4.224,612,4.224,613,4.224,614,4.224,615,4.224,616,4.224]],["title/controllers/PlansController.html",[0,1.66,617,2.778]],["body/controllers/PlansController.html",[0,0.798,2,0.763,3,0.072,4,0.072,5,0.064,7,0.124,8,1.195,10,2.587,12,1.519,13,0.016,14,0.975,16,2.19,17,0.823,19,1.085,22,2.288,23,1.15,24,0.528,25,1.297,28,0.334,29,0.468,30,1.335,34,0.072,35,0.011,37,0.763,38,2.1,43,0.006,44,0.006,83,1.152,94,0.876,107,2.492,116,1.193,122,0.527,128,3.553,133,1.335,138,4.005,139,4.005,140,3.204,141,3.204,142,4.095,146,1.619,147,3.204,148,2.185,149,4.179,150,3.534,151,4.179,152,4.179,153,1.335,154,4.179,160,3.616,161,3.616,162,3.616,163,3.058,164,1.335,165,1.335,168,0.57,171,0.836,172,0.763,174,0.97,175,1.335,178,2.288,227,1.184,254,0.876,271,1.024,302,2.756,355,1.82,382,1.735,383,1.011,384,1.098,385,1.283,387,1.623,388,2.569,389,1.458,392,1.679,393,1.623,395,1.657,396,1.335,397,1.458,399,0.97,400,1.458,402,0.97,403,1.458,404,3.028,406,1.458,407,1.458,408,1.155,409,1.458,410,2.386,411,4.563,412,2.386,413,1.458,414,1.237,421,1.155,425,4.373,427,1.623,429,1.623,431,1.085,432,1.458,433,1.458,434,1.458,435,1.155,436,1.085,439,1.458,440,3.028,441,1.458,523,2.185,525,2.773,526,2.399,527,5.963,528,2.327,530,2.762,531,3.154,532,1.237,534,3.894,535,2.458,542,2.024,544,1.237,606,1.458,617,2.185,618,1.623,619,1.872,620,1.872,621,1.872,622,1.458,623,1.872,624,1.872,625,1.872,626,1.872,627,1.872,628,1.872,629,1.872,630,1.872,631,1.872,632,1.872,633,5.321,634,1.458,635,1.458,636,1.872,637,1.872,638,1.872,639,1.872,640,1.872,641,5.321,642,1.872,643,1.623,644,1.872,645,1.623,646,1.872,647,1.872,648,1.872,649,1.872,650,1.872,651,1.872]],["title/modules/PlansModule.html",[45,1.52,59,2.574]],["body/modules/PlansModule.html",[2,2.278,3,0.162,4,0.162,5,0.144,13,0.016,23,0.857,28,0.405,29,1.046,34,0.162,35,0.024,43,0.011,44,0.011,45,2.456,47,2.057,48,2.425,49,2.764,50,2.764,51,2.425,52,3.058,53,2.288,58,4.446,59,4.939,61,4.446,63,3.693,64,2.764,65,2.764,67,3.24,68,2.581,69,1.438,75,3.625,78,3.625,119,1.867,215,2.764,223,4.489,224,4.489,415,3.449,443,3.693,531,1.958,532,2.764,540,3.693,544,3.693,608,3.986,617,4.489,634,3.258,652,4.183,653,4.183,654,4.183,655,4.183,656,3.986,657,4.183,658,3.986,659,4.183,660,3.258,661,4.183,662,4.183,663,3.625]],["title/injectables/PlansRepository.html",[95,1.013,658,2.778]],["body/injectables/PlansRepository.html",[3,0.101,4,0.101,5,0.09,7,0.174,8,1.556,10,2.789,13,0.016,14,1.196,16,2.635,17,0.884,22,2.808,23,1.411,24,0.527,25,1.592,28,0.353,29,0.653,34,0.101,35,0.015,37,1.065,38,2.203,43,0.008,44,0.008,69,0.899,83,1.065,95,1.037,96,1.114,107,2.494,112,1.962,116,1.065,124,1.167,146,1.801,168,0.796,171,1.167,172,1.626,178,2.686,227,1.215,228,1.864,229,4.383,233,1.864,254,1.223,302,2.804,305,2.602,382,1.78,383,1.317,384,1.43,385,1.317,391,2.636,392,2.024,395,1.114,399,2.066,402,2.066,421,1.613,463,2.265,464,3.107,465,2.462,498,3.197,526,2.462,528,2.804,530,2.663,531,3.279,532,1.727,536,2.636,538,3.458,539,3.458,541,2.845,545,3.768,605,2.036,622,3.107,635,2.036,658,2.845,660,2.036,664,2.265,665,4.839,666,2.614,667,2.614,668,2.614,669,2.614,670,2.614,671,3.458,672,2.614,673,2.614,674,3.99,675,2.614,676,3.99,677,2.614,678,2.614,679,3.99,680,2.614,681,2.036,682,2.614,683,2.614,684,2.614,685,3.99,686,2.614,687,3.99,688,3.99,689,3.99,690,2.614,691,2.614,692,2.614,693,2.614,694,2.614,695,2.036,696,2.614,697,2.614,698,2.614,699,2.614]],["title/injectables/PlansService.html",[95,1.013,656,2.778]],["body/injectables/PlansService.html",[3,0.068,4,0.068,5,0.06,7,0.116,8,1.13,10,2.554,13,0.016,14,1.058,16,2.225,17,0.889,22,2.484,23,1.212,24,0.452,25,1.366,28,0.318,29,0.437,34,0.068,35,0.017,37,1.757,38,2.044,43,0.006,44,0.006,83,1.281,94,0.819,95,0.753,96,0.746,104,0.403,107,2.683,109,1.482,116,1.321,146,1.591,168,0.533,171,0.781,172,1.181,174,2.824,178,2.548,193,0.654,227,0.882,238,3.075,241,1.248,245,2.066,252,1.156,253,1.156,254,3.098,256,3.075,269,3.888,271,3.496,279,3.888,280,3.908,281,3.888,287,1.585,302,2.233,305,2.298,350,1.235,355,1.736,382,1.293,383,0.956,384,1.038,385,1.224,391,1.914,392,1.611,395,1.235,396,1.248,399,1.501,402,1.501,408,2.288,421,1.08,431,1.68,435,1.08,436,2.77,465,1.08,476,1.248,477,1.248,478,1.516,479,1.516,482,1.516,483,1.516,487,2.256,488,2.256,489,1.248,491,1.516,493,1.363,494,1.363,496,1.363,497,1.363,498,1.914,499,1.363,501,2.256,502,2.888,516,1.363,525,2.644,526,2.288,528,3.478,530,2.12,531,3.311,535,3.236,536,2.849,540,1.156,541,1.248,542,1.914,545,4.607,604,1.363,606,2.888,622,2.256,634,1.363,635,1.363,656,2.066,660,1.363,671,2.511,700,1.516,701,5.452,702,2.898,703,1.75,704,1.75,705,1.75,706,1.75,707,1.75,708,1.75,709,1.75,710,1.75,711,1.75,712,1.75,713,1.75,714,3.709,715,2.898,716,1.363,717,1.75,718,1.75,719,1.75,720,1.75,721,1.75,722,1.75,723,1.75,724,1.75,725,1.75,726,1.75,727,4.312,728,2.898,729,1.75,730,2.898,731,1.75,732,2.511,733,1.75,734,2.898,735,2.898,736,1.75,737,1.75,738,3.214,739,1.516,740,1.75,741,1.516,742,1.914,743,2.511,744,1.914,745,2.511,746,1.914,747,2.511,748,2.511,749,1.914,750,2.511,751,1.75,752,1.75,753,2.898,754,1.75,755,1.75,756,1.75,757,1.75,758,1.516]],["title/classes/Routine.html",[35,0.022,759,3.034]],["body/classes/Routine.html",[3,0.153,4,0.153,5,0.135,7,0.262,12,1.857,13,0.015,14,1.23,17,0.944,23,1.252,24,0.588,28,0.319,34,0.236,35,0.023,43,0.01,44,0.01,69,1.357,83,0.776,102,1.202,104,0.748,107,2.384,111,4.385,112,3.755,116,1.202,118,3.874,119,2.398,120,2.287,123,2.287,124,2.398,126,2.607,127,2.287,285,3.005,305,3.161,355,2.86,600,4.185,601,3.832,603,3.316,604,3.072,607,3.072,759,4.759,760,2.813,761,6.111,762,6.865,763,3.946,764,3.946,765,3.946,766,3.946,767,3.946,768,3.946,769,3.419,770,3.946,771,3.072,772,3.419]],["title/controllers/RoutinesController.html",[0,1.66,773,2.778]],["body/controllers/RoutinesController.html",[0,2.965,2,2.415,3,0.229,4,0.229,5,0.203,13,0.015,28,0.309,29,1.481,34,0.229,35,0.034,43,0.013,44,0.013,773,4.961,774,5.135,775,5.926]],["title/modules/RoutinesModule.html",[45,1.52,60,2.574]],["body/modules/RoutinesModule.html",[2,2.629,3,0.202,4,0.202,5,0.18,13,0.015,28,0.365,29,1.307,34,0.202,35,0.03,43,0.012,44,0.012,45,2.73,47,2.572,48,3.031,49,3.455,50,3.455,51,3.031,52,3.828,53,2.86,60,5.051,63,4.263,64,3.455,65,3.455,67,3.031,773,4.99,776,4.532,777,4.532,778,5.051,779,5.23,780,5.23,781,5.23]],["title/injectables/RoutinesRepository.html",[95,1.013,782,3.034]],["body/injectables/RoutinesRepository.html",[3,0.232,4,0.232,5,0.206,13,0.015,28,0.313,29,1.497,34,0.232,35,0.034,43,0.013,44,0.013,95,1.82,96,2.551,782,5.45,783,5.189]],["title/injectables/RoutinesService.html",[95,1.013,778,2.574]],["body/injectables/RoutinesService.html",[3,0.232,4,0.232,5,0.206,13,0.015,28,0.313,29,1.497,34,0.232,35,0.034,43,0.013,44,0.013,95,1.82,96,2.551,778,4.624,784,5.189]],["title/classes/ShapeHistory.html",[35,0.022,785,2.574]],["body/classes/ShapeHistory.html",[3,0.15,4,0.15,5,0.133,7,0.258,12,1.761,13,0.015,14,1.13,24,0.569,28,0.316,34,0.234,35,0.022,43,0.01,44,0.01,69,1.332,83,0.762,90,2.007,102,1.18,104,0.739,108,4.018,109,2.525,111,4.258,112,3.664,118,3.731,119,2.369,120,2.246,121,2.345,122,1.09,123,3.077,124,1.729,127,2.246,128,3.048,306,3.562,465,2.391,785,4,786,4.864,787,2.763,788,5.071,789,5.312,790,5.071,791,5.071,792,3.875,793,3.875,794,6.649,795,5.308,796,5.308,797,4.6,798,3.875,799,3.875,800,3.875,801,3.875,802,3.875,803,3.875,804,3.358,805,3.875,806,2.763,807,3.358]],["title/classes/ShapeHistoryDto.html",[35,0.022,344,1.916]],["body/classes/ShapeHistoryDto.html",[3,0.181,4,0.181,5,0.161,7,0.311,12,1.898,13,0.015,14,1.218,24,0.536,28,0.314,34,0.181,35,0.035,43,0.011,44,0.011,102,1.425,104,0.837,121,2.497,122,1.317,187,3.398,191,3.398,193,1.749,306,3.291,315,3.712,344,2.959,788,5.178,789,5.178,790,5.178,791,5.178,794,6.441,808,6.293,809,4.055,810,4.68,811,4.68,812,6.65,813,4.68,814,4.68,815,4.68,816,7.019]],["title/modules/SharedModule.html",[45,1.52,61,2.404]],["body/modules/SharedModule.html",[2,2.218,3,0.211,4,0.211,5,0.187,13,0.016,23,1.115,28,0.372,29,1.36,34,0.211,35,0.031,43,0.013,44,0.013,45,2.579,47,2.677,52,2.977,53,2.977,61,4.08,67,3.155,68,3.358,69,1.871,119,2.429,215,3.596,305,2.429,603,4.08,817,5.443,818,5.443,819,5.443]],["title/classes/Training.html",[35,0.022,305,1.738]],["body/classes/Training.html",[3,0.131,4,0.131,5,0.116,7,0.224,12,1.877,13,0.015,14,1.205,17,0.944,24,0.582,25,1.114,28,0.294,34,0.218,35,0.019,43,0.009,44,0.009,69,1.161,83,0.664,90,2.497,102,1.029,104,0.671,108,4.283,111,4.342,112,3.647,116,1.326,118,3.797,119,2.151,120,1.958,121,2.44,122,0.95,123,1.958,124,2.151,127,1.958,128,3.249,287,3.354,305,2.894,326,3.784,350,3.192,355,1.581,369,2.975,535,3.075,600,3.755,603,2.084,607,2.63,742,4.051,744,4.051,746,3.715,749,4.051,820,2.408,821,4.822,822,3.377,823,3.377,824,3.377,825,3.377,826,3.377,827,3.377,828,3.377,829,3.377,830,3.377,831,3.377,832,3.377,833,3.377,834,3.377,835,2.927,836,3.377,837,2.927]],["title/classes/TrainingDto.html",[35,0.022,528,2.018]],["body/classes/TrainingDto.html",[3,0.146,4,0.146,5,0.129,7,0.25,12,2.027,13,0.015,14,1.301,17,0.92,23,1.222,24,0.547,25,1.685,28,0.272,34,0.146,35,0.03,43,0.01,44,0.01,102,1.147,104,0.724,116,1.173,121,2.603,122,1.059,185,3.017,187,3.35,190,3.262,191,3.414,192,3.508,193,1.407,286,3.94,287,3.262,288,3.94,291,4.053,293,2.685,300,3.332,301,4.644,310,3.94,326,3.211,329,2.488,346,3.711,528,2.695,535,3.262,742,3.94,744,3.94,746,3.94,749,3.94,838,3.263,839,3.766,840,3.766,841,3.766,842,3.766,843,3.766,844,3.766,845,3.766,846,3.766,847,3.766,848,3.766,849,3.766]],["title/classes/TrainingUpdateDto.html",[35,0.022,850,2.778]],["body/classes/TrainingUpdateDto.html",[3,0.155,4,0.155,5,0.138,7,0.267,12,1.97,13,0.015,14,1.264,17,0.93,24,0.556,25,1.782,28,0.284,34,0.155,35,0.031,43,0.01,44,0.01,102,1.224,104,0.757,116,1.213,121,2.547,122,1.131,185,2.329,187,2.546,190,3.374,191,2.546,192,3.408,193,1.502,287,3.374,300,3.772,326,3.357,329,4.368,346,3.88,535,3.374,742,4.076,744,4.076,746,4.076,749,4.076,850,3.88,851,5.769,852,3.483,853,4.019,854,4.019,855,3.483,856,4.019,857,4.019,858,4.019,859,4.019,860,4.019,861,4.019]],["title/classes/UpdatePlanDto.html",[35,0.022,862,3.034]],["body/classes/UpdatePlanDto.html",[3,0.16,4,0.16,5,0.142,7,0.275,12,1.942,13,0.015,14,1.246,17,0.898,23,1.282,24,0.549,25,1.79,28,0.327,34,0.16,35,0.032,43,0.011,44,0.011,102,1.259,104,0.772,107,2.441,116,1.231,121,2.522,122,1.163,190,3.423,192,3.13,193,1.545,221,3.861,285,3.078,299,3.627,300,3.799,304,3.219,305,2.793,306,3.033,307,3.219,313,3.582,314,3.582,315,3.422,329,2.731,850,4.462,851,3.219,855,4.806,862,4.318,863,6.357,864,4.134,865,5.546,866,4.134,867,4.134,868,4.134,869,4.134]],["title/classes/User.html",[35,0.022,109,1.339]],["body/classes/User.html",[3,0.112,4,0.112,5,0.099,7,0.192,12,1.878,13,0.015,14,1.205,17,0.934,23,0.881,24,0.587,25,0.993,28,0.297,34,0.199,35,0.017,43,0.008,44,0.008,69,0.993,83,0.568,90,2.228,102,0.88,104,0.599,105,1.88,108,4.285,109,2.654,110,2.503,111,4.36,112,3.673,116,1.197,118,3.798,119,1.919,120,1.674,121,2.43,122,0.813,123,2.493,124,1.289,126,1.908,127,1.674,128,3.25,177,3.154,306,3.331,320,3.396,321,4.061,322,3.665,323,3.665,324,3.665,325,3.139,326,3.514,340,3.728,341,3.728,342,2.503,347,3.728,354,2.249,355,1.352,362,3.35,601,2.06,758,2.503,785,3.762,797,3.728,806,3.067,870,2.06,871,4.302,872,2.888,873,2.888,874,2.888,875,2.888,876,4.302,877,2.888,878,2.888,879,2.888,880,3.728,881,2.888,882,2.888,883,4.302,884,2.888,885,2.888,886,3.728,887,2.888,888,4.454,889,2.888,890,2.249,891,2.06,892,2.503]],["title/classes/UserDto.html",[35,0.022,143,1.587]],["body/classes/UserDto.html",[3,0.146,4,0.146,5,0.129,7,0.25,12,2.003,13,0.015,14,1.285,17,0.92,24,0.566,25,1.202,28,0.311,34,0.146,35,0.03,43,0.01,44,0.01,102,1.147,104,0.724,105,1.969,116,1.173,121,2.577,122,1.059,143,2.121,177,3.089,181,2.932,185,2.183,187,3.466,188,3.438,190,2.847,191,3.414,192,3.35,193,1.407,289,2.324,298,3.211,299,3.017,300,2.695,306,2.847,310,3.94,315,3.211,320,3.94,321,4.253,322,4.253,323,4.253,324,4.253,325,3.164,326,3.211,327,3.263,329,2.488,346,3.711,785,3.94,888,3.263,893,3.263,894,3.766,895,3.766,896,3.766,897,3.766,898,3.766,899,3.766,900,3.766,901,3.766,902,3.766,903,3.766]],["title/controllers/UsersController.html",[0,1.66,904,2.778]],["body/controllers/UsersController.html",[0,0.841,2,0.805,3,0.076,4,0.076,5,0.068,7,0.131,8,1.248,10,2.657,12,1.618,13,0.016,14,1.038,16,2.333,17,0.884,19,1.145,22,2.34,23,1.176,24,0.553,25,1.326,28,0.312,29,0.494,34,0.076,35,0.011,37,0.805,38,2.143,43,0.006,44,0.006,83,0.629,94,0.924,105,1.331,109,2.348,116,1.277,122,0.556,128,3.614,133,1.408,137,1.711,138,4.265,139,4.265,140,3.307,141,3.307,142,4.268,143,2.34,146,1.681,147,2.876,148,2.281,149,4.407,150,3.633,151,4.407,152,4.407,153,1.408,154,4.407,160,3.813,161,3.813,162,3.813,163,3.144,164,1.408,165,1.408,168,0.601,171,0.881,172,0.805,174,1.023,175,1.408,178,2.437,210,1.08,227,0.974,242,1.854,254,1.497,262,1.538,271,1.75,317,2.825,325,2.28,344,2.28,355,1.887,383,1.531,384,1.146,385,1.331,388,2.664,389,1.538,397,1.538,399,1.023,400,1.538,402,1.023,403,1.538,404,3.611,406,1.538,407,1.538,408,1.218,409,1.538,410,1.538,411,4.658,412,2.491,413,1.538,414,1.305,425,4.473,426,1.711,432,1.538,433,1.538,434,1.538,435,1.218,436,1.854,437,1.711,439,1.538,440,1.538,441,1.538,546,2.281,548,1.974,549,1.974,550,1.974,551,2.488,552,1.408,601,1.408,904,2.281,905,1.711,906,1.538,907,1.975,908,1.538,909,1.975,910,1.975,911,1.538,912,1.975,913,1.975,914,1.975,915,1.538,916,1.975,917,1.975,918,1.975,919,1.975,920,1.538,921,3.199,922,1.975,923,1.975,924,1.538,925,1.975,926,1.975,927,1.975,928,1.975,929,1.975,930,1.975,931,1.975,932,1.711,933,1.975,934,1.975,935,1.975,936,1.975,937,1.975,938,1.975,939,1.975,940,1.975]],["title/modules/UsersModule.html",[45,1.52,62,2.404]],["body/modules/UsersModule.html",[2,2.499,3,0.187,4,0.187,5,0.166,13,0.016,23,0.988,28,0.402,29,1.205,34,0.187,35,0.028,43,0.012,44,0.012,45,2.392,47,2.372,52,2.638,53,2.638,62,3.784,67,2.795,68,2.976,69,1.658,109,1.658,119,2.152,210,3.689,212,3.555,215,3.186,223,4.374,224,4.374,552,3.439,556,4.456,891,4.374,904,4.809,924,3.755,941,4.823,942,4.823,943,4.823,944,3.755,945,4.374,946,4.823,947,4.823]],["title/injectables/UsersRepository.html",[95,1.013,945,2.778]],["body/injectables/UsersRepository.html",[3,0.105,4,0.105,5,0.094,7,0.181,8,1.606,10,2.801,13,0.016,14,1.209,16,2.666,17,0.923,22,2.785,23,1.4,24,0.522,25,1.579,28,0.326,29,0.681,34,0.105,35,0.016,37,1.11,38,1.982,43,0.008,44,0.008,69,0.937,83,0.536,90,1.411,95,1.071,96,1.161,105,1.638,109,2.148,112,1.34,116,1.392,124,1.216,143,2.254,146,1.813,168,0.83,171,1.216,172,1.678,178,2.785,227,1.254,228,1.943,229,4.454,233,1.943,317,2.865,320,2.72,325,2.72,344,2.72,383,1.826,384,1.476,385,1.359,399,2.133,402,2.133,461,2.362,462,2.362,464,4.307,465,3.665,489,1.943,498,3.279,514,2.72,548,2.541,549,2.541,550,2.541,551,2.541,552,1.943,554,2.72,695,2.122,788,2.122,789,2.122,790,2.122,791,2.122,890,2.122,906,3.207,908,3.207,911,3.207,915,3.207,920,3.207,944,2.122,945,2.936,948,2.362,949,2.725,950,2.725,951,3.569,952,2.725,953,2.725,954,2.725,955,2.725,956,2.725,957,2.725,958,2.725,959,2.725,960,2.725,961,2.725,962,2.725,963,2.725,964,2.362,965,2.362,966,2.362,967,2.725]],["title/injectables/UsersService.html",[95,1.013,212,2.258]],["body/injectables/UsersService.html",[3,0.065,4,0.065,5,0.058,7,0.112,8,1.097,10,2.664,13,0.016,14,1.119,16,2.411,17,0.88,22,2.519,23,1.266,24,0.472,25,1.428,28,0.28,29,0.422,34,0.065,35,0.016,37,1.718,38,2.265,43,0.005,44,0.005,83,1.342,90,0.874,94,0.79,95,0.731,96,0.719,104,0.391,105,1.546,109,2.451,112,1.383,116,1.392,118,1.978,143,2.062,146,1.687,168,0.514,171,0.753,172,1.146,174,2.184,177,0.874,178,2.78,188,1.115,193,0.631,212,1.631,227,0.857,238,3.007,241,1.204,242,1.631,245,2.006,252,1.115,253,1.115,254,3.227,256,2.578,266,1.315,269,4.008,271,3.585,275,1.315,279,4.008,280,3.978,281,4.162,317,2.184,325,2.074,344,2.488,355,2.511,383,1.392,384,1.008,385,0.928,399,1.457,402,1.457,408,1.042,431,1.631,435,1.042,436,2.096,476,1.204,481,1.463,487,2.191,488,2.816,489,2.006,493,2.191,494,1.315,496,1.315,497,1.315,498,3.095,499,1.315,501,1.315,502,3.284,514,1.858,548,1.736,549,1.736,550,1.736,551,1.736,554,2.786,556,1.115,906,2.191,908,2.191,911,2.191,915,2.191,920,2.191,924,1.315,932,1.463,944,1.315,951,2.438,964,1.463,965,1.463,966,1.463,968,1.463,969,2.813,970,2.813,971,2.813,972,1.688,973,1.688,974,1.688,975,1.688,976,1.688,977,1.688,978,1.688,979,2.813,980,1.688,981,2.813,982,1.688,983,2.813,984,1.688,985,1.688,986,2.813,987,1.688,988,1.463,989,1.315,990,1.688,991,1.688,992,2.813,993,2.813,994,1.688,995,1.688,996,1.688,997,1.688,998,1.688,999,2.813,1000,1.688,1001,1.688,1002,1.688,1003,1.688,1004,1.688,1005,1.688,1006,1.688,1007,1.688,1008,1.688,1009,1.688,1010,2.813,1011,1.688,1012,1.688,1013,1.688,1014,1.688,1015,1.688,1016,1.688,1017,1.688,1018,1.688,1019,1.688,1020,1.688,1021,1.688,1022,2.813,1023,1.688,1024,1.688,1025,1.688,1026,1.688,1027,1.688,1028,1.688,1029,1.688,1030,1.688,1031,1.688,1032,3.616,1033,1.688,1034,1.688,1035,1.688,1036,1.688,1037,1.688,1038,1.688,1039,1.688,1040,1.688,1041,1.688]],["title/coverage.html",[1042,4.149]],["body/coverage.html",[0,2.393,1,1.502,5,0.072,6,1.826,13,0.015,19,3.418,24,0.161,31,1.3,35,0.042,43,0.006,44,0.006,51,1.221,95,1.752,97,1.826,101,1.221,103,2.403,109,0.724,129,1.502,131,1.502,132,1.826,136,1.392,142,1.3,143,0.858,155,1.392,156,1.392,158,1.502,160,1.3,161,1.3,162,1.3,163,1.3,167,1.221,180,1.826,197,1.392,203,1.502,205,1.502,207,1.392,210,1.152,212,1.221,226,1.826,234,1.392,237,1.826,242,1.221,254,0.986,258,1.64,282,1.091,283,1.826,284,1.826,302,1.091,303,1.826,304,2.624,305,0.94,317,1.091,318,1.826,319,1.826,344,1.036,350,0.898,351,2.403,370,1.502,372,1.036,373,1.826,380,1.502,381,1.826,388,1.392,392,0.787,415,1.3,416,1.392,418,1.502,431,4.718,443,1.392,446,1.392,448,1.502,451,1.826,458,1.392,466,1.826,474,1.64,477,1.502,503,1.54,505,2.624,506,0.858,507,1.64,508,2.624,509,2.624,512,1.64,513,1.826,518,2.624,520,1.64,521,2.624,522,2.624,523,1.502,524,2.624,528,1.091,530,1.036,531,0.986,533,1.64,536,1.392,537,2.624,540,1.392,542,1.392,543,2.624,544,1.392,546,1.502,547,2.624,553,1.64,554,1.392,555,2.624,556,1.392,557,2.624,558,1.502,559,1.826,560,1.826,561,1.826,583,1.826,586,1.826,590,2.403,603,1.3,608,1.502,610,1.826,617,1.502,618,1.826,656,1.502,658,1.502,664,1.826,681,1.64,700,1.826,716,1.64,759,1.64,760,2.403,771,1.64,773,1.502,774,1.826,778,1.392,782,1.64,783,1.826,784,1.826,785,1.392,786,2.403,787,2.403,806,1.502,808,1.826,809,1.826,820,2.403,838,1.826,850,1.502,851,1.64,852,1.826,862,1.64,863,1.826,870,2.403,891,1.502,893,1.826,904,1.502,905,1.826,945,1.502,948,1.826,968,1.826,989,1.64,1042,1.64,1043,2.107,1044,2.107,1045,2.107,1046,4.814,1047,5.265,1048,1.826,1049,7.792,1050,4.814,1051,7.721,1052,6.127,1053,1.826,1054,5.897,1055,5.897,1056,1.826,1057,4.213,1058,1.826,1059,1.826,1060,4.814,1061,1.826,1062,1.826,1063,1.826,1064,5.11,1065,5.11,1066,1.826,1067,1.826,1068,1.826,1069,3.37,1070,4.814,1071,2.107,1072,1.826,1073,2.107,1074,2.107]],["title/dependencies.html",[48,2.718,1075,2.815]],["body/dependencies.html",[13,0.016,29,1.273,30,3.631,35,0.029,43,0.012,44,0.012,48,2.951,69,1.751,72,3.965,122,1.432,124,2.272,193,1.903,199,4.412,201,3.965,414,3.364,569,5.992,570,4.412,988,4.412,1076,6.915,1077,5.092,1078,5.092,1079,5.092,1080,5.092,1081,5.092,1082,5.092,1083,5.092,1084,5.092,1085,5.092,1086,5.092,1087,5.092,1088,5.092,1089,5.092,1090,5.092,1091,5.092,1092,5.092,1093,5.092,1094,5.092,1095,5.092,1096,5.092,1097,5.092,1098,5.092,1099,5.092,1100,5.092,1101,5.092,1102,5.092,1103,5.092]],["title/miscellaneous/functions.html",[1104,2.004,1105,4.063]],["body/miscellaneous/functions.html",[7,0.409,13,0.014,43,0.014,44,0.014,51,4.349,1048,5.336,1104,3.799,1105,5.336,1106,6.157]],["title/index.html",[7,0.216,1107,3.248,1108,3.248]],["body/index.html",[13,0.015,43,0.011,44,0.011,105,1.358,124,1.836,1042,3.204,1109,4.114,1110,4.114,1111,5.528,1112,5.41,1113,4.79,1114,4.79,1115,4.114,1116,4.114,1117,4.114,1118,4.114,1119,7.448,1120,4.114,1121,4.114,1122,4.114,1123,4.114,1124,3.565,1125,4.114,1126,3.565,1127,4.114,1128,4.114,1129,4.114,1130,4.114,1131,4.114,1132,4.114,1133,4.114,1134,6.243,1135,4.79,1136,3.565,1137,4.79,1138,4.79,1139,4.79,1140,4.114,1141,4.114,1142,6.243,1143,6.243,1144,5.528,1145,5.528,1146,5.528,1147,4.114,1148,5.528,1149,6.243,1150,4.79,1151,5.528,1152,4.114,1153,4.114,1154,4.114,1155,4.114,1156,3.565,1157,4.114,1158,4.114,1159,3.565,1160,4.114,1161,4.114,1162,4.114,1163,4.114,1164,4.114,1165,4.114,1166,4.114,1167,4.114,1168,4.114,1169,4.114,1170,7.327,1171,4.114,1172,4.114,1173,4.114,1174,4.114,1175,7.171,1176,4.114,1177,4.114,1178,5.528,1179,4.114,1180,4.114,1181,4.114,1182,4.114,1183,5.528,1184,5.528,1185,4.114,1186,4.114,1187,4.114,1188,4.114,1189,3.565,1190,3.565,1191,3.565,1192,4.114,1193,4.114,1194,4.114,1195,4.114,1196,4.114,1197,4.114]],["title/modules.html",[47,2.62]],["body/modules.html",[13,0.013,43,0.013,44,0.013,46,4.033,47,2.781,57,3.736,58,3.49,59,3.736,60,3.736,61,3.49,62,3.49,1198,7.505,1199,7.505,1200,7.505,1201,7.873,1202,7.242,1203,7.242]],["title/overview.html",[1204,4.617]],["body/overview.html",[2,1.907,13,0.015,31,4.103,43,0.011,44,0.011,45,1.825,46,5.72,47,2.301,48,2.713,49,3.092,50,3.092,51,2.713,52,2.56,53,2.56,54,4.055,55,4.055,56,4.055,57,4.994,58,4.331,59,4.994,60,4.797,61,4.331,62,4.331,63,3.975,64,3.092,65,3.092,96,1.994,102,1.425,194,4.055,195,4.055,197,4.393,504,1.825,776,4.055,777,4.055,778,4.393,886,4.055,1204,4.055,1205,4.68,1206,4.68,1207,4.68,1208,4.68]],["title/properties.html",[104,0.652,1075,2.815]],["body/properties.html",[13,0.015,43,0.013,44,0.013,104,0.8,128,2.691,1112,4.982,1113,4.982,1114,4.982,1126,4.982,1135,4.982,1136,4.982,1137,4.982,1138,4.982,1139,4.982,1150,4.982,1156,4.982,1159,4.982,1189,4.982,1190,4.982,1191,4.982,1209,5.749,1210,5.749,1211,5.749,1212,5.749,1213,5.749,1214,5.749,1215,5.749]],["title/miscellaneous/typealiases.html",[1104,2.004,1216,4.689]],["body/miscellaneous/typealiases.html",[7,0.375,13,0.013,24,0.431,43,0.013,44,0.013,103,4.02,125,5.26,351,4.02,368,5.26,590,4.02,605,5.26,760,4.02,769,5.853,786,4.02,787,4.816,804,5.853,820,4.02,835,5.853,870,4.02,890,5.26,1104,3.478,1217,5.637,1218,4.885,1219,4.885,1220,4.885,1221,4.885,1222,4.885,1223,4.885,1224,4.885]],["title/miscellaneous/variables.html",[1104,2.004,1225,4.063]],["body/miscellaneous/variables.html",[7,0.124,10,0.667,13,0.016,17,0.88,19,3.388,23,1.147,24,0.543,38,1.901,43,0.006,44,0.006,83,0.366,103,1.327,105,0.614,107,2.069,109,1.048,116,0.88,129,2.173,130,1.612,142,1.88,143,0.758,146,0.447,155,2.557,160,1.88,161,1.88,162,1.88,163,1.88,177,0.964,178,0.758,207,2.557,210,2.117,221,1.148,252,5.027,253,5.042,254,0.871,258,2.373,265,1.612,266,1.449,275,1.449,280,1.229,285,2.754,286,1.229,287,2.117,288,1.229,305,2.7,320,1.229,321,1.327,322,1.327,323,1.327,324,1.327,325,0.915,350,1.299,351,1.327,369,1.148,370,2.173,371,1.612,372,0.915,388,2.013,392,0.695,395,1.907,415,2.389,431,1.767,436,1.078,446,2.557,450,1.612,465,3.047,474,2.373,477,2.173,505,1.449,507,3.014,508,1.449,509,1.449,516,2.373,517,2.641,518,1.449,520,3.014,521,1.449,522,1.449,524,1.449,527,1.449,528,0.964,530,0.915,531,1.426,533,3.014,535,1.667,537,1.449,540,2.557,541,1.327,543,1.449,544,2.557,547,1.449,553,3.014,555,1.449,556,2.557,557,1.449,590,1.327,599,1.612,603,1.88,608,2.173,609,1.612,643,2.641,645,1.612,663,1.612,681,2.373,695,2.373,716,2.373,732,1.612,738,2.641,739,5.066,741,1.612,742,2.013,743,2.641,744,2.013,745,2.641,746,2.013,747,2.641,748,2.641,749,2.013,750,2.641,760,1.327,771,2.373,772,1.612,786,1.327,787,2.173,806,2.173,807,1.612,820,1.327,837,1.612,870,1.327,880,3.355,891,2.173,892,1.612,989,2.373,1053,1.612,1056,1.612,1058,1.612,1059,2.641,1061,1.612,1062,1.612,1063,2.641,1064,1.612,1065,5.066,1066,2.641,1067,1.612,1068,2.641,1072,1.612,1104,1.148,1124,1.612,1218,1.612,1219,1.612,1220,1.612,1221,1.612,1222,1.612,1223,1.612,1224,1.612,1225,1.612,1226,1.86,1227,1.86,1228,1.86,1229,5.601,1230,1.86,1231,1.86,1232,1.86,1233,1.86,1234,1.86,1235,1.86,1236,1.86,1237,1.86,1238,1.86,1239,1.86,1240,1.86,1241,1.86,1242,1.86,1243,1.86,1244,1.86,1245,1.86,1246,1.86,1247,1.86,1248,1.86,1249,1.86,1250,1.86,1251,1.86,1252,3.048,1253,3.871,1254,3.048,1255,1.86,1256,1.86,1257,1.86,1258,1.86,1259,1.86,1260,1.86,1261,3.048,1262,1.86,1263,1.86,1264,1.86,1265,3.048,1266,1.86,1267,1.86,1268,1.86,1269,4.939,1270,3.048,1271,1.86,1272,1.86,1273,1.86,1274,1.86,1275,1.86,1276,1.86,1277,1.86,1278,1.86,1279,1.86,1280,1.86,1281,1.86,1282,1.86,1283,1.86,1284,1.86,1285,1.86,1286,1.86,1287,1.86,1288,1.86,1289,3.048,1290,1.86,1291,1.86,1292,1.86,1293,1.86,1294,1.86,1295,1.86,1296,1.86,1297,1.86,1298,1.86,1299,1.86,1300,1.86,1301,1.86,1302,1.86,1303,1.86,1304,1.86,1305,1.86,1306,1.86,1307,1.86,1308,1.86,1309,3.048]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":431,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1210,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":739,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["10.0.3",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1206,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1208,"title":{},"body":{"overview.html":{}}}],["16.1.0",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1207,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["6",{"_index":886,"title":{},"body":{"classes/User.html":{},"overview.html":{}}}],["6.3.0",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1205,"title":{},"body":{"overview.html":{}}}],["7.1.1",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["9.0.0",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["9.4.0",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":465,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/ShapeHistory.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["academia",{"_index":1127,"title":{},"body":{"index.html":{}}}],["according",{"_index":795,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["acesse",{"_index":1144,"title":{},"body":{"index.html":{}}}],["activation",{"_index":871,"title":{},"body":{"classes/User.html":{}}}],["active",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["addexercise",{"_index":665,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addexercise(planid",{"_index":667,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addorupdatetraining",{"_index":525,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["addorupdatetraining(id",{"_index":619,"title":{},"body":{"controllers/PlansController.html":{}}}],["addorupdatetraining(planid",{"_index":703,"title":{},"body":{"injectables/PlansService.html":{}}}],["age",{"_index":788,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["age'})@prop({type",{"_index":792,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["aggregate(pipeline",{"_index":688,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["aliases",{"_index":1217,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowdiskuse(false",{"_index":689,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["already",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["alteredtraining",{"_index":734,"title":{},"body":{"injectables/PlansService.html":{}}}],["alteredtraining.push",{"_index":751,"title":{},"body":{"injectables/PlansService.html":{}}}],["além",{"_index":1128,"title":{},"body":{"index.html":{}}}],["api",{"_index":1150,"title":{},"body":{"index.html":{},"properties.html":{}}}],["api.onrender.com/swagger",{"_index":1153,"title":{},"body":{"index.html":{}}}],["api/back",{"_index":1110,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":411,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":412,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":121,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isarray()@isoptional",{"_index":312,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["apiproperty()@isdate()@isdefined()@isnotempty",{"_index":810,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isdate()@isnotempty()@isdefined",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isdefined()@isarray()@arraynotempty",{"_index":289,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isboolean",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isdate",{"_index":896,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isjwt()@isstring",{"_index":183,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@ismongoid()@isstring",{"_index":185,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring",{"_index":310,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring()@isemail",{"_index":181,"title":{},"body":{"classes/AuthDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isstring()@isnotempty()@isdefined",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isboolean",{"_index":839,"title":{},"body":{"classes/TrainingDto.html":{}}}],["apiproperty()@isnumber()@isdefined()@isnotempty",{"_index":812,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isoptional()@isarray",{"_index":865,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isboolean",{"_index":853,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["apiproperty()@isoptional()@isdate",{"_index":307,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@ismongoid()@isstring",{"_index":855,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined",{"_index":293,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined()@minlength(6",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":295,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{}}}],["apiproperty()@isstring()@isurl()@isoptional",{"_index":291,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty({description",{"_index":108,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["apitags",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exercises",{"_index":423,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["apitags('plans",{"_index":638,"title":{},"body":{"controllers/PlansController.html":{}}}],["apitags('users",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["aplicação",{"_index":1113,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app.controller",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":46,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":31,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["arr.foreach((obj",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["arrayelemat",{"_index":1291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraynotempty",{"_index":298,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["async",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["atlasconnection",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["atlasconnection}/${process.env.mongo_db",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":101,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["auth.controller",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.model",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["auth.name",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.repository",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_controller",{"_index":507,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_repository",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_service",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/IAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":131,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdocument",{"_index":125,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"miscellaneous/typealiases.html":{}}}],["authdto",{"_index":167,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":413,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":57,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1189,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authrepository",{"_index":205,"title":{"injectables/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"coverage.html":{}}}],["authschema",{"_index":129,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":203,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["available",{"_index":1203,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["avatar'})@prop({type",{"_index":874,"title":{},"body":{"classes/User.html":{}}}],["await",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["back",{"_index":1157,"title":{},"body":{"index.html":{}}}],["bad",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request_400",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bad_request_400})@apinotfoundresponse({description",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`delete",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`disable",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`enable",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`invalid",{"_index":487,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`update",{"_index":501,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(error.message",{"_index":497,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(errors",{"_index":494,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["banco",{"_index":1142,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(passwordlogin",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(password",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["belongs",{"_index":727,"title":{},"body":{"injectables/PlansService.html":{}}}],["birth",{"_index":876,"title":{},"body":{"classes/User.html":{}}}],["birthdate",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["bmi",{"_index":789,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["body",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["body('exerciseid",{"_index":650,"title":{},"body":{"controllers/PlansController.html":{}}}],["boolean",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1201,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1198,"title":{},"body":{"modules.html":{}}}],["buildparams",{"_index":477,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildparams(params",{"_index":482,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["calculation",{"_index":805,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["calculation'})@prop({type",{"_index":798,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["catch",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["characters",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["class",{"_index":35,"title":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":102,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_plansmodule",{"_index":652,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_plansmodule_imports",{"_index":653,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_routinesmodule",{"_index":776,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_routinesmodule_providers",{"_index":777,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["collection",{"_index":126,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{}}}],["com",{"_index":1134,"title":{},"body":{"index.html":{}}}],["comparepasswords",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepasswords(password",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc",{"_index":1165,"title":{},"body":{"index.html":{}}}],["concat",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cond",{"_index":1292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('mongo_atlas",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mongo_local",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(model",{"_index":228,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["constructor(private",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(repository",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":562,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["construída",{"_index":1211,"title":{},"body":{"properties.html":{}}}],["content",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":821,"title":{},"body":{"classes/Training.html":{}}}],["controle",{"_index":1118,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exercises",{"_index":422,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["controller('plans",{"_index":637,"title":{},"body":{"controllers/PlansController.html":{}}}],["controller('users",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1042,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":227,"title":{},"body":{"injectables/AuthRepository.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":437,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["create(auth",{"_index":231,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["create(exercise",{"_index":386,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["create(plan",{"_index":622,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["create(user",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":599,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["created_201",{"_index":388,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createexercisedto",{"_index":282,"title":{"classes/CreateExerciseDto.html":{}},"body":{"classes/CreateExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["createplandto",{"_index":302,"title":{"classes/CreatePlanDto.html":{}},"body":{"classes/CreatePlanDto.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":317,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["current",{"_index":755,"title":{},"body":{"injectables/PlansService.html":{}}}],["da",{"_index":1112,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dados",{"_index":1143,"title":{},"body":{"index.html":{}}}],["data",{"_index":797,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{}}}],["data.pipeline",{"_index":683,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["data.pipeline.ts",{"_index":1059,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":306,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["date'})@prop({type",{"_index":877,"title":{},"body":{"classes/User.html":{}}}],["date(shape.age",{"_index":1018,"title":{},"body":{"injectables/UsersService.html":{}}}],["de",{"_index":1119,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":514,"title":{},"body":{"interfaces/IDefaultController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete(id",{"_index":951,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["demonstração",{"_index":1129,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":48,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":128,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["descrição",{"_index":1109,"title":{},"body":{"index.html":{}}}],["desenho",{"_index":1167,"title":{},"body":{"index.html":{}}}],["desenvolvida",{"_index":1133,"title":{},"body":{"index.html":{}}}],["development",{"_index":1174,"title":{},"body":{"index.html":{}}}],["diagramação",{"_index":1166,"title":{},"body":{"index.html":{}}}],["disable",{"_index":548,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disable(@param('id",{"_index":939,"title":{},"body":{"controllers/UsersController.html":{}}}],["disable(id",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disabled",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IDefaultController.html":{}}}],["docs/index.html",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["document",{"_index":123,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["documentation",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["documentação",{"_index":1149,"title":{},"body":{"index.html":{}}}],["done",{"_index":749,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["done'})@prop({type",{"_index":822,"title":{},"body":{"classes/Training.html":{}}}],["dotenv",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["draw",{"_index":1145,"title":{},"body":{"index.html":{}}}],["dtos/auth.dto",{"_index":511,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["dtos/dtos",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":1124,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["e._id",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1185,"title":{},"body":{"index.html":{}}}],["elemmatch",{"_index":752,"title":{},"body":{"injectables/PlansService.html":{}}}],["em",{"_index":1136,"title":{},"body":{"index.html":{},"properties.html":{}}}],["email",{"_index":105,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email'})@prop({type",{"_index":110,"title":{},"body":{"classes/Auth.html":{},"classes/User.html":{}}}],["enable",{"_index":549,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enable(@param('id",{"_index":936,"title":{},"body":{"controllers/UsersController.html":{}}}],["enable(id",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enabled",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["end",{"_index":1111,"title":{},"body":{"index.html":{}}}],["eq",{"_index":1293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["error.constraints",{"_index":1026,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors",{"_index":491,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["errors.length",{"_index":493,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["errors.map((error",{"_index":1025,"title":{},"body":{"injectables/UsersService.html":{}}}],["estática",{"_index":1164,"title":{},"body":{"index.html":{}}}],["evolução",{"_index":1122,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1172,"title":{},"body":{"index.html":{}}}],["execução",{"_index":1130,"title":{},"body":{"index.html":{}}}],["exercise",{"_index":350,"title":{"classes/Exercise.html":{}},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercise'})@prop({type",{"_index":364,"title":{},"body":{"classes/Exercise.html":{}}}],["exercise.focusmuscle",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.id",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.image",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.length",{"_index":430,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["exercise.model",{"_index":420,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"interfaces/IExercisesController.html":{}}}],["exercise.name",{"_index":450,"title":{},"body":{"modules/ExercisesModule.html":{},"miscellaneous/variables.html":{}}}],["exercise.notes",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.video",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedatapipeline",{"_index":681,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisedatapipeline('_id",{"_index":690,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedatapipeline('userid",{"_index":686,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedetails",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails._id",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.focusmuscle",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.image",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.name",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.notes",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.video",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedocument",{"_index":368,"title":{},"body":{"classes/Exercise.html":{},"injectables/ExercisesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["exercisedto",{"_index":372,"title":{"classes/ExerciseDto.html":{}},"body":{"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseexists",{"_index":753,"title":{},"body":{"injectables/PlansService.html":{}}}],["exercisefocusmuscle",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exerciseid",{"_index":535,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["exerciseimage",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisename",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercises",{"_index":369,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["exercises.controller",{"_index":445,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.dto.ts",{"_index":284,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["exercises.dto.ts:17",{"_index":294,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:23",{"_index":290,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:29",{"_index":292,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:35",{"_index":297,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:40",{"_index":296,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.length",{"_index":484,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.map((exe",{"_index":485,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.repository",{"_index":449,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.service",{"_index":444,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises/exercises.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["exercises/exercises.service",{"_index":661,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises/interfaces/exercises.service.interface",{"_index":662,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises_controller",{"_index":520,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_repository",{"_index":446,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_service",{"_index":415,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"interfaces/IExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseschema",{"_index":370,"title":{},"body":{"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisescontroller",{"_index":380,"title":{"controllers/ExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"coverage.html":{}}}],["exercisesmodule",{"_index":58,"title":{"modules/ExercisesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["exercisesrepository",{"_index":448,"title":{"injectables/ExercisesRepository.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["exercisesservice",{"_index":443,"title":{"injectables/ExercisesService.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["exercisevideo",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercícios",{"_index":1131,"title":{},"body":{"index.html":{}}}],["existing",{"_index":597,"title":{},"body":{"classes/Plan.html":{}}}],["existingtraining",{"_index":714,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining.findindex",{"_index":736,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining[existingtrainingindex",{"_index":740,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtrainingindex",{"_index":735,"title":{},"body":{"injectables/PlansService.html":{}}}],["existis",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{}}}],["expiresin",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"dependencies.html":{}}}],["extends",{"_index":575,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["external",{"_index":358,"title":{},"body":{"classes/Exercise.html":{}}}],["extractjwt",{"_index":567,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":581,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":502,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"classes/Exercise.html":{},"injectables/JwtStrategy.html":{},"classes/Plan.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["field",{"_index":517,"title":{},"body":{"interfaces/IDefaultController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":541,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["findbyparams",{"_index":382,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(@query",{"_index":428,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["findbyparams(params",{"_index":391,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(request",{"_index":624,"title":{},"body":{"controllers/PlansController.html":{}}}],["first",{"_index":880,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["flavsoliver@gmail.com",{"_index":1197,"title":{},"body":{"index.html":{}}}],["fluxos",{"_index":1168,"title":{},"body":{"index.html":{}}}],["flávio",{"_index":1190,"title":{},"body":{"index.html":{},"properties.html":{}}}],["focus",{"_index":352,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["focusmuscle",{"_index":285,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":436,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":1139,"title":{},"body":{"index.html":{},"properties.html":{}}}],["frequency",{"_index":761,"title":{},"body":{"classes/Routine.html":{}}}],["funcionalidades",{"_index":1147,"title":{},"body":{"index.html":{}}}],["function",{"_index":506,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1105,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["física",{"_index":1123,"title":{},"body":{"index.html":{}}}],["físicos",{"_index":1132,"title":{},"body":{"index.html":{}}}],["generatetoken",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["generatetoken(user",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":432,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":400,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["get('docs",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["get('email",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('email')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('search",{"_index":427,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get('search')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":393,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get()@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":397,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["getall",{"_index":383,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getall(@req",{"_index":640,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(request",{"_index":626,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(userid",{"_index":671,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["getbyemail",{"_index":550,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyemail(@query('email",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbyemail(email",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyfield",{"_index":515,"title":{},"body":{"interfaces/IDefaultController.html":{}}}],["getbyid",{"_index":384,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param('id",{"_index":433,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["getbyid(id",{"_index":399,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getplanbyexerciseid",{"_index":538,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["getplanbyexerciseid(filter",{"_index":674,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["getting",{"_index":1107,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1202,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gym",{"_index":1114,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hashedpassword",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword(password",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["height",{"_index":790,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["height'})@prop({type",{"_index":800,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["hello",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["history",{"_index":888,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{}}}],["history.dto",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["history.dto.ts",{"_index":809,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["history.dto.ts:15",{"_index":814,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:21",{"_index":815,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:27",{"_index":813,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:9",{"_index":811,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.ts",{"_index":787,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["history.ts:11",{"_index":793,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:15",{"_index":801,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:19",{"_index":803,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:25",{"_index":799,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["https://docs.nestjs.com/controllers#controllers",{"_index":775,"title":{},"body":{"controllers/RoutinesController.html":{}}}],["https://flaviosoliver",{"_index":1193,"title":{},"body":{"index.html":{}}}],["https://github.com/flaviosoliver",{"_index":1215,"title":{},"body":{"properties.html":{}}}],["https://todo",{"_index":1152,"title":{},"body":{"index.html":{}}}],["https://www.linkedin.com/in/flaviosoliver",{"_index":1196,"title":{},"body":{"index.html":{}}}],["iauthcontroller",{"_index":158,"title":{"interfaces/IAuthController.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"coverage.html":{}}}],["iauthrepository",{"_index":234,"title":{"interfaces/IAuthRepository.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["iauthservice",{"_index":156,"title":{"interfaces/IAuthService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["id",{"_index":116,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id'})@prop({type",{"_index":824,"title":{},"body":{"classes/Training.html":{}}}],["idefaultcontroller",{"_index":512,"title":{"interfaces/IDefaultController.html":{}},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["identifier",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["iexercisescontroller",{"_index":418,"title":{"interfaces/IExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"interfaces/IExercisesController.html":{},"coverage.html":{}}}],["iexercisesrepository",{"_index":458,"title":{"interfaces/IExercisesRepository.html":{}},"body":{"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{}}}],["iexercisesservice",{"_index":416,"title":{"interfaces/IExercisesService.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":582,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":286,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["image'})@prop({type",{"_index":360,"title":{},"body":{"classes/Exercise.html":{}}}],["implements",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["incorrect",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(auth_repository",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(auth_service",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject(exercises_repository",{"_index":480,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["inject(exercises_service",{"_index":424,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["inject(plans_repository",{"_index":718,"title":{},"body":{"injectables/PlansService.html":{}}}],["inject(plans_service",{"_index":639,"title":{},"body":{"controllers/PlansController.html":{}}}],["inject(users_repository",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":95,"title":{"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":233,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(auth.name",{"_index":235,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["injectmodel(exercise.name",{"_index":459,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["injectmodel(plan.name",{"_index":684,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["injectmodel(user.name",{"_index":960,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["input",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instalação",{"_index":1169,"title":{},"body":{"index.html":{}}}],["installpara",{"_index":1171,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":496,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":503,"title":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":504,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["interfaces/auth.controller.interface",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces/auth.repository.interface",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["interfaces/auth.service.interface",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["interfaces/exercises.controller.interface",{"_index":419,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["interfaces/exercises.repository.interface",{"_index":447,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/exercises.service.interface",{"_index":417,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/jwt",{"_index":571,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/plans.controller.interface",{"_index":636,"title":{},"body":{"controllers/PlansController.html":{}}}],["interfaces/plans.repository.interface",{"_index":660,"title":{},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["interfaces/plans.service.interface",{"_index":634,"title":{},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{}}}],["interfaces/users.controller.interface",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{}}}],["interfaces/users.repository.interface",{"_index":944,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.service.interface",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["internal",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["io",{"_index":1146,"title":{},"body":{"index.html":{}}}],["iplanscontroller",{"_index":523,"title":{"interfaces/IPlansController.html":{}},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"coverage.html":{}}}],["iplansrepository",{"_index":536,"title":{"interfaces/IPlansRepository.html":{}},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["iplansservice",{"_index":542,"title":{"interfaces/IPlansService.html":{}},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["isarray",{"_index":299,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isboolean",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isdate",{"_index":315,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isdefined",{"_index":187,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":188,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["isemail(email",{"_index":994,"title":{},"body":{"injectables/UsersService.html":{}}}],["isjwt",{"_index":189,"title":{},"body":{"classes/AuthDto.html":{}}}],["islocal",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":190,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":191,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isnumber",{"_index":816,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["isoptional",{"_index":300,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["ispasswordvalid",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":192,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isurl",{"_index":301,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["iuserscontroller",{"_index":546,"title":{"interfaces/IUsersController.html":{}},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["iusersrepository",{"_index":554,"title":{"interfaces/IUsersRepository.html":{}},"body":{"interfaces/IUsersRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":242,"title":{"interfaces/IUsersService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jsonwebtoken",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":570,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":580,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":558,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":197,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lastname",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["license",{"_index":1213,"title":{},"body":{"properties.html":{}}}],["linguagem",{"_index":1156,"title":{},"body":{"index.html":{},"properties.html":{}}}],["linkedin",{"_index":1195,"title":{},"body":{"index.html":{}}}],["load",{"_index":746,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["load/weight",{"_index":836,"title":{},"body":{"classes/Training.html":{}}}],["load/weight'})@prop({type",{"_index":827,"title":{},"body":{"classes/Training.html":{}}}],["local",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["localconnection",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["localconnection}/${process.env.mongo_db",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["localfield",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('exercises",{"_index":473,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["logger('plansservice",{"_index":715,"title":{},"body":{"injectables/PlansService.html":{}}}],["logger('usersservice",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["login(@body",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(doc",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":136,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["lookup",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapexercise",{"_index":474,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapexercise(exe",{"_index":486,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapexercise(exercise",{"_index":490,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapplan",{"_index":716,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapplan(item",{"_index":723,"title":{},"body":{"injectables/PlansService.html":{}}}],["mapplan(plan",{"_index":720,"title":{},"body":{"injectables/PlansService.html":{}}}],["maptrainings",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser(user",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mergedprops",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop].push(obj[prop",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergeobjects",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["messages",{"_index":1014,"title":{},"body":{"injectables/UsersService.html":{}}}],["messages.join",{"_index":1015,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["mim",{"_index":1188,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["minlength(6",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miro",{"_index":1148,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1104,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1178,"title":{},"body":{"index.html":{}}}],["model",{"_index":229,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["modelagem",{"_index":1141,"title":{},"body":{"index.html":{}}}],["models/training.model",{"_index":818,"title":{},"body":{"modules/SharedModule.html":{}}}],["modular",{"_index":1163,"title":{},"body":{"index.html":{}}}],["module",{"_index":45,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":47,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":1160,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":124,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{},"index.html":{}}}],["mongoose.schema.types.objectid",{"_index":607,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["mongoose.types.objectid(value",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["more'})@prop({type",{"_index":885,"title":{},"body":{"classes/User.html":{}}}],["muscle",{"_index":353,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["musculação",{"_index":1125,"title":{},"body":{"index.html":{}}}],["n",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["na",{"_index":1126,"title":{},"body":{"index.html":{},"properties.html":{}}}],["name",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/TrainingDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["name'})@prop({type",{"_index":362,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["nest",{"_index":1140,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1159,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":414,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":122,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["no_content_204",{"_index":1066,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":1158,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1137,"title":{},"body":{"index.html":{},"properties.html":{}}}],["not_found_404",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["not_found_404})@apiinternalservererrorresponse({description",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["not_found_404})@apiokresponse({description",{"_index":404,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["notes",{"_index":287,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["notes'})@prop({type",{"_index":829,"title":{},"body":{"classes/Training.html":{}}}],["notfoundexception",{"_index":408,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`email",{"_index":932,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`exercise",{"_index":500,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["notfoundexception(`id",{"_index":435,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1170,"title":{},"body":{"index.html":{}}}],["null",{"_index":489,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":794,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{}}}],["o",{"_index":1138,"title":{},"body":{"index.html":{},"properties.html":{}}}],["obj",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["obj[prop",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["object.entries(mergedprops).map",{"_index":1013,"title":{},"body":{"injectables/UsersService.html":{}}}],["odm",{"_index":1161,"title":{},"body":{"index.html":{}}}],["ok",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok_200",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oliveira",{"_index":1191,"title":{},"body":{"index.html":{},"properties.html":{}}}],["opt",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.focusmuscle",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.push",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["overview",{"_index":1204,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1075,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":1117,"title":{},"body":{"index.html":{}}}],["param",{"_index":407,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":440,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":395,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["params.focusmuscle",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.focusmuscle?.length",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.name",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.userid",{"_index":643,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["params.utils",{"_index":479,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["params.utils.ts",{"_index":1063,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["paramsdto",{"_index":392,"title":{"classes/ParamsDto.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":569,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":566,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":576,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordlogin",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passworduser",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":409,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/disable",{"_index":938,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/disable')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/doneexercise",{"_index":649,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/doneexercise')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":631,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/enable",{"_index":935,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/enable')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/shape",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/update",{"_index":439,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/update')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":403,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/updatetraining",{"_index":647,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/updatetraining')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":620,"title":{},"body":{"controllers/PlansController.html":{}}}],["path",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":572,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":560,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pipeline",{"_index":685,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["pipelines/exercise",{"_index":682,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["plan",{"_index":531,"title":{"classes/Plan.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plan'})@prop({type",{"_index":592,"title":{},"body":{"classes/Plan.html":{}}}],["plan.dto.ts",{"_index":304,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["plan.dto.ts:16",{"_index":867,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:19",{"_index":311,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:21",{"_index":868,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:25",{"_index":309,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:26",{"_index":866,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:30",{"_index":308,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:31",{"_index":864,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:37",{"_index":314,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:42",{"_index":313,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.expiresin",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.focusmuscle",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.id",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.length",{"_index":644,"title":{},"body":{"controllers/PlansController.html":{}}}],["plan.model",{"_index":532,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{}}}],["plan.name",{"_index":663,"title":{},"body":{"modules/PlansModule.html":{},"miscellaneous/variables.html":{}}}],["plan.training",{"_index":732,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["plan.userid",{"_index":645,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["plan.userid.tostring",{"_index":729,"title":{},"body":{"injectables/PlansService.html":{}}}],["plandocument",{"_index":605,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansRepository.html":{},"miscellaneous/typealiases.html":{}}}],["plandto",{"_index":530,"title":{"classes/PlanDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planid",{"_index":545,"title":{},"body":{"interfaces/IPlansService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["plans",{"_index":606,"title":{},"body":{"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["plans.controller",{"_index":655,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.length",{"_index":721,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.map((item",{"_index":722,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.repository",{"_index":659,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.service",{"_index":657,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans/plans.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["plans_controller",{"_index":533,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_repository",{"_index":540,"title":{},"body":{"interfaces/IPlansRepository.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_service",{"_index":544,"title":{},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planschema",{"_index":608,"title":{},"body":{"classes/Plan.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planscontroller",{"_index":617,"title":{"controllers/PlansController.html":{}},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["plansmodule",{"_index":59,"title":{"modules/PlansModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["plansrepository",{"_index":658,"title":{"injectables/PlansRepository.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"coverage.html":{}}}],["plansservice",{"_index":656,"title":{"injectables/PlansService.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["portfolio.vercel.app",{"_index":1194,"title":{},"body":{"index.html":{}}}],["portfólio",{"_index":1192,"title":{},"body":{"index.html":{}}}],["post",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["post()@apiunauthorizedresponse({description",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post()@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":387,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["prefix",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.environment_local",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":579,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["production",{"_index":1180,"title":{},"body":{"index.html":{}}}],["project",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projeto",{"_index":1173,"title":{},"body":{"index.html":{}}}],["promise",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["prop",{"_index":118,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["prop({type",{"_index":762,"title":{},"body":{"classes/Routine.html":{}}}],["properties",{"_index":104,"title":{"properties.html":{}},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["provide",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["push",{"_index":695,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":410,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["readonly",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["ref",{"_index":600,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["reflect",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":796,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["removeexercise",{"_index":699,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["repetitions",{"_index":744,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["repetitions'})@prop({type",{"_index":831,"title":{},"body":{"classes/Training.html":{}}}],["repository",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":633,"title":{},"body":{"controllers/PlansController.html":{}}}],["request",{"_index":527,"title":{},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["request.user?.id",{"_index":641,"title":{},"body":{"controllers/PlansController.html":{}}}],["required",{"_index":111,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["res",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["res.sendfile(path.join(__dirname",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["response",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":1162,"title":{},"body":{"index.html":{}}}],["result",{"_index":498,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["result.join('\\n",{"_index":1016,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.userid.tostring",{"_index":726,"title":{},"body":{"injectables/PlansService.html":{}}}],["result[0",{"_index":691,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["results",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["rotinas",{"_index":1121,"title":{},"body":{"index.html":{}}}],["routine",{"_index":759,"title":{"classes/Routine.html":{}},"body":{"classes/Routine.html":{},"coverage.html":{}}}],["routinedocument",{"_index":769,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/typealiases.html":{}}}],["routines",{"_index":770,"title":{},"body":{"classes/Routine.html":{}}}],["routines.controller",{"_index":781,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines.service",{"_index":780,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines/routines.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["routineschema",{"_index":771,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routinescontroller",{"_index":773,"title":{"controllers/RoutinesController.html":{}},"body":{"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"coverage.html":{}}}],["routinesmodule",{"_index":60,"title":{"modules/RoutinesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoutinesModule.html":{},"modules.html":{},"overview.html":{}}}],["routinesrepository",{"_index":782,"title":{"injectables/RoutinesRepository.html":{}},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["routinesservice",{"_index":778,"title":{"injectables/RoutinesService.html":{}},"body":{"modules/RoutinesModule.html":{},"injectables/RoutinesService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1175,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["saveplan",{"_index":539,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["saveplan(plan",{"_index":676,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["schema",{"_index":119,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":120,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(auth",{"_index":130,"title":{},"body":{"classes/Auth.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exercise",{"_index":371,"title":{},"body":{"classes/Exercise.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(plan",{"_index":609,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(routine",{"_index":772,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shapehistory",{"_index":807,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(training",{"_index":837,"title":{},"body":{"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":892,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":578,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["series",{"_index":742,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["series'})@prop({type",{"_index":833,"title":{},"body":{"classes/Training.html":{}}}],["servedocs",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(@res",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(res",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["server",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server_error_500",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_error_500})@apiokresponse({description",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["service",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":697,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["shape",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["shape.age",{"_index":963,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["shape.bmi",{"_index":966,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.height",{"_index":964,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.weight",{"_index":965,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shapehistory",{"_index":785,"title":{"classes/ShapeHistory.html":{}},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["shapehistorydocument",{"_index":804,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/typealiases.html":{}}}],["shapehistorydto",{"_index":344,"title":{"classes/ShapeHistoryDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/ShapeHistoryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["shapehistorydto.age",{"_index":1017,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.bmi",{"_index":1021,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.height",{"_index":1019,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.weight",{"_index":1020,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistoryschema",{"_index":806,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/dtos/params.dto",{"_index":421,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/dtos/training.dto",{"_index":635,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/models/training.model",{"_index":604,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{}}}],["shared/shared.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["shared/utils/build",{"_index":478,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["shared/utils/http",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["sharedmodule",{"_index":61,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["short",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["signoptions",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["src/.../auth.controller.interface.ts",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.model.ts",{"_index":1218,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth.repository.interface.ts",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.interface.ts",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../build",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../credentials.utils.ts",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.mapper.ts",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.model.ts",{"_index":1219,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exercises.controller.interface.ts",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.repository.interface.ts",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.service.interface.ts",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.mapper.ts",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plan.model.ts",{"_index":1220,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../plans.controller.interface.ts",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.repository.interface.ts",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.service.interface.ts",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../routine.model.ts",{"_index":1221,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../shape",{"_index":1222,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../training.mapper.ts",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../training.model.ts",{"_index":1223,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.mapper.ts",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1224,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.controller.interface.ts",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.repository.interface.ts",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.interface.ts",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:16",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.service.ts",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":1048,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:39",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":103,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.model.ts:10",{"_index":117,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:14",{"_index":113,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:18",{"_index":115,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.repository.ts",{"_index":226,"title":{},"body":{"injectables/AuthRepository.html":{},"coverage.html":{}}}],["src/modules/auth/auth.repository.ts:14",{"_index":232,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:8",{"_index":230,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:24",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:34",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:39",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:43",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dtos/auth.dto.ts",{"_index":180,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:17",{"_index":186,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:24",{"_index":184,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:31",{"_index":182,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":583,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:10",{"_index":584,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts:16",{"_index":585,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/interfaces/auth.controller.interface.ts",{"_index":505,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.repository.interface.ts",{"_index":508,"title":{},"body":{"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.service.interface.ts",{"_index":509,"title":{},"body":{"interfaces/IAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/jwt",{"_index":559,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts",{"_index":561,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts:12",{"_index":563,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategy/jwt.strategy.ts:23",{"_index":565,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/utils/credentials.utils.ts",{"_index":1053,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/dtos/create",{"_index":283,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts",{"_index":373,"title":{},"body":{"classes/ExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:19",{"_index":375,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:25",{"_index":377,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:31",{"_index":374,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:37",{"_index":376,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:43",{"_index":379,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:48",{"_index":378,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/exercise.model.ts",{"_index":351,"title":{},"body":{"classes/Exercise.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/exercise.model.ts:13",{"_index":363,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:17",{"_index":356,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:21",{"_index":361,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:25",{"_index":367,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:29",{"_index":365,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:9",{"_index":357,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercises.controller.ts",{"_index":381,"title":{},"body":{"controllers/ExercisesController.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.controller.ts:102",{"_index":390,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:113",{"_index":405,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:57",{"_index":398,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:69",{"_index":394,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:85",{"_index":401,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.module.ts",{"_index":442,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["src/modules/exercises/exercises.repository.ts",{"_index":451,"title":{},"body":{"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.repository.ts:10",{"_index":452,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:16",{"_index":453,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:20",{"_index":455,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:24",{"_index":456,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:28",{"_index":454,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:32",{"_index":457,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.service.ts",{"_index":466,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.service.ts:21",{"_index":467,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:28",{"_index":470,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:36",{"_index":469,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:51",{"_index":471,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:65",{"_index":468,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:80",{"_index":472,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/interfaces/exercises.controller.interface.ts",{"_index":518,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.repository.interface.ts",{"_index":521,"title":{},"body":{"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.service.interface.ts",{"_index":522,"title":{},"body":{"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/utils/exercise.mapper.ts",{"_index":1056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/dtos/create",{"_index":303,"title":{},"body":{"classes/CreatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts",{"_index":610,"title":{},"body":{"classes/PlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:20",{"_index":613,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:26",{"_index":614,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:32",{"_index":612,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:37",{"_index":611,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:44",{"_index":616,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:49",{"_index":615,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/update",{"_index":863,"title":{},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/interfaces/plans.controller.interface.ts",{"_index":524,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.repository.interface.ts",{"_index":537,"title":{},"body":{"interfaces/IPlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.service.interface.ts",{"_index":543,"title":{},"body":{"interfaces/IPlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/pipelines/exercise",{"_index":1058,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts",{"_index":590,"title":{},"body":{"classes/Plan.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts:11",{"_index":595,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:15",{"_index":596,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:19",{"_index":594,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:23",{"_index":593,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:31",{"_index":602,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:38",{"_index":598,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plans.controller.ts",{"_index":618,"title":{},"body":{"controllers/PlansController.html":{},"coverage.html":{}}}],["src/modules/plans/plans.controller.ts:111",{"_index":623,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:127",{"_index":629,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:143",{"_index":621,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:159",{"_index":632,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:60",{"_index":627,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:73",{"_index":625,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:94",{"_index":628,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.module.ts",{"_index":654,"title":{},"body":{"modules/PlansModule.html":{}}}],["src/modules/plans/plans.repository.ts",{"_index":664,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{}}}],["src/modules/plans/plans.repository.ts:12",{"_index":666,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:18",{"_index":672,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:26",{"_index":673,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:34",{"_index":670,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:38",{"_index":669,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:42",{"_index":678,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:46",{"_index":677,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:50",{"_index":675,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:54",{"_index":668,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:72",{"_index":680,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.service.ts",{"_index":700,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{}}}],["src/modules/plans/plans.service.ts:121",{"_index":713,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:158",{"_index":711,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:23",{"_index":702,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:30",{"_index":707,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:38",{"_index":708,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:52",{"_index":706,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:67",{"_index":705,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:82",{"_index":709,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:98",{"_index":704,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/utils/plan.mapper.ts",{"_index":1061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts",{"_index":760,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts:12",{"_index":766,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:15",{"_index":763,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:18",{"_index":764,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:25",{"_index":768,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:28",{"_index":767,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:9",{"_index":765,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routines.controller.ts",{"_index":774,"title":{},"body":{"controllers/RoutinesController.html":{},"coverage.html":{}}}],["src/modules/routines/routines.module.ts",{"_index":779,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["src/modules/routines/routines.repository.ts",{"_index":783,"title":{},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["src/modules/routines/routines.service.ts",{"_index":784,"title":{},"body":{"injectables/RoutinesService.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto",{"_index":519,"title":{},"body":{"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/params.dto.ts",{"_index":586,"title":{},"body":{"classes/ParamsDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto.ts:2",{"_index":588,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:3",{"_index":587,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:4",{"_index":589,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/training.dto",{"_index":529,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/training.dto.ts",{"_index":838,"title":{},"body":{"classes/TrainingDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/training.dto.ts:17",{"_index":842,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:24",{"_index":841,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:30",{"_index":848,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:36",{"_index":847,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:42",{"_index":844,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:47",{"_index":846,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:52",{"_index":840,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:58",{"_index":845,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:64",{"_index":843,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:70",{"_index":849,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/update",{"_index":851,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/shared/interfaces/default.controller.interface.ts",{"_index":513,"title":{},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["src/modules/shared/models/training.model",{"_index":316,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["src/modules/shared/models/training.model.ts",{"_index":820,"title":{},"body":{"classes/Training.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/models/training.model.ts:10",{"_index":826,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:18",{"_index":825,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:22",{"_index":834,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:26",{"_index":832,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:30",{"_index":828,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:34",{"_index":830,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:38",{"_index":823,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/shared.module.ts",{"_index":817,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/modules/shared/utils/build",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/http",{"_index":1064,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/training.mapper.ts",{"_index":1067,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/dtos/create",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/dtos",{"_index":510,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["src/modules/users/dtos/shape",{"_index":808,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto",{"_index":574,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/users/dtos/user.dto.ts",{"_index":893,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto.ts:22",{"_index":900,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:29",{"_index":898,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:35",{"_index":902,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:41",{"_index":899,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:47",{"_index":901,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:53",{"_index":897,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:59",{"_index":894,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:65",{"_index":903,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:70",{"_index":895,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/interfaces/users.controller.interface.ts",{"_index":547,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.repository.interface.ts",{"_index":555,"title":{},"body":{"interfaces/IUsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.service.interface",{"_index":573,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/users/interfaces/users.service.interface.ts",{"_index":557,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/shape",{"_index":786,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts",{"_index":870,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts:11",{"_index":882,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:15",{"_index":879,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:21",{"_index":887,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:25",{"_index":881,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:29",{"_index":884,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:33",{"_index":878,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:37",{"_index":873,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:41",{"_index":889,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:45",{"_index":875,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:110",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:121",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:135",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:146",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:56",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:67",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:79",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:95",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":941,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.repository.ts",{"_index":948,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/modules/users/users.repository.ts:15",{"_index":950,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:19",{"_index":955,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:23",{"_index":957,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:27",{"_index":956,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:32",{"_index":958,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:36",{"_index":959,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:52",{"_index":952,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:56",{"_index":954,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:60",{"_index":953,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:9",{"_index":949,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.service.ts",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:129",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:162",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:174",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:187",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:20",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:27",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:35",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:50",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:67",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:71",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:95",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/utils/user.mapper.ts",{"_index":1072,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1176,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1179,"title":{},"body":{"index.html":{}}}],["start:prodtestes",{"_index":1181,"title":{},"body":{"index.html":{}}}],["started",{"_index":1108,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":758,"title":{},"body":{"injectables/PlansService.html":{},"classes/User.html":{}}}],["status'})@prop({type",{"_index":872,"title":{},"body":{"classes/User.html":{}}}],["status.utils",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["status.utils.ts",{"_index":1065,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["str",{"_index":1027,"title":{},"body":{"injectables/UsersService.html":{}}}],["strategy",{"_index":568,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":577,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1199,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":883,"title":{},"body":{"classes/User.html":{}}}],["svg",{"_index":1200,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1151,"title":{},"body":{"index.html":{}}}],["t",{"_index":516,"title":{},"body":{"interfaces/IDefaultController.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["t.exerciseid",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t.exerciseid.tostring",{"_index":737,"title":{},"body":{"injectables/PlansService.html":{}}}],["table",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["tecnologias",{"_index":1154,"title":{},"body":{"index.html":{}}}],["test",{"_index":1184,"title":{},"body":{"index.html":{}}}],["test:covsobre",{"_index":1187,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1186,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1183,"title":{},"body":{"index.html":{}}}],["then((errors",{"_index":1024,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["this.generatetoken(user",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyemail(user.email",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(id",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashedpassword(user.password",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(error",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.logger.error(str",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model",{"_index":687,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(auth",{"_index":236,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["this.model.create(exercise",{"_index":460,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["this.model.create(plan",{"_index":692,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(user",{"_index":961,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.deleteone",{"_index":967,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.find",{"_index":461,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.find(params",{"_index":463,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{}}}],["this.model.findbyid(id",{"_index":462,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findbyidandupdate(plan.id",{"_index":693,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.findone",{"_index":962,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.findone(filter",{"_index":694,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.updateone",{"_index":464,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.updateone(filter",{"_index":696,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.repository.create(doc",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.create(exercise",{"_index":495,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["this.repository.create(plan",{"_index":725,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.create(user",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.delete(id",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.disable(id",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.enable(id",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findbyparams(parameters",{"_index":483,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["this.repository.getall",{"_index":481,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getall(userid",{"_index":719,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyemail(email",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.getbyid(id",{"_index":488,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getbyid(planid",{"_index":728,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getplanbyexerciseid(filter",{"_index":754,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.saveplan(plan",{"_index":733,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.update(id",{"_index":499,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.updateexercisedonestatus(filter",{"_index":757,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.updateshape(id",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.service.addorupdatetraining(id",{"_index":648,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(exercise",{"_index":438,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["this.service.create(plan",{"_index":646,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(user",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.disable(id",{"_index":940,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.enable(id",{"_index":937,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.findbyparams(params",{"_index":429,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["this.service.getall",{"_index":426,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["this.service.getall(userid",{"_index":642,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.getbyemail(email",{"_index":931,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.getbyid(id",{"_index":434,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.login(email",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.update(id",{"_index":441,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.updateexercisedonestatus(id",{"_index":651,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.updateshape(id",{"_index":934,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.transformstring(arr",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.updatetraining(plan.training",{"_index":731,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["throw",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":127,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["token",{"_index":106,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["token'})@prop({type",{"_index":114,"title":{},"body":{"classes/Auth.html":{}}}],["training",{"_index":305,"title":{"classes/Training.html":{}},"body":{"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["training.$.done",{"_index":698,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["training.createdat",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["training.done",{"_index":750,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.dto",{"_index":869,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["training.dto.ts",{"_index":852,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"coverage.html":{}}}],["training.dto.ts:17",{"_index":857,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:23",{"_index":856,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:28",{"_index":861,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:33",{"_index":860,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:38",{"_index":858,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:43",{"_index":859,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:48",{"_index":854,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.exerciseid",{"_index":738,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.exerciseid.tostring",{"_index":756,"title":{},"body":{"injectables/PlansService.html":{}}}],["training.id",{"_index":741,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.load",{"_index":747,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.name",{"_index":819,"title":{},"body":{"modules/SharedModule.html":{}}}],["training.notes",{"_index":748,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.repetitions",{"_index":745,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.series",{"_index":743,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.updatedat",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trainingdata",{"_index":534,"title":{},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{}}}],["trainingdocument",{"_index":835,"title":{},"body":{"classes/Training.html":{},"miscellaneous/typealiases.html":{}}}],["trainingdto",{"_index":528,"title":{"classes/TrainingDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/TrainingDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingschema",{"_index":603,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingupdatedto",{"_index":850,"title":{"classes/TrainingUpdateDto.html":{}},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["transformstring",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["transformstring(arr",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["treinos",{"_index":1120,"title":{},"body":{"index.html":{}}}],["true",{"_index":112,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1216,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":1135,"title":{},"body":{"index.html":{},"properties.html":{}}}],["uma",{"_index":1115,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_401",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorized_401})@apibadrequestresponse({description",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception(`user",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":355,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["undefined})@apibody({type",{"_index":389,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["undefined})@prop({type",{"_index":354,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["unit",{"_index":1182,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["unlicensed",{"_index":1214,"title":{},"body":{"properties.html":{}}}],["unwind",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":385,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["update')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":933,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":402,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatedtraining",{"_index":730,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateexercisedonestatus",{"_index":526,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["updateexercisedonestatus(filter",{"_index":679,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["updateexercisedonestatus(id",{"_index":630,"title":{},"body":{"controllers/PlansController.html":{}}}],["updateexercisedonestatus(planid",{"_index":710,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateplandto",{"_index":862,"title":{"classes/UpdatePlanDto.html":{}},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["updateshape",{"_index":551,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updateshape(id",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatetraining",{"_index":701,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatetraining(existingtraining",{"_index":712,"title":{},"body":{"injectables/PlansService.html":{}}}],["uri",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":359,"title":{},"body":{"classes/Exercise.html":{}}}],["useclass",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":406,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('jwt",{"_index":425,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":109,"title":{"classes/User.html":{}},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.active",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.avatar",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.birthdate",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.dto.ts",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.id",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.lastname",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.model",{"_index":552,"title":{},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["user.name",{"_index":947,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.shape",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":890,"title":{},"body":{"classes/User.html":{},"injectables/UsersRepository.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":143,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":107,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":601,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":943,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":946,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":942,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dtos/dtos",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/dtos/user.dto",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/interfaces/users.service.interface",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["users/users.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["users_controller",{"_index":553,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_repository",{"_index":556,"title":{},"body":{"interfaces/IUsersRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema",{"_index":891,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":904,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":62,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":945,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"coverage.html":{}}}],["usersservice",{"_index":212,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["utilizadas",{"_index":1155,"title":{},"body":{"index.html":{}}}],["utilizando",{"_index":1212,"title":{},"body":{"properties.html":{}}}],["utils/credentials.utils",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/exercise.mapper",{"_index":475,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["utils/plan.mapper",{"_index":717,"title":{},"body":{"injectables/PlansService.html":{}}}],["utils/user.mapper",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["valid",{"_index":993,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":476,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["validate(exercise",{"_index":492,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["validate(payload",{"_index":564,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(plan",{"_index":724,"title":{},"body":{"injectables/PlansService.html":{}}}],["validate(shapehistorydto",{"_index":1023,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate(user).then((errors",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["validator",{"_index":193,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["validity",{"_index":591,"title":{},"body":{"classes/Plan.html":{}}}],["validobj",{"_index":1022,"title":{},"body":{"injectables/UsersService.html":{}}}],["value",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1225,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifytoken",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["verifytoken(token",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1209,"title":{},"body":{"properties.html":{}}}],["video",{"_index":288,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["video'})@prop({type",{"_index":366,"title":{},"body":{"classes/Exercise.html":{}}}],["watch",{"_index":1177,"title":{},"body":{"index.html":{}}}],["web",{"_index":1116,"title":{},"body":{"index.html":{}}}],["weight",{"_index":791,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["weight'})@prop({type",{"_index":802,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["world",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":396,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    Async\n                                serveDocs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        serveDocs\n                        \n                    \n                \n            \n            \n                \n                    \n                    serveDocs(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('docs')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AppService } from './app.service';\nimport * as path from 'path';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('docs')\n  async serveDocs(@Res() res: Response) {\n    return res.sendFile(path.join(__dirname, '../docs/index.html'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\n\n\nPlansModule\n\nPlansModule\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExercisesModule\n                        \n                        \n                            PlansModule\n                        \n                        \n                            RoutinesModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { RoutinesModule } from './routines/routines.module';\nimport { ExercisesModule } from './exercises/exercises.module';\nimport { UsersModule } from './users/users.module';\nimport { PlansModule } from './plans/plans.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AppController } from '../app.controller';\nimport { AppService } from '../app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        const localConnection = configService.get('MONGO_LOCAL');\n        const atlasConnection = configService.get('MONGO_ATLAS');\n        const isLocal = process.env.ENVIRONMENT_LOCAL ?? false;\n        return {\n          uri: isLocal\n            ? `${localConnection}/${process.env.MONGO_DB}`\n            : `${atlasConnection}/${process.env.MONGO_DB}`,\n        };\n      },\n      inject: [ConfigService],\n    }),\n    AuthModule,\n    UsersModule,\n    ExercisesModule,\n    PlansModule,\n    RoutinesModule,\n    SharedModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User token'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AuthDocument = Auth & Document;\n\n@Schema({ collection: 'auth', timestamps: true })\nexport class Auth {\n  @ApiProperty({ description: 'User Id}' })\n  userId: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({ description: 'User token' })\n  @Prop({ type: String, required: true })\n  token: string;\n}\n\nexport const AuthSchema = SchemaFactory.createForClass(Auth);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(doc: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: UserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Inject, Post } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport {\n  AUTH_SERVICE,\n  IAuthService,\n} from './interfaces/auth.service.interface';\nimport { IAuthController } from './interfaces/auth.controller.interface';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n} from '../shared/utils/http-response-status.utils';\nimport { UserDto } from '../users/dtos/dtos';\nimport { AuthDto, LoginDto } from './dtos/dtos';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController implements IAuthController {\n  constructor(\n    @Inject(AUTH_SERVICE)\n    private readonly service: IAuthService\n  ) {}\n\n  @Post()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: UserDto })\n  async login(@Body() doc: LoginDto): Promise {\n    const { email, password } = doc;\n    return await this.service.login(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                token\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsJWT()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsEmail,\n  IsJWT,\n  IsMongoId,\n  IsNotEmpty,\n  IsString,\n} from 'class-validator';\n\nexport class AuthDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsJWT()\n  @IsString()\n  token: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './interfaces/auth.service.interface';\nimport { AuthRepository } from './auth.repository';\nimport { AUTH_REPOSITORY } from './interfaces/auth.repository.interface';\nimport { Auth, AuthSchema } from './auth.model';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { USERS_SERVICE } from '../users/interfaces/users.service.interface';\nimport { UsersService } from '../users/users.service';\nimport { JwtStrategy } from './strategy/jwt.strategy';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Auth.name,\n        schema: AuthSchema,\n      },\n    ]),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '7d' },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    { useClass: AuthService, provide: AUTH_SERVICE },\n    { useClass: AuthRepository, provide: AUTH_REPOSITORY },\n    { useClass: UsersService, provide: USERS_SERVICE },\n    JwtStrategy,\n  ],\n})\nexport class AuthModule {\n  constructor() {\n    dotenv.config();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthRepository.html":{"url":"injectables/AuthRepository.html","title":"injectable - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(auth: Auth)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    auth\n                                    \n                                                Auth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Auth, AuthDocument } from './auth.model';\nimport { IAuthRepository } from './interfaces/auth.repository.interface';\n\n@Injectable()\nexport class AuthRepository implements IAuthRepository {\n  constructor(\n    @InjectModel(Auth.name)\n    readonly model: Model\n  ) {}\n\n  async create(auth: Auth): Promise {\n    return await this.model.create(auth);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IAuthRepository, usersService: IUsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IAuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateToken\n                        \n                    \n                \n            \n            \n                \ngenerateToken(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AuthService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from '../users/interfaces/users.service.interface';\nimport { comparePasswords } from './utils/credentials.utils';\nimport { UserDto } from '../users/dtos/user.dto';\nimport {\n  AUTH_REPOSITORY,\n  IAuthRepository,\n} from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/dtos';\nimport { IAuthService } from './interfaces/auth.service.interface';\n\n@Injectable()\nexport class AuthService implements IAuthService {\n  private readonly logger = new Logger('AuthService');\n\n  constructor(\n    @Inject(AUTH_REPOSITORY)\n    private readonly repository: IAuthRepository,\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n    private jwtService: JwtService\n  ) {}\n\n  generateToken(user: UserDto): string {\n    const payload = { sub: user.id, email: user.email };\n    return this.jwtService.sign(payload);\n  }\n\n  verifyToken(token: string): any {\n    return this.jwtService.verify(token);\n  }\n\n  async login(email: string, password: string): Promise {\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      if (!user) {\n        throw new UnauthorizedException(`User email ${email}`);\n      }\n\n      const isPasswordValid = await comparePasswords(password, user.password);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException(\n          `Password is incorrect to user ${user.email}`\n        );\n      }\n\n      const token = this.generateToken(user);\n\n      const doc: AuthDto = {\n        userId: user.id,\n        email: user.email,\n        token: token,\n      };\n\n      await this.repository.create(doc);\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExerciseDto.html":{"url":"classes/CreateExerciseDto.html","title":"class - CreateExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/create-exercises.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateExerciseDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlanDto.html":{"url":"classes/CreatePlanDto.html","title":"class - CreatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/create-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         [Training]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsNotEmpty,\n  IsString,\n  IsArray,\n  ArrayNotEmpty,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class CreatePlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: [Training];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()@MinLength(6, {message: 'Your password is too short! It must be 5 characters or more!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShapeHistoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ShapeHistoryDto } from './shape-history.dto';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  @MinLength(6, {\n    message: 'Your password is too short! It must be 5 characters or more!',\n  })\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDate()\n  @IsNotEmpty()\n  @IsDefined()\n  birthDate: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistoryDto[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exercise.html":{"url":"classes/Exercise.html","title":"class - Exercise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exercise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercise.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Exercise', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Image'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Info notes to exercise'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Video'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type ExerciseDocument = Exercise & Document;\n\n@Schema({ collection: 'exercises', timestamps: true })\nexport class Exercise {\n  @ApiProperty({ description: 'Exercise Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Exercise', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'External URL for Exercise Image' })\n  @Prop({ type: String, required: false })\n  image?: string;\n\n  @ApiProperty({ description: 'External URL for Exercise Video' })\n  @Prop({ type: String, required: false })\n  video?: string;\n\n  @ApiProperty({ description: 'Info notes to exercise' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n}\n\nexport const ExerciseSchema = SchemaFactory.createForClass(Exercise);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExerciseDto.html":{"url":"classes/ExerciseDto.html","title":"class - ExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/exercise.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class ExerciseDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExercisesController.html":{"url":"controllers/ExercisesController.html","title":"controller - ExercisesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exercises\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateExerciseDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  Get,\n  UseGuards,\n  Param,\n  NotFoundException,\n  Body,\n  Post,\n  Patch,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  EXERCISES_SERVICE,\n  IExercisesService,\n} from './interfaces/exercises.service.interface';\nimport { IExercisesController } from './interfaces/exercises.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { Exercise } from './exercise.model';\nimport { ExerciseDto, CreateExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\n\n@Controller('exercises')\n@ApiTags('exercises')\nexport class ExercisesController implements IExercisesController {\n  constructor(\n    @Inject(EXERCISES_SERVICE)\n    private readonly service: IExercisesService\n  ) {}\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Exercise] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Get('search')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async findByParams(@Query() params?: ParamsDto): Promise {\n    const exercise = await this.service.findByParams(params);\n    if (!exercise || exercise.length === 0) {\n      return;\n    }\n    return exercise;\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async getById(@Param('id') id: string): Promise {\n    const exercise = await this.service.getById(id);\n    if (!exercise) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return exercise;\n  }\n\n  @Post()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [ExerciseDto] })\n  @ApiBody({ type: CreateExerciseDto })\n  async create(@Body() exercise: CreateExerciseDto): Promise {\n    return await this.service.create(exercise);\n  }\n\n  @Patch(':id/update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() exercise: ExerciseDto\n  ): Promise {\n    return await this.service.update(id, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExercisesModule.html":{"url":"modules/ExercisesModule.html","title":"module - ExercisesModule","body":"\n                   \n\n\n\n\n    Modules\n    ExercisesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/exercises/exercises.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ExercisesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExercisesService } from './exercises.service';\nimport { ExercisesController } from './exercises.controller';\nimport { Exercise, ExerciseSchema } from './exercise.model';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { EXERCISES_SERVICE } from './interfaces/exercises.service.interface';\nimport { EXERCISES_REPOSITORY } from './interfaces/exercises.repository.interface';\nimport { ExercisesRepository } from './exercises.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Exercise.name,\n        schema: ExerciseSchema,\n      },\n    ]),\n  ],\n  controllers: [ExercisesController],\n  providers: [\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n    { useClass: ExercisesRepository, provide: EXERCISES_REPOSITORY },\n  ],\n  exports: [EXERCISES_SERVICE, EXERCISES_REPOSITORY],\n})\nexport class ExercisesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesRepository.html":{"url":"injectables/ExercisesRepository.html","title":"injectable - ExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IExercisesRepository } from './interfaces/exercises.repository.interface';\nimport { Exercise, ExerciseDocument } from './exercise.model';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\n\n@Injectable()\nexport class ExercisesRepository implements IExercisesRepository {\n  constructor(\n    @InjectModel(Exercise.name)\n    readonly model: Model\n  ) {}\n\n  async create(exercise: CreateExerciseDto): Promise {\n    return await this.model.create(exercise);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    await this.model.updateOne({ _id: id }, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesService.html":{"url":"injectables/ExercisesService.html","title":"injectable - ExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IExercisesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IExercisesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('exercises')\n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  EXERCISES_REPOSITORY,\n  IExercisesRepository,\n} from './interfaces/exercises.repository.interface';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { mapExercise } from './utils/exercise.mapper';\nimport { IExercisesService } from './interfaces/exercises.service.interface';\nimport { validate } from 'class-validator';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\n\n@Injectable()\nexport class ExercisesService implements IExercisesService {\n  private readonly logger = new Logger('exercises');\n\n  constructor(\n    @Inject(EXERCISES_REPOSITORY)\n    private readonly repository: IExercisesRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let exercises = await this.repository.findByParams(parameters);\n      if (exercises && exercises.length > 0) {\n        return exercises.map((exe) => mapExercise(exe));\n      } else {\n        return (exercises = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid exercise params`);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const exercise = await this.repository.getById(id);\n      if (exercise != null || exercise != undefined) {\n        return mapExercise(exercise);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async create(exercise: CreateExerciseDto): Promise {\n    try {\n      const errors = await validate(exercise);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(exercise);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, exercise);\n      } else {\n        throw new NotFoundException(`Exercise id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update exercise id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthController.html":{"url":"interfaces/IAuthController.html","title":"interface - IAuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AuthDto, LoginDto } from '../dtos/dtos';\n\nexport const AUTH_CONTROLLER = 'AUTH_CONTROLLER';\n\nexport interface IAuthController {\n  login: (doc: LoginDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthRepository.html":{"url":"interfaces/IAuthRepository.html","title":"interface - IAuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Auth } from '../auth.model';\n\nexport const AUTH_REPOSITORY = 'AUTH_REPOSITORY';\n\nexport interface IAuthRepository {\n  create: (auth: Auth) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthService.html":{"url":"interfaces/IAuthService.html","title":"interface - IAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generateToken\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            verifyToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generateToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generateToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verifyToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        verifyToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDto } from 'src/modules/users/dtos/dtos';\nimport { AuthDto } from '../dtos/auth.dto';\n\nexport const AUTH_SERVICE = 'AUTH_SERVICE';\n\nexport interface IAuthService {\n  login: (email: string, password: string) => Promise;\n  generateToken: (user: UserDto) => string;\n  verifyToken: (token: string) => any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDefaultController.html":{"url":"interfaces/IDefaultController.html","title":"interface - IDefaultController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDefaultController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/interfaces/default.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByField\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByField\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByField:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDefaultController {\n  create: (doc: T) => Promise;\n  getAll: () => Promise;\n  getByField: (field: any) => Promise;\n  update: (id: string, doc: T) => Promise;\n  delete: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesController.html":{"url":"interfaces/IExercisesController.html","title":"interface - IExercisesController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\nimport { Exercise } from '../exercise.model';\n\nexport const EXERCISES_CONTROLLER = 'EXERCISES_CONTROLLER';\n\nexport interface IExercisesController {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesRepository.html":{"url":"interfaces/IExercisesRepository.html","title":"interface - IExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_REPOSITORY = 'EXERCISES_REPOSITORY';\n\nexport interface IExercisesRepository {\n  create: (exercise: CreateExerciseDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesService.html":{"url":"interfaces/IExercisesService.html","title":"interface - IExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_SERVICE = 'EXERCISES_SERVICE';\n\nexport interface IExercisesService {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansController.html":{"url":"interfaces/IPlansController.html","title":"interface - IPlansController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\nimport { CreatePlanDto, PlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\nimport { ParamsDto } from 'src/modules/shared/dtos/params.dto';\n\nexport const PLANS_CONTROLLER = 'PLANS_CONTROLLER';\n\nexport interface IPlansController {\n  getAll: (request: Request) => Promise;\n  findByParams: (request: Request, params?: ParamsDto) => Promise;\n  getById: (id: string) => Promise;\n  create: (plan: CreatePlanDto, request: Request) => Promise;\n  update: (id: string, plan: PlanDto, request: Request) => Promise;\n  addOrUpdateTraining: (\n    id: string,\n    request: Request,\n    trainingData: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    id: string,\n    request: Request,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansRepository.html":{"url":"interfaces/IPlansRepository.html","title":"interface - IPlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            getPlanByExerciseId\n                                        \n                                \n                                \n                                        \n                                            savePlan\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getPlanByExerciseId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getPlanByExerciseId:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savePlan\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        savePlan:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\n\nexport const PLANS_REPOSITORY = 'PLANS_REPOSITORY';\n\nexport interface IPlansRepository {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto) => Promise;\n  getPlanByExerciseId: (filter: any) => Promise;\n  savePlan: (plan: Plan) => Promise;\n  updateExerciseDoneStatus: (filter: any) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansService.html":{"url":"interfaces/IPlansService.html","title":"interface - IPlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\n\nexport const PLANS_SERVICE = 'PLANS_SERVICE';\n\nexport interface IPlansService {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto, userId: string) => Promise;\n  addOrUpdateTraining: (\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersController.html":{"url":"interfaces/IUsersController.html","title":"interface - IUsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\nimport { User } from '../user.model';\n\nexport const USERS_CONTROLLER = 'USERS_CONTROLLER';\n\nexport interface IUsersController {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersRepository.html":{"url":"interfaces/IUsersRepository.html","title":"interface - IUsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_REPOSITORY = 'USERS_REPOSITORY';\n\nexport interface IUsersRepository {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\nexport interface IUsersService {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  getById: (id: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: IUsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from 'src/modules/users/interfaces/users.service.interface';\nimport { UserDto } from 'src/modules/users/dtos/user.dto';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService\n  ) {\n    super({\n      secretOrKey: process.env.JWT_SECRET,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n    });\n  }\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload;\n    const user = await this.usersService.getByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamsDto.html":{"url":"classes/ParamsDto.html","title":"class - ParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParamsDto {\n  name?: string;\n  focusMuscle?: string[];\n  userId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Plan.html":{"url":"classes/Plan.html","title":"class - Plan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plan.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Validity of plan'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Plan', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Existing Exercises in the Plan', type: undefined})@Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id who created the plan'})@Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type PlanDocument = Plan & Document;\n\n@Schema({ collection: 'plans', timestamps: true })\nexport class Plan {\n  @ApiProperty({ description: 'Plan Id}' })\n  id: string;\n\n  @ApiProperty({ description: 'Plan Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Plan', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'Validity of plan' })\n  @Prop({ type: Date, required: true })\n  expiresIn?: Date;\n\n  @ApiProperty({ description: 'User Id who created the plan' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @ApiProperty({\n    description: 'Existing Exercises in the Plan',\n    type: [Training],\n  })\n  @Prop({ type: [TrainingSchema], required: false })\n  training?: Training[];\n}\n\nexport const PlanSchema = SchemaFactory.createForClass(Plan);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDate,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class PlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: Training[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlansController.html":{"url":"controllers/PlansController.html","title":"controller - PlansController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plans\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(id: string, request: Request, trainingData: TrainingDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/updatetraining')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingData\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreatePlanDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(request: Request, params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(id: string, request: Request, exerciseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/doneexercise')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Query,\n  UseGuards,\n  Patch,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  IPlansService,\n  PLANS_SERVICE,\n} from './interfaces/plans.service.interface';\nimport { Plan } from './plan.model';\nimport { CreatePlanDto, PlanDto } from './dtos/dtos';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n  CREATED_201,\n} from '../shared/utils/http-response-status.utils';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { IPlansController } from './interfaces/plans.controller.interface';\n\n@Controller('plans')\n@ApiTags('plans')\nexport class PlansController implements IPlansController {\n  constructor(\n    @Inject(PLANS_SERVICE)\n    private readonly service: IPlansService\n  ) {}\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Plan] })\n  async getAll(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return await this.service.getAll(userId);\n  }\n\n  @Get('search')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async findByParams(\n    @Req() request: Request,\n    @Query() params?: ParamsDto\n  ): Promise {\n    const userId = request.user?.id;\n    params.userId = userId;\n    const plan = await this.service.findByParams(params);\n    if (!plan || plan.length === 0) {\n      return;\n    }\n    return plan;\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async getById(@Param('id') id: string): Promise {\n    const plan = await this.service.getById(id);\n    if (!plan) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return plan;\n  }\n\n  @Post()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [PlanDto] })\n  @ApiBody({ type: CreatePlanDto })\n  async create(\n    @Body() plan: CreatePlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    plan.userId = userId;\n    return await this.service.create(plan);\n  }\n\n  @Patch(':id/update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() plan: PlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.update(id, plan, userId);\n  }\n\n  @Patch(':id/updatetraining')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async addOrUpdateTraining(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body() trainingData: TrainingDto[]\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.addOrUpdateTraining(id, userId, trainingData);\n  }\n\n  @Patch(':id/doneexercise')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateExerciseDoneStatus(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body('exerciseId') exerciseId: string\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.updateExerciseDoneStatus(id, userId, exerciseId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlansModule.html":{"url":"modules/PlansModule.html","title":"module - PlansModule","body":"\n                   \n\n\n\n\n    Modules\n    PlansModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlansModule\n\n\n\ncluster_PlansModule_imports\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/plans/plans.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            PlansController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExercisesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Plan, PlanSchema } from './plan.model';\nimport { PlansController } from './plans.controller';\nimport { PlansService } from './plans.service';\nimport { PlansRepository } from './plans.repository';\nimport { PLANS_SERVICE } from './interfaces/plans.service.interface';\nimport { PLANS_REPOSITORY } from './interfaces/plans.repository.interface';\nimport { ExercisesModule } from '../exercises/exercises.module';\nimport { ExercisesService } from '../exercises/exercises.service';\nimport { EXERCISES_SERVICE } from '../exercises/interfaces/exercises.service.interface';\nimport { SharedModule } from '../shared/shared.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Plan.name,\n        schema: PlanSchema,\n      },\n    ]),\n    ExercisesModule,\n    SharedModule,\n  ],\n  controllers: [PlansController],\n  providers: [\n    { useClass: PlansService, provide: PLANS_SERVICE },\n    { useClass: PlansRepository, provide: PLANS_REPOSITORY },\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n  ],\n})\nexport class PlansModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansRepository.html":{"url":"injectables/PlansRepository.html","title":"injectable - PlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addExercise\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPlanByExerciseId\n                            \n                            \n                                    Async\n                                savePlan\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    addExercise(planId: string, training: TrainingDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    training\n                                    \n                                                TrainingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlanByExerciseId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanByExerciseId(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        savePlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    savePlan(plan: Plan)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                Plan\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Plan, PlanDocument } from './plan.model';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { IPlansRepository } from './interfaces/plans.repository.interface';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { exerciseDataPipeline } from './pipelines/exercise-data.pipeline';\n\n@Injectable()\nexport class PlansRepository implements IPlansRepository {\n  constructor(\n    @InjectModel(Plan.name)\n    readonly model: Model\n  ) {}\n\n  async getAll(userId: string): Promise {\n    const pipeline = exerciseDataPipeline('userId', userId);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result;\n  }\n\n  async getById(id: string): Promise {\n    const pipeline = exerciseDataPipeline('_id', id);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result[0];\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    return await this.model.create(plan);\n  }\n\n  async update(id: string, plan: PlanDto): Promise {\n    await this.model.updateOne({ _id: id }, plan);\n  }\n\n  async savePlan(plan: Plan): Promise {\n    return this.model.findByIdAndUpdate(plan.id, plan, { new: true });\n  }\n\n  async getPlanByExerciseId(filter: any): Promise {\n    return await this.model.findOne(filter);\n  }\n\n  async addExercise(\n    planId: string,\n    training: TrainingDto,\n    userId: string\n  ): Promise {\n    await this.model.updateOne({\n      $and: [\n        {\n          _id: planId,\n          userId: userId,\n        },\n      ],\n      $push: {\n        training: training,\n      },\n    });\n  }\n\n  async updateExerciseDoneStatus(filter: any): Promise {\n    await this.model.updateOne(filter, {\n      $set: {\n        'training.$.done': true,\n      },\n    });\n  }\n\n  //removeExercise()\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansService.html":{"url":"injectables/PlansService.html","title":"injectable - PlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                            \n                                    Private\n                                updateTraining\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IPlansRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IPlansRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(planId: string, userId: string, trainingDto: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingDto\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(planId: string, userId: string, exerciseId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTraining(existingTraining: TrainingDto[], updateTraining: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    existingTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Training[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('PlansService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plans.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { IPlansService } from './interfaces/plans.service.interface';\nimport {\n  IPlansRepository,\n  PLANS_REPOSITORY,\n} from './interfaces/plans.repository.interface';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { mapPlan } from './utils/plan.mapper';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\nimport { Training } from '../shared/models/training.model';\nimport { TrainingDto } from '../shared/dtos/training.dto';\n\n@Injectable()\nexport class PlansService implements IPlansService {\n  private readonly logger = new Logger('PlansService');\n\n  constructor(\n    @Inject(PLANS_REPOSITORY)\n    private readonly repository: IPlansRepository\n  ) {}\n\n  async getAll(userId: string): Promise {\n    try {\n      return await this.repository.getAll(userId);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const plan = await this.repository.getById(id);\n      if (plan != null || plan !== undefined) {\n        return mapPlan(plan);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let plans = await this.repository.findByParams(parameters);\n      if (plans && plans.length > 0) {\n        return plans.map((item) => mapPlan(item));\n      } else {\n        return (plans = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid plan params`);\n    }\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    try {\n      const errors = await validate(plan);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(plan);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, plan: PlanDto, userId: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined && result.userId.toString() === userId) {\n        return await this.repository.update(id, plan);\n      } else {\n        throw new NotFoundException(\n          `Plan id ${id} not found or does not belongs to the user ${userId}`\n        );\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${id} failed`);\n    }\n  }\n\n  async addOrUpdateTraining(\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ): Promise {\n    try {\n      const plan = await this.repository.getById(planId);\n      if (!plan || plan.userId.toString() !== userId) {\n        throw new NotFoundException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const updatedTraining = this.updateTraining(plan.training, trainingDto);\n      plan.training = updatedTraining;\n\n      return this.repository.savePlan(plan);\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${planId} failed`);\n    }\n  }\n\n  private updateTraining(\n    existingTraining: TrainingDto[],\n    updateTraining: TrainingDto[]\n  ): Training[] {\n    const alteredTraining: TrainingDto[] = [];\n\n    for (const training of updateTraining) {\n      const existingTrainingIndex = existingTraining.findIndex(\n        (t) => t.exerciseId.toString() === training.exerciseId\n      );\n\n      if (existingTrainingIndex !== -1) {\n        existingTraining[existingTrainingIndex] = {\n          id: training.id,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        };\n      } else {\n        alteredTraining.push({\n          id: undefined,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        });\n      }\n    }\n\n    return [...existingTraining, ...alteredTraining];\n  }\n\n  async updateExerciseDoneStatus(\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ): Promise {\n    try {\n      const filter = {\n        _id: planId,\n        userId: userId,\n        training: {\n          $elemMatch: {\n            exerciseId: exerciseId,\n          },\n        },\n      };\n\n      const plan = await this.repository.getById(planId);\n\n      if (!plan) {\n        throw new BadRequestException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const exerciseExists = await this.repository.getPlanByExerciseId(filter);\n\n      if (!exerciseExists) {\n        throw new BadRequestException(\n          `Exercise id ${exerciseId} not found or plan does not belongs to the current user`\n        );\n      }\n\n      for (const training of plan.training) {\n        if (training.exerciseId.toString() === exerciseId) {\n          await this.repository.updateExerciseDoneStatus(filter);\n        }\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(\n        `Update status exercise in plan ${planId} failed`\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Routine.html":{"url":"classes/Routine.html","title":"class - Routine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Routine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routine.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                frequency\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                training\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\n\nexport type RoutineDocument = Routine & Document;\n\n@Schema({ collection: 'routines', timestamps: true })\nexport class Routine {\n  id: string;\n\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @Prop({ type: String, required: true })\n  frequency: string;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @Prop({ type: [TrainingSchema], required: true })\n  training: Training[];\n}\n\nexport const RoutineSchema = SchemaFactory.createForClass(Routine);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoutinesController.html":{"url":"controllers/RoutinesController.html","title":"controller - RoutinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoutinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        /*\nhttps://docs.nestjs.com/controllers#controllers\n*/\n\nimport { Controller } from '@nestjs/common';\n\n@Controller()\nexport class RoutinesController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoutinesModule.html":{"url":"modules/RoutinesModule.html","title":"module - RoutinesModule","body":"\n                   \n\n\n\n\n    Modules\n    RoutinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nRoutinesService\n\nRoutinesService\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/routines/routines.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoutinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoutinesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoutinesService } from './routines.service';\nimport { RoutinesController } from './routines.controller';\n\n@Module({\n  imports: [],\n  controllers: [RoutinesController],\n  providers: [RoutinesService],\n})\nexport class RoutinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesRepository.html":{"url":"injectables/RoutinesRepository.html","title":"injectable - RoutinesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.repository.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesRepository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesService.html":{"url":"injectables/RoutinesService.html","title":"injectable - RoutinesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistory.html":{"url":"classes/ShapeHistory.html","title":"class - ShapeHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/shape-history.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User age'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'According to registered User data, BMI calculation'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User height'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User weight'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ShapeHistoryDocument = ShapeHistory & Document;\n\n@Schema({ _id: false, timestamps: true })\nexport class ShapeHistory {\n  @ApiProperty({ description: 'User age' })\n  @Prop({ type: Date, required: true })\n  age: Date;\n\n  @ApiProperty({ description: 'User height' })\n  @Prop({ type: Number, required: true })\n  height: number;\n\n  @ApiProperty({ description: 'User weight' })\n  @Prop({ type: Number, required: true })\n  weight: number;\n\n  @ApiProperty({\n    description: 'According to registered User data, BMI calculation',\n  })\n  @Prop({ type: Number, required: true })\n  bmi: number;\n}\n\nexport const ShapeHistorySchema = SchemaFactory.createForClass(ShapeHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistoryDto.html":{"url":"classes/ShapeHistoryDto.html","title":"class - ShapeHistoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/shape-history.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsDefined, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class ShapeHistoryDto {\n  @ApiProperty()\n  @IsDate()\n  @IsDefined()\n  @IsNotEmpty()\n  age: Date;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  height: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  weight: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  bmi: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Training, TrainingSchema } from './models/training.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Training.name,\n        schema: TrainingSchema,\n      },\n    ]),\n  ],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Training.html":{"url":"classes/Training.html","title":"class - Training","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Training\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/models/training.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Control Done'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})@Prop({type: undefined, required: true, ref: 'Exercises'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Training Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise load/weight'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Notes'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Repetitions'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Series'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport mongoose from 'mongoose';\n\nexport type TrainingDocument = Training & Document;\n\n@Schema({ timestamps: true })\nexport class Training {\n  @ApiProperty({ description: 'Training Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Id' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Exercises',\n  })\n  exerciseId: string;\n\n  @ApiProperty({ description: 'Exercise Series' })\n  @Prop({ type: String, required: true })\n  series: string;\n\n  @ApiProperty({ description: 'Exercise Repetitions' })\n  @Prop({ type: String, required: true })\n  repetitions: string;\n\n  @ApiProperty({ description: 'Exercise load/weight' })\n  @Prop({ type: String, required: true })\n  load: string;\n\n  @ApiProperty({ description: 'Exercise Notes' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n\n  @ApiProperty({ description: 'Exercise Control Done' })\n  @Prop({ type: Boolean, required: true })\n  done: boolean;\n}\n\nexport const TrainingSchema = SchemaFactory.createForClass(Training);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingDto.html":{"url":"classes/TrainingDto.html","title":"class - TrainingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                series\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nexport class TrainingDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  exerciseId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  series: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  repetitions: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  load: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsBoolean()\n  done: boolean;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingUpdateDto.html":{"url":"classes/TrainingUpdateDto.html","title":"class - TrainingUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/update-training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class TrainingUpdateDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  exerciseId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  series?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  repetitions?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  load?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  done?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlanDto.html":{"url":"classes/UpdatePlanDto.html","title":"class - UpdatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/update-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [TrainingUpdateDto]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsArray,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { TrainingUpdateDto } from 'src/modules/shared/dtos/update-training.dto';\n\nexport class UpdatePlanDto {\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  id?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  focusMuscle?: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  userId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  training?: [TrainingUpdateDto];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User activation status'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User avatar'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User birth date'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User sur name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password, it must be 5 characters or more'})@Prop({type: String, required: true, minlength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User shape history data', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { ShapeHistory, ShapeHistorySchema } from './shape-history';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({ collection: 'users', timestamps: true })\nexport class User {\n  @ApiProperty({ description: 'User Id' })\n  id: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({\n    description: 'User password, it must be 5 characters or more',\n  })\n  @Prop({ type: String, required: true, minlength: 6 })\n  password: string;\n\n  @ApiProperty({ description: 'User first name' })\n  @Prop({ type: String, required: true })\n  firstName: string;\n\n  @ApiProperty({ description: 'User sur name' })\n  @Prop({ type: String, required: true })\n  lastName: string;\n\n  @ApiProperty({ description: 'User birth date' })\n  @Prop({ type: Date, required: true })\n  birthDate: Date;\n\n  @ApiProperty({ description: 'User activation status' })\n  @Prop({ type: Boolean, required: true })\n  active: boolean;\n\n  @ApiProperty({ description: 'User shape history data', type: [ShapeHistory] })\n  @Prop({ type: [ShapeHistorySchema], required: true })\n  shape: ShapeHistory[];\n\n  @ApiProperty({ description: 'User avatar' })\n  @Prop({ type: String, required: false })\n  avatar?: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ShapeHistory } from '../shape-history';\n\nexport class UserDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsDate()\n  birthDate: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistory[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                disable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                enable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/disable')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/enable')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/shape-update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from './interfaces/users.service.interface';\nimport { IUsersController } from './interfaces/users.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { User } from './user.model';\nimport { ShapeHistoryDto, UserDto, CreateUserDto } from './dtos/dtos';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController implements IUsersController {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly service: IUsersService\n  ) {}\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [User] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Post()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [UserDto] })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise {\n    return await this.service.create(user);\n  }\n\n  @Get('email')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getByEmail(@Query('email') email: string): Promise {\n    const user = await this.service.getByEmail(email);\n    if (!user) {\n      throw new NotFoundException(`Email ${email} not found`);\n    }\n    return user;\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getById(@Param('id') id: string): Promise {\n    const user = await this.service.getById(id);\n    if (!user) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return user;\n  }\n\n  @Patch(':id/update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(@Param('id') id: string, @Body() user: UserDto): Promise {\n    return await this.service.update(id, user);\n  }\n\n  @Patch(':id/shape-update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateShape(\n    @Param('id') id: string,\n    @Body() shape: ShapeHistoryDto\n  ): Promise {\n    return await this.service.updateShape(id, shape);\n  }\n\n  @Patch(':id/enable')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async enable(@Param('id') id: string): Promise {\n    return await this.service.enable(id);\n  }\n\n  @Patch(':id/disable')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async disable(@Param('id') id: string): Promise {\n    return await this.service.disable(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './user.model';\nimport { USERS_SERVICE } from './interfaces/users.service.interface';\nimport { USERS_REPOSITORY } from './interfaces/users.repository.interface';\nimport { UsersRepository } from './users.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: UsersRepository, provide: USERS_REPOSITORY },\n  ],\n  exports: [USERS_SERVICE, USERS_REPOSITORY],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './user.model';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { IUsersRepository } from './interfaces/users.repository.interface';\n\n@Injectable()\nexport class UsersRepository implements IUsersRepository {\n  constructor(\n    @InjectModel(User.name)\n    readonly model: Model\n  ) {}\n\n  async create(user: CreateUserDto): Promise {\n    return await this.model.create(user);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async getByEmail(email: string): Promise {\n    const result = await this.model.findOne({ email: email });\n    return result ? result : null;\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    await this.model.updateOne({ _id: id }, user);\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    await this.model.updateOne(\n      { _id: id },\n      {\n        $push: {\n          shape: {\n            age: shape.age,\n            height: shape.height,\n            weight: shape.weight,\n            bmi: shape.bmi,\n          },\n        },\n      }\n    );\n  }\n\n  async delete(id: string): Promise {\n    await this.model.deleteOne({ _id: id });\n  }\n\n  async enable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: true });\n  }\n\n  async disable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: false });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                hashedPassword\n                            \n                            \n                                transformString\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IUsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IUsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashedPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashedPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transformString\n                        \n                    \n                \n            \n            \n                \ntransformString(arr: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('UsersService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport {\n  IUsersRepository,\n  USERS_REPOSITORY,\n} from './interfaces/users.repository.interface';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { isEmail, validate } from 'class-validator';\nimport { IUsersService } from './interfaces/users.service.interface';\nimport { mapUser } from './utils/user.mapper';\n\n@Injectable()\nexport class UsersService implements IUsersService {\n  private readonly logger = new Logger('UsersService');\n\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly repository: IUsersRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const user = await this.repository.getById(id);\n      if (user != null || user != undefined) {\n        const userDto = mapUser(user);\n        return userDto;\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async getByEmail(email: string): Promise {\n    try {\n      const valid = isEmail(email);\n      if (valid) {\n        const user = await this.repository.getByEmail(email);\n        if (user != null || user != undefined) {\n          return mapUser(user);\n        }\n      } else {\n        throw new NotFoundException(`Email ${email} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid email ${email}`);\n    }\n  }\n\n  async hashedPassword(password: string): Promise {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async create(user: CreateUserDto): Promise {\n    try {\n      validate(user).then((errors) => {\n        if (errors.length > 0) {\n          throw new BadRequestException(errors);\n        }\n      });\n      const existis = await this.getByEmail(user.email);\n      if (!existis) {\n        user.password = await this.hashedPassword(user.password);\n        return await this.repository.create(user);\n      } else {\n        throw new BadRequestException(\n          `User with email ${user.email} already exists`\n        );\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, user);\n      } else {\n        throw new NotFoundException(`User id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update user id ${id} failed`);\n    }\n  }\n\n  transformString(arr: any): string {\n    const mergedProps: Record = {};\n\n    arr.forEach((obj) => {\n      for (const prop in obj) {\n        if (mergedProps[prop]) {\n          mergedProps[prop].push(obj[prop]);\n        } else {\n          mergedProps[prop] = [obj[prop]];\n        }\n      }\n    });\n\n    const result = Object.entries(mergedProps).map(\n      ([prop, messages]) => `${prop}: ${messages.join(', ')}`\n    );\n\n    return result.join('\\n');\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    const shapeHistoryDto = new ShapeHistoryDto();\n    shapeHistoryDto.age = new Date(shape.age);\n    shapeHistoryDto.height = shape.height;\n    shapeHistoryDto.weight = shape.weight;\n    shapeHistoryDto.bmi = shape.bmi;\n\n    const validObj = validate(shapeHistoryDto)\n      .then((errors) => {\n        if (errors.length > 0) {\n          const arr = errors.map((error) => error.constraints);\n          const str = this.transformString(arr);\n          this.logger.error(str);\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .catch((error) => {\n        this.logger.error(error);\n        throw new BadRequestException(error);\n      });\n\n    if ((await validObj) === true) {\n      const user = this.getById(id);\n      if (user !== undefined) {\n        await this.repository.updateShape(id, shape);\n      }\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async delete(id: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.delete(id);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Delete user id ${id} failed`);\n    }\n  }\n\n  async enable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.enable(id);\n        return `${id} enabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Enable user id ${id} failed`);\n    }\n  }\n\n  async disable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.disable(id);\n        return `${id} disabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Disable user id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            variable\n            AuthSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.repository.ts\n            \n            injectable\n            AuthRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            interface\n            IAuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            variable\n            AUTH_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            interface\n            IAuthRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            variable\n            AUTH_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            interface\n            IAuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            variable\n            AUTH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/utils/credentials.utils.ts\n            \n            variable\n            comparePasswords\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/create-exercises.dto.ts\n            \n            class\n            CreateExerciseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/exercise.dto.ts\n            \n            class\n            ExerciseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            class\n            Exercise\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            variable\n            ExerciseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.controller.ts\n            \n            controller\n            ExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.repository.ts\n            \n            injectable\n            ExercisesRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.service.ts\n            \n            injectable\n            ExercisesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            interface\n            IExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            variable\n            EXERCISES_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            interface\n            IExercisesRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            variable\n            EXERCISES_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            interface\n            IExercisesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            variable\n            EXERCISES_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/utils/exercise.mapper.ts\n            \n            variable\n            mapExercise\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/create-plan.dto.ts\n            \n            class\n            CreatePlanDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/plan.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/update-plan.dto.ts\n            \n            class\n            UpdatePlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            interface\n            IPlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            variable\n            PLANS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            interface\n            IPlansRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            variable\n            PLANS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            interface\n            IPlansService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            variable\n            PLANS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/pipelines/exercise-data.pipeline.ts\n            \n            variable\n            exerciseDataPipeline\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            class\n            Plan\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            variable\n            PlanSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.controller.ts\n            \n            controller\n            PlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.repository.ts\n            \n            injectable\n            PlansRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.service.ts\n            \n            injectable\n            PlansService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/utils/plan.mapper.ts\n            \n            variable\n            mapPlan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            class\n            Routine\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            variable\n            RoutineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.controller.ts\n            \n            controller\n            RoutinesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.repository.ts\n            \n            injectable\n            RoutinesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.service.ts\n            \n            injectable\n            RoutinesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/params.dto.ts\n            \n            class\n            ParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/training.dto.ts\n            \n            class\n            TrainingDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/update-training.dto.ts\n            \n            class\n            TrainingUpdateDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/interfaces/default.controller.interface.ts\n            \n            interface\n            IDefaultController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            class\n            Training\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            variable\n            TrainingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/build-params.utils.ts\n            \n            variable\n            buildParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            BAD_REQUEST_400\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            CREATED_201\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NO_CONTENT_204\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NOT_FOUND_404\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            OK_200\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            SERVER_ERROR_500\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            UNAUTHORIZED_401\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/training.mapper.ts\n            \n            variable\n            mapTrainings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/shape-history.dto.ts\n            \n            class\n            ShapeHistoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            interface\n            IUsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            variable\n            USERS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            interface\n            IUsersRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            variable\n            USERS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            interface\n            IUsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            class\n            ShapeHistory\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            variable\n            ShapeHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/utils/user.mapper.ts\n            \n            variable\n            mapUser\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.4.0\n        \n            @nestjs/config : ^2.3.2\n        \n            @nestjs/core : ^9.4.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.4.0\n        \n            @nestjs/serve-static : ^4.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.1.0\n        \n            jsonwebtoken : ^9.0.0\n        \n            mongoose : ^7.1.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescrição\nAPI/Back-end da aplicação To-do Gym.\nUma aplicação web para controle de treinos, rotinas, evolução física e musculação na academia, além de demonstração da execução de exercícios físicos.\nDesenvolvida com TypeScript em NodeJS com o framework Nest.\nModelagem de Banco de Dados\n\n  \n\n\nAcesse Draw IO\nFuncionalidades\n\n  \n\n\nAcesse Miro\nDocumentação da API com Swagger\nhttps://todo-gym-api.onrender.com/swagger/\nTecnologias Utilizadas\nLinguagem: TypeScript\nBack-end: NodeJS\nFramework Node: NestJS\nBanco de Dados: MongoDB\nODM Mongoose\nDocumentação API Rest: Swagger\nDocumentação Modular Estática: Compodoc\nDiagramação Banco de Dados: Draw IO\nDesenho de Fluxos: Miro\nInstalação\nnpm installPara executar o projeto\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTestes\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSobre mim\n\nAuthor - Flávio Oliveira\nPortfólio - https://flaviosoliver-portfolio.vercel.app/\nLinkedIn - https://www.linkedin.com/in/flaviosoliver/\nEmail - flavsoliver@gmail.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExercisesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlansModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoutinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRoutinesService\n\nRoutinesService\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : API da aplicação To-do Gym, construída em NodeJS, utilizando o framework NestJS na linguagem TypeScript\n        \n            License : UNLICENSED\n        \n            Author : Flávio Oliveira - https://github.com/flaviosoliver\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthDocument   (src/.../auth.model.ts)\n                        \n                        \n                            ExerciseDocument   (src/.../exercise.model.ts)\n                        \n                        \n                            PlanDocument   (src/.../plan.model.ts)\n                        \n                        \n                            RoutineDocument   (src/.../routine.model.ts)\n                        \n                        \n                            ShapeHistoryDocument   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingDocument   (src/.../training.model.ts)\n                        \n                        \n                            UserDocument   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/auth.model.ts\n    \n    \n        \n            \n                \n                    \n                    AuthDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/exercises/exercise.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExerciseDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/plans/plan.model.ts\n    \n    \n        \n            \n                \n                    \n                    PlanDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/routines/routine.model.ts\n    \n    \n        \n            \n                \n                    \n                    RoutineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/shape-history.ts\n    \n    \n        \n            \n                \n                    \n                    ShapeHistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/shared/models/training.model.ts\n    \n    \n        \n            \n                \n                    \n                    TrainingDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_CONTROLLER   (src/.../auth.controller.interface.ts)\n                        \n                        \n                            AUTH_REPOSITORY   (src/.../auth.repository.interface.ts)\n                        \n                        \n                            AUTH_SERVICE   (src/.../auth.service.interface.ts)\n                        \n                        \n                            AuthSchema   (src/.../auth.model.ts)\n                        \n                        \n                            BAD_REQUEST_400   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            buildParams   (src/.../build-params.utils.ts)\n                        \n                        \n                            comparePasswords   (src/.../credentials.utils.ts)\n                        \n                        \n                            CREATED_201   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            exerciseDataPipeline   (src/.../exercise-data.pipeline.ts)\n                        \n                        \n                            EXERCISES_CONTROLLER   (src/.../exercises.controller.interface.ts)\n                        \n                        \n                            EXERCISES_REPOSITORY   (src/.../exercises.repository.interface.ts)\n                        \n                        \n                            EXERCISES_SERVICE   (src/.../exercises.service.interface.ts)\n                        \n                        \n                            ExerciseSchema   (src/.../exercise.model.ts)\n                        \n                        \n                            mapExercise   (src/.../exercise.mapper.ts)\n                        \n                        \n                            mapPlan   (src/.../plan.mapper.ts)\n                        \n                        \n                            mapTrainings   (src/.../training.mapper.ts)\n                        \n                        \n                            mapUser   (src/.../user.mapper.ts)\n                        \n                        \n                            NO_CONTENT_204   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            NOT_FOUND_404   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            OK_200   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            PLANS_CONTROLLER   (src/.../plans.controller.interface.ts)\n                        \n                        \n                            PLANS_REPOSITORY   (src/.../plans.repository.interface.ts)\n                        \n                        \n                            PLANS_SERVICE   (src/.../plans.service.interface.ts)\n                        \n                        \n                            PlanSchema   (src/.../plan.model.ts)\n                        \n                        \n                            RoutineSchema   (src/.../routine.model.ts)\n                        \n                        \n                            SERVER_ERROR_500   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            ShapeHistorySchema   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingSchema   (src/.../training.model.ts)\n                        \n                        \n                            UNAUTHORIZED_401   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            USERS_CONTROLLER   (src/.../users.controller.interface.ts)\n                        \n                        \n                            USERS_REPOSITORY   (src/.../users.repository.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.service.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/interfaces/auth.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/auth.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Auth)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/http-response-status.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BAD_REQUEST_400\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BAD REQUEST'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CREATED_201\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CREATED'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NO_CONTENT_204\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NO CONTENT'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NOT_FOUND_404\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NOT FOUND'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OK_200\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'OK'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER_ERROR_500\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'INTERNAL SERVER ERROR'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UNAUTHORIZED_401\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UNAUTHORIZED'\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/build-params.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (params?: ParamsDto): any => {\n  const opt: any = { $or: [] };\n\n  if (params && params.userId) {\n    opt.$or.push({ userId: params.userId });\n  }\n\n  if (params && params.name) {\n    opt.$or.push({ name: { $regex: params.name, $options: 'i' } });\n  }\n\n  if (params && params.focusMuscle?.length > 0) {\n    opt.$or.push({ focusMuscle: { $in: params.focusMuscle } });\n  } else {\n    opt.$or.focusMuscle = [];\n  }\n\n  return opt;\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/utils/credentials.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  passwordLogin: string,\n  passwordUser: string\n): Promise => {\n  return await bcrypt.compare(passwordLogin, passwordUser);\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/pipelines/exercise-data.pipeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exerciseDataPipeline\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (field: string, value: string): any => [\n  {\n    $match: {\n      [field]: new mongoose.Types.ObjectId(value),\n    },\n  },\n  {\n    $unwind: '$training',\n  },\n  {\n    $lookup: {\n      from: 'exercises',\n      localField: 'training.exerciseId',\n      foreignField: '_id',\n      as: 'exerciseDetails',\n    },\n  },\n  {\n    $unwind: '$exerciseDetails',\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        exerciseId: '$exerciseDetails._id',\n        series: '$training.series',\n        repetitions: '$training.repetitions',\n        load: '$training.load',\n        done: '$training.done',\n        createdAt: '$training.createdAt',\n        updatedAt: '$training.updatedAt',\n        exerciseName: '$exerciseDetails.name',\n        exerciseFocusMuscle: '$exerciseDetails.focusMuscle',\n        exerciseImage: '$exerciseDetails.image',\n        exerciseVideo: '$exerciseDetails.video',\n        notes: {\n          $concat: ['$training.notes', '\\n', '$exerciseDetails.notes'],\n        },\n      },\n    },\n  },\n  {\n    $group: {\n      _id: '$_id',\n      name: {\n        $first: '$name',\n      },\n      focusMuscle: {\n        $first: '$focusMuscle',\n      },\n      userId: {\n        $first: '$userId',\n      },\n      training: {\n        $push: '$training',\n      },\n      exerciseDetails: {\n        $push: '$exerciseDetails',\n      },\n    },\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        $map: {\n          input: '$training',\n          as: 't',\n          in: {\n            $mergeObjects: [\n              '$$t',\n              {\n                $arrayElemAt: [\n                  {\n                    $filter: {\n                      input: '$exerciseDetails',\n                      as: 'e',\n                      cond: {\n                        $eq: ['$$e._id', '$$t.exerciseId'],\n                      },\n                    },\n                  },\n                  0,\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/exercise.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExerciseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Exercise)\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/utils/exercise.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapExercise\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (exercise: Exercise): ExerciseDto => {\n  return {\n    id: exercise.id,\n    name: exercise.name,\n    focusMuscle: exercise.focusMuscle,\n    image: exercise.image,\n    video: exercise.video,\n    notes: exercise.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/utils/plan.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapPlan\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (plan: Plan): PlanDto => {\n  return {\n    id: plan.id,\n    name: plan.name,\n    focusMuscle: plan.focusMuscle,\n    expiresIn: plan.expiresIn,\n    userId: plan.userId,\n    training: plan.training,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/training.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapTrainings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (training: Training): TrainingDto => {\n  return {\n    id: training.id,\n    exerciseId: training.exerciseId,\n    series: training.series,\n    repetitions: training.repetitions,\n    load: training.load,\n    done: training.done,\n    notes: training.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/users/utils/user.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (user: User): UserDto => {\n  return {\n    id: user.id,\n    email: user.email,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    birthDate: user.birthDate,\n    active: user.active,\n    shape: user.shape,\n    avatar: user.avatar ? user.avatar : '',\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/plan.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PlanSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Plan)\n                    \n                \n\n\n        \n    \n\n    src/modules/routines/routine.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoutineSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Routine)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/shape-history.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShapeHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShapeHistory)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/models/training.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TrainingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Training)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
