var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.773,1,2.353]],["body/injectables/AccessTokenGuard.html",[0,1.101,1,3.351,2,1.523,3,0.25,4,0.144,5,0.128,6,5.96,7,3.318,8,0.282,9,2.044,10,5.679,11,5.679,12,1.523,13,4.231,14,7.359,15,0.988,16,4.231,17,2.398,18,0.014,19,1.29,20,0.429,21,1.438,22,5.679,23,6.852,24,4.231,25,4.231,26,2.044,27,5.679,28,2.477,29,4.231,30,6.411,31,0.341,32,4.09,33,0.949,34,3.68,35,2.496,36,2.035,37,3.318,38,3.68,39,0.144,40,0.007,41,2.65,42,3.68,43,3.68,44,2.83,45,0.761,46,4.94,47,4.231,48,4.231,49,4.231,50,2.14,51,1.786,52,4.231,53,5.679,54,2.83,55,5.679,56,3.084,57,2.706,58,4.231,59,4.231,60,4.231,61,4.231,62,2.496,63,0.01,64,0.01]],["title/injectables/AccessTokenStrategy.html",[0,0.773,65,2.872]],["body/injectables/AccessTokenStrategy.html",[0,1.133,2,1.589,3,0.15,4,0.15,5,0.133,8,0.294,9,2.103,12,2.103,15,0.9,17,2.185,18,0.014,19,1.175,20,0.441,21,1.311,26,1.589,28,2.269,31,0.371,32,4.207,33,0.99,36,2.123,39,0.199,40,0.007,41,2.765,44,2.953,45,1.178,50,1.473,54,3.908,56,2.123,57,1.863,63,0.01,64,0.01,65,4.207,66,5.134,67,3.178,68,2.269,69,3.659,70,4.413,71,4.111,72,4.413,73,3.446,74,5.841,75,4.366,76,4.413,77,4.581,78,1.513,79,3.461,80,1.943,81,3.839,82,3.461,83,3.178,84,3.839,85,3.461,86,2.463,87,4.413,88,1.943,89,4.413,90,4.207,91,3.839,92,3.461,93,2.123,94,1.788,95,3.839,96,4.413,97,3.839,98,3.839,99,3.839,100,2.123,101,1.473,102,1.788,103,3.839]],["title/controllers/AppController.html",[104,1.756,105,2.872]],["body/controllers/AppController.html",[3,0.169,4,0.169,5,0.15,8,0.332,9,2.272,15,0.973,17,1.861,18,0.014,19,1.001,20,0.376,21,1.116,26,2.272,31,0.363,33,1.116,39,0.169,40,0.008,43,4.327,50,2.107,63,0.011,64,0.011,68,2.403,94,2.015,104,2.779,105,4.545,106,2.099,107,4.327,108,6.344,109,6.312,110,1.756,111,4.974,112,0.722,113,4.974,114,4.303,115,6.312,116,4.974,117,6.934,118,3.582,119,2.934,120,4.344,121,4.327,122,6.312,123,4.974,124,4.974,125,4.974,126,4.974]],["title/modules/AppModule.html",[127,1.615,128,2.872]],["body/modules/AppModule.html",[3,0.133,4,0.133,5,0.118,18,0.014,31,0.388,33,0.879,39,0.133,40,0.006,45,1.109,50,1.307,63,0.009,64,0.009,68,1.357,80,1.724,100,1.884,105,4.436,106,2.274,120,4.505,121,3.406,127,2.495,128,5.828,129,1.975,130,2.31,131,2.62,132,2.62,133,2.31,134,3.438,135,2.185,136,3.406,137,3.406,138,3.406,139,4.811,140,4.505,141,4.811,142,4.811,143,4.505,144,4.505,145,3.605,146,2.62,147,2.62,148,3.916,149,3.635,150,2.453,151,1.357,152,4.687,153,4.779,154,2.62,155,3.916,156,3.916,157,3.406,158,3.406,159,3.916,160,3.406,161,3.916,162,3.916,163,3.916,164,3.406,165,3.916,166,3.916,167,3.916,168,3.916,169,5.388,170,3.916,171,3.916,172,3.916,173,3.916]],["title/injectables/AppService.html",[0,0.773,120,2.498]],["body/injectables/AppService.html",[0,1.344,2,2.083,3,0.197,4,0.197,5,0.175,8,0.386,9,2.494,15,0.892,18,0.014,26,2.083,31,0.288,33,1.298,39,0.197,40,0.01,50,1.932,63,0.012,64,0.012,108,6.689,112,0.793,120,4.341,174,5.034,175,5.787,176,5.787,177,5.787]],["title/classes/Auth.html",[40,0.007,178,2.353]],["body/classes/Auth.html",[3,0.14,4,0.14,5,0.125,8,0.275,15,1.045,18,0.014,20,0.574,28,2.633,31,0.338,39,0.215,40,0.007,45,0.743,51,3.152,62,3.735,63,0.009,64,0.009,101,2.264,110,1.887,112,0.891,151,1.43,178,4.002,179,1.234,180,2.972,181,0.827,182,4.558,183,3.359,184,2.368,185,4.002,186,3.59,187,4.31,188,4.127,189,3.59,190,4.127,191,4.235,192,4.127,193,4.558,194,4.127,195,1.165,196,4.127,197,3.593,198,2.459,199,2.303,200,2.456,201,1.19,202,3.117,203,1.898,204,4.127,205,2.972,206,2.761,207,2.435,208,3.119,209,4.127,210,2.972,211,3.59]],["title/controllers/AuthController.html",[104,1.756,212,2.872]],["body/controllers/AuthController.html",[1,1.872,3,0.108,4,0.108,5,0.096,8,0.212,9,1.671,12,1.142,15,0.846,17,2.053,18,0.014,19,1.104,20,0.485,21,1.231,26,1.975,31,0.38,33,0.712,35,1.872,36,1.527,38,2.76,39,0.108,40,0.005,45,0.835,50,1.832,63,0.008,64,0.008,68,2.512,78,1.738,80,1.397,88,2.416,93,1.527,94,1.285,101,1.059,102,1.88,104,1.397,106,1.339,110,1.527,114,1.872,119,1.872,178,1.872,183,2.134,184,1.187,201,0.915,208,3.507,212,3.342,213,2.76,214,2.285,215,3.342,216,3.342,217,3.173,218,4.039,219,3.173,220,3.952,221,3.952,222,2.285,223,2.285,224,4.342,225,3.173,226,3.952,227,3.173,228,4.204,229,3.173,230,3.342,231,3.173,232,3.173,233,3.198,234,3.173,235,3.173,236,2.907,237,2.285,238,2.285,239,2.488,240,2.285,241,4.348,242,3.342,243,4.348,244,4.348,245,2.285,246,4.348,247,3.952,248,1.872,249,3.105,250,2.123,251,3.342,252,3.173,253,3.782,254,3.782,255,3.782,256,2.907,257,2.285,258,2.285,259,3.173,260,1.021,261,3.639,262,3.173,263,3.342,264,2.285,265,3.173,266,2.285,267,3.173,268,3.173,269,3.173,270,3.173,271,1.459,272,2.76,273,2.285,274,3.173,275,3.173,276,3.173,277,2.34,278,3.173,279,2.285,280,3.173,281,3.173,282,2.76,283,3.173,284,3.173,285,3.173,286,3.173,287,3.173]],["title/classes/AuthDto.html",[40,0.007,233,2.113]],["body/classes/AuthDto.html",[3,0.163,4,0.163,5,0.144,8,0.319,15,1.108,18,0.014,20,0.543,31,0.339,39,0.163,40,0.01,63,0.01,64,0.01,101,2.272,110,1.999,112,0.871,179,1.429,181,0.911,182,4.901,183,3.13,184,2.546,191,3.198,200,2.577,201,1.379,233,3.26,288,4.158,289,4.78,290,4.78,291,3.748,292,4.78,293,4.901,294,4.78,295,4.78,296,2.82,297,4.78,298,3.457,299,4.117,300,6.154,301,3.434,302,3.457,303,6.154,304,3.457,305,1.86,306,4.78]],["title/modules/AuthModule.html",[127,1.615,139,2.668]],["body/modules/AuthModule.html",[3,0.127,4,0.127,5,0.113,12,1.344,18,0.014,19,0.751,31,0.399,33,0.838,39,0.127,40,0.006,63,0.009,64,0.009,65,3.754,68,1.294,73,3.076,80,1.644,86,2.909,90,3.754,106,2.2,127,2.433,129,1.883,130,2.203,131,2.498,132,2.498,133,2.203,134,2.909,135,2.909,139,4.74,144,4.438,145,3.487,146,2.498,147,2.498,149,3.544,150,2.339,151,1.294,152,5.225,153,4.682,154,2.498,158,3.247,164,3.247,178,2.203,198,1.644,210,3.754,212,4.325,248,3.544,250,2.498,307,3.733,308,3.733,309,3.733,310,4.535,311,3.733,312,2.927,313,3.733,314,3.266,315,2.927,316,3.754,317,3.733,318,4.018,319,2.927,320,2.927,321,3.247,322,3.733,323,3.733,324,5.213,325,3.754,326,3.754,327,3.733,328,3.754,329,3.754,330,3.733,331,2.498,332,3.733,333,3.733,334,3.247,335,3.733,336,3.733,337,1.978,338,3.733,339,5.102,340,5.102,341,3.733]],["title/injectables/AuthRepository.html",[0,0.773,316,2.872]],["body/injectables/AuthRepository.html",[0,1.031,2,1.383,3,0.131,4,0.131,5,0.116,8,0.256,9,1.914,12,1.914,15,1.065,17,2.586,18,0.014,19,1.391,20,0.522,21,1.551,26,2.37,31,0.356,33,0.862,39,0.131,40,0.006,45,0.691,50,2.036,62,3.884,63,0.009,64,0.009,68,2.711,78,1.935,94,1.556,102,2.666,112,0.868,151,1.332,178,4.475,182,2.767,183,2.446,203,1.767,205,2.767,233,3.487,271,1.767,316,3.83,319,3.013,320,3.013,342,3.342,343,1.711,344,4.626,345,4.626,346,4.626,347,2.767,348,5.148,349,3.842,350,5.318,351,3.842,352,5.318,353,3.842,354,5.318,355,3.842,356,5.318,357,3.842,358,2.767,359,3.558,360,3.013,361,3.842,362,3.842,363,4.626,364,2.767,365,5.318,366,3.332]],["title/injectables/AuthService.html",[0,0.773,314,2.498]],["body/injectables/AuthService.html",[0,0.612,2,0.695,3,0.066,4,0.066,5,0.058,8,0.129,9,1.135,12,1.135,15,1.032,17,2.252,18,0.014,19,1.211,20,0.455,21,1.351,26,2.167,28,2.274,31,0.31,32,2.271,33,0.433,39,0.066,40,0.003,45,1.303,50,2.139,56,2.896,57,2.876,62,1.861,63,0.005,64,0.005,68,2.508,71,2.726,73,2.36,77,1.513,78,1.559,80,0.849,86,1.077,92,1.513,93,3.512,94,2.658,101,2.368,102,2.712,103,2.744,112,0.891,118,2.271,153,4.155,154,1.291,181,0.467,182,3.328,183,2.865,184,2.331,195,0.403,205,2.881,215,2.271,216,2.271,226,3.938,233,3.057,236,1.209,249,2.11,250,1.291,260,0.621,271,0.887,277,2.91,312,1.513,314,1.976,318,1.291,319,1.513,321,1.678,334,1.678,337,2.448,359,3.091,367,1.678,368,3.328,369,4.001,370,4.001,371,3.154,372,3.154,373,4.001,374,2.744,375,4.621,376,2.744,377,1.39,378,5.771,379,3.154,380,2.271,381,3.154,382,1.93,383,3.154,384,1.93,385,1.93,386,1.93,387,3.154,388,1.93,389,3.154,390,1.93,391,3.154,392,1.93,393,1.93,394,3.154,395,1.93,396,2.677,397,2.677,398,3.154,399,3.154,400,1.93,401,3.154,402,1.93,403,3.669,404,1.861,405,1.513,406,1.93,407,1.93,408,1.93,409,3.669,410,3.154,411,4.621,412,3.154,413,2.473,414,1.93,415,3.623,416,1.93,417,1.93,418,1.678,419,1.93,420,1.93,421,3.669,422,3.408,423,3.669,424,1.93,425,1.077,426,1.93,427,4.001,428,1.077,429,3.154,430,1.93,431,4.001,432,4.001,433,3.154,434,1.93,435,1.93,436,1.93,437,1.93,438,1.93,439,1.93,440,1.93,441,1.93,442,1.93,443,1.93,444,2.11,445,2.744,446,1.93,447,1.93,448,1.93,449,1.93,450,1.93,451,1.671,452,1.93,453,1.93,454,1.93,455,1.93,456,3.154,457,3.154,458,3.154,459,1.93]],["title/classes/CreateExerciseDto.html",[40,0.007,460,2.113]],["body/classes/CreateExerciseDto.html",[3,0.155,4,0.155,5,0.137,8,0.303,15,1.128,18,0.014,19,1.336,20,0.553,21,1.685,31,0.297,39,0.155,40,0.01,63,0.01,64,0.01,110,2.036,112,0.907,179,1.359,181,0.882,200,2.602,201,1.311,298,3.195,302,2.865,304,3.52,305,1.768,460,3.155,461,6.532,462,3.953,463,3.349,464,4.444,465,3.707,466,4.444,467,2.847,468,4.544,469,4.669,470,4.544,471,3.272,472,4.544,473,3.953,474,4.544,475,4.544,476,3.73,477,3.513,478,3.734,479,5.208]],["title/classes/CreatePlanDto.html",[40,0.007,480,2.113]],["body/classes/CreatePlanDto.html",[3,0.153,4,0.153,5,0.136,8,0.3,15,1.124,18,0.014,19,1.33,20,0.551,21,1.576,31,0.329,39,0.153,40,0.01,63,0.01,64,0.01,110,2.029,112,0.857,179,1.346,181,0.876,184,2.473,200,2.595,201,1.298,296,2.655,298,3.378,301,3.302,302,3.18,304,3.18,305,1.751,337,3.502,451,3.134,463,3.333,467,2.819,476,3.706,477,3.9,478,3.502,480,3.134,481,6.514,482,3.528,483,3.444,484,3.528,485,4.5,486,4.5,487,3.01,488,4.5,489,3.914,490,3.914,491,3.914,492,3.706,493,3.914]],["title/classes/CreateUserDto.html",[40,0.007,494,2.113]],["body/classes/CreateUserDto.html",[3,0.131,4,0.131,5,0.117,8,0.257,15,1.153,18,0.014,20,0.565,21,1.197,31,0.305,39,0.131,40,0.009,63,0.009,64,0.009,101,2.041,110,2.081,112,0.896,179,1.154,181,0.79,200,2.631,201,1.113,277,3.49,298,3.598,299,3.568,302,3.53,304,3.444,305,1.501,467,2.417,471,3.841,476,3.341,477,3.147,478,2.826,492,3.341,494,2.826,495,6.603,496,3.356,497,4.089,498,4.402,499,4.402,500,4.402,501,4.402,502,3.325,503,3.341,504,3.356,505,3.858,506,2.581,507,3.858,508,3.858,509,3.858,510,3.858,511,3.858,512,3.858,513,3.858,514,3.858,515,5.334,516,5.334,517,4.64,518,4.64,519,4.64,520,3.858,521,3.082,522,3.858,523,3.841,524,3.356,525,3.858,526,3.858]],["title/classes/Exercise.html",[40,0.007,527,1.756]],["body/classes/Exercise.html",[3,0.201,4,0.123,5,0.109,8,0.242,15,1.082,18,0.014,19,1.291,20,0.594,21,1.575,31,0.254,39,0.201,40,0.006,45,0.652,51,2.855,63,0.009,64,0.009,100,3.376,110,1.952,112,0.93,151,1.256,179,1.083,181,0.756,185,4.14,187,4.476,195,1.412,197,3.718,198,2.247,199,2.022,200,2.499,201,1.045,202,2.022,206,2.424,207,2.138,208,3.227,463,2.98,464,4.293,465,3.775,466,4.293,527,3.46,528,2.609,529,4.44,530,4.44,531,2.841,532,1.743,533,3.623,534,3.623,535,6.416,536,6.416,537,3.623,538,3.623,539,2.841,540,3.623,541,3.623,542,3.623,543,3.623,544,3.623,545,2.841,546,2.27,547,2.609,548,3.152]],["title/classes/ExerciseDto.html",[40,0.007,549,2.011]],["body/classes/ExerciseDto.html",[3,0.15,4,0.15,5,0.133,8,0.294,15,1.148,18,0.014,19,1.317,20,0.563,21,1.671,31,0.291,39,0.15,40,0.01,63,0.01,64,0.01,110,2.072,112,0.915,179,1.32,181,0.865,195,1.366,200,2.633,201,1.273,296,2.604,298,3.353,301,3.26,302,3.15,304,3.583,305,1.717,463,3.302,464,4.38,465,3.654,466,4.38,467,2.765,469,4.581,471,3.178,473,3.839,476,3.659,477,3.446,478,3.692,479,5.134,549,2.946,550,3.839,551,4.413,552,4.413,553,4.413,554,4.413,555,4.413,556,4.413]],["title/controllers/ExercisesController.html",[104,1.756,557,2.872]],["body/controllers/ExercisesController.html",[1,1.515,3,0.087,4,0.087,5,0.078,8,0.171,9,1.425,12,0.924,15,0.904,17,2.031,18,0.014,19,1.092,20,0.552,21,1.218,26,2.111,31,0.348,33,0.576,35,1.515,36,1.235,39,0.087,40,0.004,45,0.712,50,2.068,56,1.235,57,1.083,63,0.007,64,0.007,68,2.585,78,1.809,80,1.13,93,1.235,94,1.04,102,2.375,104,1.13,106,1.083,110,1.631,112,0.709,114,1.515,195,1.224,201,0.74,208,3.615,214,1.849,220,4.222,221,4.222,222,3.909,223,3.909,224,4.284,230,1.849,237,2.85,238,2.85,240,1.849,241,4.461,242,4.222,243,4.461,244,4.461,245,1.849,246,4.461,247,4.461,253,3.881,254,3.881,255,3.881,256,3.673,257,1.849,258,1.849,260,0.826,263,1.849,271,1.181,273,1.849,279,1.849,343,1.273,404,1.515,425,1.433,428,1.433,460,3.282,527,3.253,532,2.324,546,1.608,549,3.255,557,2.85,558,2.233,559,1.82,560,1.881,561,1.481,562,1.674,563,2.013,564,2.233,565,3.231,566,2.013,567,2.567,568,1.717,569,2.112,570,2.233,571,2.567,572,1.742,573,1.849,574,2.233,575,2.567,576,1.36,577,2.233,578,2.567,579,1.36,580,2.233,581,2.567,582,2.013,583,2.013,584,2.013,585,3.104,586,1.608,587,2.648,588,2.013,589,2.85,590,2.567,591,1.849,592,1.608,593,2.013,594,2.567,595,2.567,596,2.567,597,2.233,598,2.233,599,2.567,600,2.233,601,2.567,602,2.013,603,2.013,604,2.013,605,1.608,606,2.233,607,2.567,608,2.013,609,2.013,610,2.013]],["title/modules/ExercisesModule.html",[127,1.615,140,2.498]],["body/modules/ExercisesModule.html",[3,0.17,4,0.17,5,0.151,18,0.014,19,1.003,31,0.394,33,1.119,39,0.17,40,0.008,63,0.011,64,0.011,106,2.668,127,2.561,129,2.515,134,2.783,135,2.783,140,3.961,149,2.942,150,3.124,151,1.728,198,2.196,331,3.336,339,4.553,340,4.553,527,2.196,547,4.553,557,5,586,4.349,588,3.911,591,3.591,611,4.987,612,4.23,613,4.987,614,4.987,615,4.645,616,3.911,617,4.553,618,4.987,619,4.338]],["title/injectables/ExercisesRepository.html",[0,0.773,617,2.872]],["body/injectables/ExercisesRepository.html",[0,1.014,2,1.349,3,0.128,4,0.128,5,0.113,8,0.25,9,1.882,12,1.882,15,1.093,17,2.563,18,0.014,19,1.378,20,0.517,21,1.537,26,2.466,31,0.363,33,0.841,39,0.128,40,0.006,50,2.174,63,0.009,64,0.009,68,2.753,78,1.978,94,1.518,102,2.774,112,0.812,151,1.299,195,1.256,203,1.724,260,1.206,271,1.724,343,1.682,347,2.699,348,5.109,358,2.699,364,2.699,460,3.45,527,3.123,545,2.939,549,3.284,559,2.404,560,2.257,561,1.956,562,1.812,563,4.099,568,3.497,569,2.534,572,1.65,576,2.769,579,2.769,591,2.699,592,2.348,616,2.939,617,3.765,620,3.261,621,3.748,622,3.748,623,3.748,624,3.748,625,3.748,626,3.748,627,3.497,628,3.748,629,3.748,630,3.261,631,3.261,632,3.261,633,2.212]],["title/injectables/ExercisesService.html",[0,0.773,612,2.668]],["body/injectables/ExercisesService.html",[0,0.817,2,1.002,3,0.095,4,0.095,5,0.084,8,0.186,9,1.516,12,1.516,15,1.024,17,2.393,18,0.014,19,1.223,20,0.459,21,1.364,26,2.189,31,0.341,33,0.625,39,0.095,40,0.007,45,1.019,50,2.135,56,3.195,57,2.955,63,0.007,64,0.007,68,2.625,69,1.744,78,1.848,80,1.226,93,2.724,94,2.293,102,2.69,112,0.732,181,0.624,195,1.461,260,0.896,271,1.281,305,1.084,343,1.355,366,2.638,368,4.077,377,2.005,380,3.033,396,1.863,397,1.863,403,2.005,404,1.643,409,4.379,421,4.379,422,4.443,423,4.379,425,2.35,428,2.35,444,1.863,460,2.999,527,3.142,532,2.026,546,3.181,549,2.855,559,1.937,560,1.962,561,1.576,562,1.459,563,3.302,568,2.817,569,2.203,572,1.854,573,2.005,576,2.231,579,2.231,587,2.817,588,2.184,592,1.744,605,1.744,612,2.817,615,1.863,616,2.184,627,3.788,634,2.422,635,4.211,636,2.785,637,2.785,638,2.785,639,2.785,640,2.785,641,4.211,642,2.184,643,2.785,644,2.005,645,2.422,646,2.422,647,2.785,648,2.422,649,2.422,650,2.422,651,2.785,652,2.785,653,2.785,654,3.302,655,3.302,656,2.785,657,2.422,658,2.785,659,2.184,660,2.184,661,2.785,662,2.184,663,2.184,664,2.184,665,2.785,666,2.184,667,2.184]],["title/interfaces/IAuthController.html",[251,2.872,668,0.961]],["body/interfaces/IAuthController.html",[3,0.179,4,0.179,5,0.159,8,0.352,18,0.014,20,0.538,31,0.326,39,0.223,45,0.949,63,0.011,64,0.011,78,1.844,119,3.111,181,0.97,183,3.425,215,5.364,216,5.364,218,4.38,226,3.797,228,4.461,233,3.469,236,3.303,251,4.715,260,1.696,668,1.271,669,2.136,670,4.135,671,3.294,672,5.134]],["title/interfaces/IAuthRepository.html",[359,2.668,668,0.961]],["body/interfaces/IAuthRepository.html",[3,0.173,4,0.173,5,0.154,8,0.339,18,0.014,20,0.555,31,0.319,39,0.218,45,0.915,62,3.776,63,0.011,64,0.011,78,1.904,112,0.802,178,4.337,181,0.948,183,2.338,233,3.39,318,4.281,320,3.986,343,2.365,344,6.395,345,6.395,346,6.395,359,4.281,360,3.986,668,1.226,669,2.059,671,3.352,673,3.986]],["title/interfaces/IAuthService.html",[249,2.668,668,0.961]],["body/interfaces/IAuthService.html",[3,0.17,4,0.17,5,0.151,8,0.333,18,0.014,20,0.551,31,0.346,39,0.215,45,0.898,54,3.336,63,0.011,64,0.011,75,3.124,78,1.637,85,3.911,88,2.196,101,2.111,112,0.862,181,0.936,184,1.866,215,5.257,216,5.257,233,2.642,236,3.124,248,3.73,249,4.23,277,3.188,360,3.911,374,6.35,376,6.35,668,1.202,669,2.02,671,3.339,674,3.911,675,4.987,676,6.323]],["title/interfaces/IDefaultController.html",[668,0.961,677,3.127]],["body/interfaces/IDefaultController.html",[3,0.175,4,0.175,5,0.156,8,0.344,18,0.014,20,0.575,39,0.175,63,0.011,64,0.011,78,1.97,112,0.739,181,0.956,195,1.347,226,4.649,343,2.377,560,2.56,562,2.56,668,1.243,669,2.088,671,3.414,677,5.062,678,4.484,679,4.943,680,7.388,681,5.062,682,4.484]],["title/interfaces/IExercisesController.html",[589,2.872,668,0.961]],["body/interfaces/IExercisesController.html",[3,0.165,4,0.165,5,0.147,8,0.324,18,0.014,20,0.564,31,0.342,39,0.211,45,0.874,63,0.01,64,0.01,78,1.935,112,0.711,181,0.92,195,1.297,260,1.562,343,2.325,460,3.293,527,3.018,549,3.135,559,3.324,560,2.505,561,2.704,562,2.505,569,2.419,572,2.138,589,4.476,591,3.497,668,1.171,669,1.967,671,3.381,683,3.808,684,3.042,685,4.874]],["title/interfaces/IExercisesRepository.html",[627,2.668,668,0.961]],["body/interfaces/IExercisesRepository.html",[3,0.167,4,0.167,5,0.149,8,0.328,18,0.014,20,0.567,31,0.312,39,0.213,45,0.886,63,0.011,64,0.011,78,1.943,112,0.717,181,0.928,195,1.308,260,1.583,343,2.337,460,3.321,527,2.76,549,3.161,559,3.341,560,2.518,561,2.718,562,2.518,569,2.439,572,2.166,615,4.194,627,4.194,668,1.186,669,1.993,671,3.389,684,3.082,686,3.858]],["title/interfaces/IExercisesService.html",[587,2.668,668,0.961]],["body/interfaces/IExercisesService.html",[3,0.167,4,0.167,5,0.149,8,0.328,18,0.014,20,0.567,31,0.312,39,0.213,45,0.886,63,0.011,64,0.011,78,1.943,112,0.717,181,0.928,195,1.308,260,1.583,343,2.337,460,3.321,527,2.76,549,3.161,559,3.341,560,2.518,561,2.718,562,2.518,569,2.439,572,2.166,586,3.927,587,4.194,668,1.186,669,1.993,671,3.389,684,3.082,687,3.858]],["title/interfaces/IPlansController.html",[668,0.961,688,2.872]],["body/interfaces/IPlansController.html",[3,0.145,4,0.145,5,0.129,8,0.284,18,0.014,20,0.569,31,0.357,39,0.194,45,0.767,63,0.01,64,0.01,78,1.95,112,0.82,119,2.513,181,0.845,195,1.434,228,5.014,260,1.37,343,2.21,480,3.023,559,3.16,560,2.381,561,2.571,562,2.381,569,2.22,572,1.876,668,1.027,669,1.726,671,3.395,684,2.669,688,4.109,689,3.341,690,4.948,691,4.304,692,3.023,693,3.706,694,2.877,695,3.095,696,2.85,697,4.474,698,3.706,699,2.378]],["title/interfaces/IPlansRepository.html",[668,0.961,700,2.668]],["body/interfaces/IPlansRepository.html",[3,0.151,4,0.151,5,0.134,8,0.296,18,0.014,20,0.584,31,0.327,39,0.2,45,0.8,63,0.01,64,0.01,78,2.001,112,0.752,181,0.869,184,1.663,195,1.225,260,1.43,343,2.248,480,3.109,559,3.214,560,2.422,561,2.615,562,2.422,569,2.284,572,1.957,668,1.072,669,1.801,671,3.442,684,2.785,691,4.378,694,2.96,695,3.495,696,2.974,700,3.927,701,3.486,702,6.079,703,6.079,704,3.927,705,4.227]],["title/interfaces/IPlansService.html",[668,0.961,706,2.668]],["body/interfaces/IPlansService.html",[3,0.15,4,0.15,5,0.133,8,0.294,18,0.014,20,0.574,31,0.326,39,0.198,45,0.792,63,0.01,64,0.01,78,1.966,112,0.893,181,0.864,184,2.605,195,1.217,260,1.416,343,2.24,480,3.09,559,3.202,560,2.413,561,2.605,562,2.413,569,2.269,572,1.938,668,1.061,669,1.783,671,3.41,684,2.758,690,5.014,691,4.361,692,3.465,693,3.83,694,2.941,695,2.806,699,2.457,706,3.902,707,3.452,708,3.902,709,4.573]],["title/interfaces/IUsersController.html",[668,0.961,710,2.872]],["body/interfaces/IUsersController.html",[3,0.156,4,0.156,5,0.139,8,0.306,18,0.014,20,0.579,28,2.313,31,0.299,39,0.204,45,0.826,63,0.01,64,0.01,78,1.986,88,2.639,101,1.532,112,0.84,181,0.887,195,1.477,260,1.476,343,2.276,494,3.175,502,2.314,521,3.022,560,2.452,562,2.452,668,1.106,669,1.859,671,3.429,710,4.316,711,3.599,712,4.433,713,4.433,714,4.433,715,4.433,716,3.305,717,4.7]],["title/interfaces/IUsersRepository.html",[668,0.961,718,2.668]],["body/interfaces/IUsersRepository.html",[3,0.149,4,0.149,5,0.132,8,0.292,18,0.014,20,0.589,28,2.015,31,0.218,39,0.198,45,0.789,63,0.01,64,0.01,78,2.019,88,2.559,101,1.463,112,0.868,181,0.861,195,1.551,260,1.41,343,2.235,494,3.08,502,2.21,521,2.932,560,2.408,561,2.6,562,2.408,668,1.056,669,1.775,671,3.458,679,4.649,712,4.353,713,4.353,714,4.353,715,4.353,718,3.889,719,3.436,720,3.889]],["title/interfaces/IUsersService.html",[71,2.353,668,0.961]],["body/interfaces/IUsersService.html",[3,0.149,4,0.149,5,0.132,8,0.292,18,0.014,20,0.589,28,2.015,31,0.218,39,0.198,45,0.789,63,0.01,64,0.01,71,3.43,78,2.019,86,3.245,88,2.559,101,1.463,112,0.868,181,0.861,195,1.551,260,1.41,343,2.235,494,3.08,502,2.21,521,2.932,560,2.408,561,2.6,562,2.408,668,1.056,669,1.775,671,3.458,679,4.649,712,4.353,713,4.353,714,4.353,715,4.353,721,3.436]],["title/interfaces/JwtPayload.html",[75,2.498,668,0.961]],["body/interfaces/JwtPayload.html",[3,0.187,4,0.187,5,0.166,8,0.367,18,0.014,20,0.571,39,0.187,63,0.011,64,0.011,75,4.214,101,2.525,112,0.903,181,0.996,445,6.579,668,1.328,669,2.232,722,4.793,723,4.793,724,7.563,725,7.563,726,5.278]],["title/injectables/LocalAuthGuard.html",[0,0.773,266,2.872]],["body/injectables/LocalAuthGuard.html",[0,1.372,2,2.158,3,0.204,4,0.204,5,0.181,18,0.014,31,0.353,33,1.345,35,3.536,36,2.884,39,0.204,40,0.01,41,3.755,63,0.012,64,0.012,266,5.096,727,5.214,728,5.214,729,5.994]],["title/injectables/LocalStrategy.html",[0,0.773,329,2.872]],["body/injectables/LocalStrategy.html",[0,1.159,2,1.644,3,0.155,4,0.155,5,0.138,8,0.304,9,2.15,12,1.644,15,0.921,17,2.235,18,0.014,19,1.202,20,0.451,21,1.34,26,1.644,28,2.307,31,0.365,32,3.289,33,1.025,36,2.197,39,0.203,40,0.008,41,2.861,44,3.055,45,1.075,50,1.524,56,2.197,57,1.927,63,0.01,64,0.01,68,2.307,69,3.742,79,3.581,80,2.01,82,3.581,83,3.289,91,3.972,93,2.197,101,2.223,102,1.85,112,0.86,118,3.289,248,2.694,250,3.055,277,3.792,314,4.71,315,3.581,328,4.302,329,4.302,730,3.581,731,3.972,732,4.567,733,5.974,734,4.567,735,3.581,736,4.567,737,4.567,738,4.567,739,4.567,740,4.567,741,4.567]],["title/classes/LoginDto.html",[40,0.007,218,2.668]],["body/classes/LoginDto.html",[3,0.182,4,0.182,5,0.162,8,0.357,15,1.018,18,0.014,20,0.499,31,0.329,39,0.182,40,0.011,63,0.011,64,0.011,101,2.393,110,1.838,112,0.857,179,1.6,181,0.978,200,2.484,201,1.543,218,4.42,277,3.615,291,4.195,298,3.448,299,4.42,302,3.448,304,3.448,305,2.082,487,3.579,742,4.653,743,5.35,744,5.35]],["title/classes/ParamsDto.html",[40,0.007,569,1.552]],["body/classes/ParamsDto.html",[3,0.19,4,0.19,5,0.168,8,0.372,15,1.125,18,0.013,19,1.469,20,0.551,21,1.775,39,0.19,40,0.009,63,0.011,64,0.011,112,0.905,179,1.667,181,1.003,184,2.731,463,3.681,569,2.637,745,4.851,746,5.576,747,5.576,748,5.576]],["title/classes/Plan.html",[40,0.007,695,1.919]],["body/classes/Plan.html",[3,0.121,4,0.121,5,0.107,8,0.236,15,1.074,18,0.014,19,1.279,20,0.599,21,1.426,28,1.742,31,0.317,39,0.199,40,0.006,45,0.638,51,3.143,63,0.008,64,0.008,100,2.419,110,1.939,112,0.883,151,1.229,179,1.06,181,0.744,184,2.185,185,4.111,187,4.455,195,1.496,197,3.692,198,2.213,199,1.979,200,2.484,201,1.023,202,1.979,203,2.312,206,2.372,207,2.092,208,3.205,337,3.094,451,3.367,463,2.946,483,3.295,529,4.374,530,4.374,531,3.943,532,2.81,539,2.781,546,3.15,695,3.741,749,2.554,750,5.028,751,5.028,752,3.546,753,3.546,754,3.546,755,3.546,756,5.028,757,3.546,758,4.374,759,3.943,760,3.621,761,3.546,762,3.15,763,2.781,764,2.781,765,2.781,766,2.781,767,2.554,768,3.085]],["title/classes/PlanDto.html",[40,0.007,694,2.011]],["body/classes/PlanDto.html",[3,0.149,4,0.149,5,0.132,8,0.292,15,1.146,18,0.014,19,1.313,20,0.561,21,1.559,31,0.325,39,0.149,40,0.01,63,0.01,64,0.01,110,2.068,112,0.881,179,1.31,181,0.861,184,2.441,195,1.362,200,2.628,201,1.264,296,3.43,298,3.479,301,3.641,302,3.343,304,3.343,305,1.705,337,3.456,451,3.08,463,3.29,467,2.745,476,3.642,477,3.849,478,3.456,483,3.418,484,3.436,487,2.931,489,3.812,492,3.642,493,3.812,694,2.932,769,3.812,770,4.382,771,4.382,772,4.382,773,4.382,774,4.382,775,4.382]],["title/controllers/PlansController.html",[104,1.756,776,2.872]],["body/controllers/PlansController.html",[1,1.16,3,0.067,4,0.067,5,0.059,8,0.131,9,1.153,12,0.708,15,0.897,17,2.176,18,0.014,19,1.17,20,0.538,21,1.305,26,2.094,31,0.335,33,0.441,35,1.16,36,0.946,39,0.067,40,0.003,45,1.091,50,2.025,56,0.946,57,0.83,63,0.005,64,0.005,68,2.577,78,1.8,80,0.866,93,0.946,94,0.797,102,2.356,104,0.866,106,0.83,110,1.618,112,0.806,114,1.16,119,1.16,184,2.469,195,1.309,201,0.567,208,3.591,214,1.416,220,4.189,221,4.189,222,3.366,223,3.366,224,4.29,228,4.932,230,2.919,237,3.366,238,2.307,239,4.326,240,1.416,241,4.367,242,3.706,243,4.367,244,4.367,245,1.416,246,4.367,247,4.367,253,3.799,254,3.799,255,3.799,256,3.223,257,1.416,258,1.416,260,0.633,263,1.416,271,0.904,273,1.416,279,1.416,282,4.799,343,1.304,404,1.16,425,1.098,428,1.098,480,2.923,532,1.95,559,1.864,560,1.11,561,1.199,562,1.405,564,1.711,565,2.712,566,1.542,569,1.819,570,1.711,572,1.785,573,1.416,574,1.711,576,1.042,577,1.711,579,1.042,580,1.711,582,1.542,583,1.542,584,2.512,585,2.512,592,1.232,593,1.542,598,1.711,600,1.711,602,1.542,603,1.542,604,1.542,605,1.232,608,1.542,609,3.179,610,1.542,688,2.307,690,2.919,691,2.539,692,2.476,694,2.934,695,3.344,696,1.316,698,4.065,699,2.608,706,2.143,708,1.316,765,1.542,776,2.307,777,1.711,778,1.967,779,1.967,780,1.967,781,1.542,782,1.967,783,1.967,784,1.967,785,1.967,786,1.967,787,1.967,788,1.967,789,1.967,790,1.967,791,1.967,792,1.542,793,1.542,794,1.967,795,1.967,796,1.967,797,1.967,798,1.967,799,1.967,800,1.711,801,1.967,802,1.711,803,1.967,804,1.967,805,1.967,806,1.967,807,1.967,808,1.967]],["title/modules/PlansModule.html",[127,1.615,141,2.668]],["body/modules/PlansModule.html",[3,0.148,4,0.148,5,0.131,18,0.014,19,0.873,31,0.397,33,0.974,39,0.148,40,0.007,63,0.01,64,0.01,106,2.438,127,2.63,129,2.189,130,2.561,131,2.904,132,2.904,133,2.561,134,3.224,135,2.422,140,4.644,141,5.141,143,4.644,145,3.865,146,2.904,147,2.904,149,3.408,150,2.719,151,1.504,157,3.776,160,3.776,198,1.911,331,2.904,339,4.676,340,4.676,586,3.619,612,3.865,695,2.088,696,2.904,704,3.865,708,3.865,767,4.16,776,4.676,792,3.404,809,4.341,810,4.341,811,4.341,812,4.341,813,4.16,814,4.341,815,4.16,816,4.341,817,3.404,818,4.341,819,4.341,820,3.776]],["title/injectables/PlansRepository.html",[0,0.773,815,2.872]],["body/injectables/PlansRepository.html",[0,0.806,2,0.985,3,0.093,4,0.093,5,0.083,8,0.182,9,1.495,12,1.495,15,1.095,17,2.657,18,0.014,19,1.429,20,0.537,21,1.594,26,2.507,31,0.347,33,0.614,39,0.093,40,0.005,45,1.01,50,2.12,51,1.753,57,1.154,63,0.007,64,0.007,68,2.771,78,1.997,94,1.108,102,2.755,112,0.864,151,0.948,184,2.47,195,1.171,203,1.258,260,0.88,271,1.258,343,1.336,347,1.97,348,4.574,358,1.97,364,2.992,366,3.147,480,2.972,483,2.774,559,1.91,560,1.44,561,1.554,562,1.44,568,2.779,569,2.183,572,1.204,576,2.201,579,2.201,592,1.713,632,2.379,633,2.451,691,2.602,692,2.972,694,2.829,695,3.473,696,1.83,700,2.779,702,3.614,703,3.614,705,2.992,709,3.939,764,2.145,781,3.258,793,2.145,815,2.992,817,2.145,821,2.379,822,5.023,823,2.735,824,2.735,825,2.735,826,2.735,827,2.735,828,3.614,829,2.735,830,2.735,831,4.154,832,2.735,833,4.154,834,2.735,835,2.735,836,4.154,837,2.735,838,2.145,839,2.735,840,2.735,841,2.735,842,4.154,843,2.735,844,4.154,845,4.154,846,4.154,847,2.735,848,2.735,849,2.735,850,2.735,851,2.735,852,2.145,853,2.735,854,2.735,855,2.735,856,2.735]],["title/injectables/PlansService.html",[0,0.773,813,2.872]],["body/injectables/PlansService.html",[0,0.588,2,0.662,3,0.063,4,0.063,5,0.056,8,0.123,9,1.091,12,1.091,15,0.972,17,2.359,18,0.014,19,1.232,20,0.462,21,1.374,26,2.126,28,1.555,31,0.314,33,0.413,39,0.063,40,0.005,45,1.21,50,1.972,56,3.176,57,2.883,63,0.005,64,0.005,68,2.545,69,1.152,78,1.769,80,0.81,93,2.719,94,1.818,102,2.618,112,0.869,181,0.449,184,2.654,195,1.446,260,0.592,271,0.846,305,0.716,343,0.975,366,1.899,368,3.232,377,1.324,380,2.184,396,1.23,397,1.23,403,3.232,404,2.283,409,4.07,421,4.07,422,4.095,423,4.07,425,1.692,428,2.771,444,1.23,465,1.692,480,2.378,483,2.457,527,1.335,532,1.861,559,1.394,560,1.051,561,1.134,562,1.341,568,2.029,569,1.747,572,1.335,573,1.324,576,1.606,579,1.606,592,1.152,605,1.152,633,1.085,644,1.324,645,1.6,646,1.6,649,1.6,650,1.6,654,2.378,655,2.378,657,1.6,659,1.442,660,1.442,662,1.442,663,1.442,664,1.442,666,2.378,667,3.034,681,1.442,690,2.786,691,2.424,692,3.67,694,2.263,695,3.506,699,3.416,700,3.003,704,1.23,705,1.324,706,2.029,709,4.8,763,1.442,765,3.034,781,2.378,792,1.442,793,1.442,813,2.184,817,1.442,828,2.638,857,1.6,858,5.652,859,3.032,860,1.839,861,1.839,862,1.839,863,1.839,864,1.839,865,1.839,866,1.839,867,1.839,868,1.839,869,1.839,870,1.839,871,3.869,872,3.032,873,1.442,874,1.839,875,1.839,876,1.839,877,1.839,878,1.839,879,1.839,880,1.839,881,1.839,882,1.839,883,1.839,884,4.488,885,3.032,886,1.839,887,3.032,888,1.839,889,2.638,890,1.839,891,3.032,892,3.032,893,1.839,894,1.839,895,3.366,896,1.6,897,1.839,898,1.6,899,2.029,900,2.638,901,2.029,902,2.638,903,2.029,904,2.638,905,2.638,906,2.029,907,2.638,908,1.839,909,1.839,910,3.032,911,1.839,912,1.839,913,1.839,914,1.839,915,1.6]],["title/classes/RefreshToken.html",[40,0.007,183,1.834]],["body/classes/RefreshToken.html",[3,0.162,4,0.162,5,0.144,8,0.317,15,0.945,18,0.014,20,0.561,31,0.306,39,0.231,40,0.008,45,0.856,51,3.027,62,4.005,63,0.01,64,0.01,100,2.288,110,1.706,112,0.821,151,1.648,179,1.422,181,0.908,183,3.496,185,3.619,186,4.137,191,4.798,193,3.424,197,3.597,198,2.7,199,2.654,200,2.353,201,1.371,202,2.654,208,2.82,337,3.597,633,2.806,726,4.798,916,4.889,917,3.424,918,6.133,919,4.755,920,7.172,921,4.755,922,4.755,923,4.137,924,4.137]],["title/classes/RefreshTokenDto.html",[40,0.007,293,2.872]],["body/classes/RefreshTokenDto.html",[3,0.197,4,0.197,5,0.175,8,0.386,15,1.068,18,0.013,20,0.523,39,0.197,40,0.01,63,0.012,64,0.012,112,0.793,179,1.73,181,1.026,183,3.411,293,4.99,337,3.93,726,4.636,925,6.453,926,5.034,927,5.787,928,5.787]],["title/injectables/RefreshTokenGuard.html",[0,0.773,264,2.872]],["body/injectables/RefreshTokenGuard.html",[0,1.344,2,2.083,3,0.197,4,0.197,5,0.175,7,4.538,12,2.67,15,0.892,18,0.014,31,0.345,33,1.298,35,3.414,36,2.784,39,0.197,40,0.01,41,3.625,42,5.034,44,3.871,63,0.012,64,0.012,191,3.871,264,4.99,929,6.028,930,5.787]],["title/injectables/RefreshTokenStrategy.html",[0,0.773,326,2.872]],["body/injectables/RefreshTokenStrategy.html",[0,1.088,2,1.495,3,0.141,4,0.141,5,0.126,8,0.277,9,2.019,12,2.019,15,0.865,17,2.099,18,0.014,19,1.129,20,0.424,21,1.259,26,1.495,31,0.379,33,0.932,36,1.999,39,0.191,40,0.007,41,2.603,44,2.779,45,1.01,50,1.387,51,1.753,54,3.753,56,1.999,57,1.753,62,2.451,63,0.009,64,0.009,67,2.992,68,2.201,69,3.514,75,4.261,77,5.333,79,4.399,80,1.829,81,3.614,82,4.399,83,2.992,84,3.614,85,3.258,93,2.699,94,1.683,95,3.614,97,3.614,98,3.614,99,3.614,100,1.999,118,2.992,119,2.451,153,5.388,154,2.779,183,2.921,191,2.779,228,4.261,239,4.399,248,2.451,250,2.779,272,3.614,314,4.585,315,3.258,325,4.04,326,4.04,731,3.614,931,4.981,932,4.154,933,5.61,934,4.154,935,4.154,936,4.154,937,4.154,938,4.154,939,4.154,940,4.154,941,4.154,942,4.154]],["title/classes/Routine.html",[40,0.007,943,3.127]],["body/classes/Routine.html",[3,0.139,4,0.139,5,0.124,8,0.273,15,1.124,18,0.014,19,1.269,20,0.597,31,0.314,39,0.215,40,0.007,45,0.738,51,3.311,63,0.009,64,0.009,110,1.967,112,0.92,151,1.421,179,1.226,181,0.823,184,2.36,187,4.587,195,1.317,197,3.862,198,2.447,199,2.288,202,2.288,203,2.556,206,2.742,207,2.418,463,3.181,483,3.353,532,3.035,759,4.359,760,4.003,762,3.483,763,3.214,766,3.214,943,4.947,944,2.952,945,6.308,946,7.071,947,4.099,948,4.099,949,4.099,950,4.099,951,4.099,952,4.099,953,3.566,954,4.099,955,3.214,956,3.566]],["title/controllers/RoutinesController.html",[104,1.756,957,2.872]],["body/controllers/RoutinesController.html",[3,0.207,4,0.207,5,0.184,18,0.014,31,0.304,33,1.367,39,0.207,40,0.01,63,0.012,64,0.012,104,3.145,106,2.572,957,5.145,958,5.3,959,6.093]],["title/modules/RoutinesModule.html",[127,1.615,142,2.668]],["body/modules/RoutinesModule.html",[3,0.184,4,0.184,5,0.163,18,0.014,31,0.359,33,1.211,39,0.184,40,0.009,63,0.011,64,0.011,106,2.803,127,2.915,129,2.721,130,3.184,131,3.61,132,3.61,133,3.184,134,4.016,135,3.012,142,5.252,145,4.444,146,3.61,147,3.61,149,3.184,957,5.182,960,4.694,961,4.694,962,5.252,963,5.397,964,5.397,965,5.397]],["title/injectables/RoutinesRepository.html",[0,0.773,966,3.127]],["body/injectables/RoutinesRepository.html",[0,1.394,2,2.215,3,0.209,4,0.209,5,0.186,18,0.013,31,0.307,33,1.381,39,0.209,40,0.01,63,0.012,64,0.012,966,5.635,967,5.353]],["title/injectables/RoutinesService.html",[0,0.773,962,2.668]],["body/injectables/RoutinesService.html",[0,1.394,2,2.215,3,0.209,4,0.209,5,0.186,18,0.013,31,0.307,33,1.381,39,0.209,40,0.01,63,0.012,64,0.012,962,4.808,968,5.353]],["title/classes/ShapeHistory.html",[40,0.007,969,2.668]],["body/classes/ShapeHistory.html",[3,0.137,4,0.137,5,0.122,8,0.269,15,1.035,18,0.014,20,0.579,28,2.618,31,0.311,39,0.213,40,0.007,45,0.725,51,3.233,63,0.009,64,0.009,100,1.937,110,1.868,151,1.396,179,1.204,181,0.813,185,3.962,187,4.457,197,3.723,198,2.418,199,2.248,200,2.435,201,1.161,202,3.066,203,1.852,207,2.376,208,3.088,236,3.441,451,3.557,633,2.376,726,5.274,969,4.182,970,5.061,971,2.9,972,5.265,973,5.51,974,5.265,975,5.265,976,4.027,977,4.027,978,5.493,979,5.493,980,4.027,981,4.027,982,4.027,983,4.027,984,4.027,985,4.027,986,3.503,987,4.027,988,2.9,989,3.503]],["title/classes/ShapeHistoryDto.html",[40,0.007,521,2.011]],["body/classes/ShapeHistoryDto.html",[3,0.165,4,0.165,5,0.146,8,0.323,15,1.113,18,0.014,20,0.545,31,0.309,39,0.165,40,0.01,63,0.01,64,0.01,110,2.009,179,1.448,181,0.919,200,2.587,201,1.397,298,3.592,302,3.592,305,1.884,451,3.288,492,3.887,521,3.129,726,5.11,972,5.37,973,5.37,974,5.37,975,5.37,990,6.495,991,4.213,992,4.843,993,4.843,994,6.848,995,4.843,996,4.843,997,4.843,998,7.222]],["title/modules/SharedModule.html",[127,1.615,143,2.498]],["body/modules/SharedModule.html",[3,0.191,4,0.191,5,0.17,18,0.014,19,1.129,31,0.365,33,1.259,39,0.191,40,0.009,63,0.011,64,0.011,106,2.368,127,2.755,129,2.829,134,3.131,135,3.131,143,4.261,149,3.31,150,3.515,151,1.944,198,2.47,331,3.753,483,2.58,762,4.261,999,5.61,1000,5.61,1001,5.61]],["title/classes/Training.html",[40,0.007,483,1.834]],["body/classes/Training.html",[3,0.12,4,0.12,5,0.106,8,0.235,15,1.102,18,0.014,20,0.591,21,1.122,31,0.29,39,0.198,40,0.006,45,0.633,51,3.219,63,0.008,64,0.008,100,2.406,110,1.989,112,0.921,151,1.22,179,1.052,181,0.74,185,4.219,187,4.544,195,1.451,197,3.788,198,2.201,199,1.964,200,2.532,201,1.015,202,1.964,203,2.299,207,2.076,208,3.288,465,3.535,483,3.076,503,3.968,527,3.391,532,1.693,546,3.133,699,3.246,759,3.921,762,2.205,766,2.76,899,4.237,901,4.237,903,3.891,906,4.237,1002,2.534,1003,5.001,1004,3.519,1005,3.519,1006,3.519,1007,3.519,1008,3.519,1009,3.519,1010,3.519,1011,3.519,1012,3.519,1013,3.519,1014,3.519,1015,3.519,1016,3.519,1017,3.061,1018,3.519,1019,3.061]],["title/classes/TrainingDto.html",[40,0.007,692,2.113]],["body/classes/TrainingDto.html",[3,0.133,4,0.133,5,0.118,8,0.261,15,1.188,18,0.014,19,1.24,20,0.556,21,1.684,31,0.268,39,0.133,40,0.009,63,0.009,64,0.009,110,2.144,112,0.898,179,1.171,181,0.798,195,1.286,200,2.697,201,1.129,296,3.179,298,3.544,301,3.438,302,3.611,304,3.708,305,1.524,464,4.121,465,3.438,466,4.121,469,4.225,471,2.82,478,3.516,479,4.831,487,4.121,503,3.375,506,2.62,523,3.88,692,2.855,699,3.438,899,4.121,901,4.121,903,4.121,906,4.121,1020,3.406,1021,3.916,1022,3.916,1023,3.916,1024,3.916,1025,3.916,1026,3.916,1027,3.916,1028,3.916,1029,3.916,1030,3.916,1031,3.916]],["title/classes/TrainingUpdateDto.html",[40,0.007,1032,2.872]],["body/classes/TrainingUpdateDto.html",[3,0.142,4,0.142,5,0.126,8,0.278,15,1.155,18,0.014,20,0.566,21,1.779,31,0.28,39,0.142,40,0.009,63,0.009,64,0.009,110,2.084,112,0.907,179,1.248,181,0.833,195,1.329,200,2.64,201,1.204,296,2.462,298,2.707,301,3.553,302,2.707,304,3.604,305,1.624,465,3.553,478,3.969,503,3.525,506,4.559,523,4.052,699,3.553,899,4.259,901,4.259,903,4.259,906,4.259,1032,4.052,1033,5.973,1034,3.63,1035,4.173,1036,4.173,1037,3.63,1038,4.173,1039,4.173,1040,4.173,1041,4.173,1042,4.173,1043,4.173]],["title/classes/UpdatePlanDto.html",[40,0.007,1044,3.127]],["body/classes/UpdatePlanDto.html",[3,0.146,4,0.146,5,0.13,8,0.286,15,1.139,18,0.014,19,1.299,20,0.558,21,1.787,31,0.322,39,0.146,40,0.01,63,0.01,64,0.01,110,2.056,112,0.877,179,1.283,181,0.849,184,2.415,195,1.347,200,2.614,201,1.237,301,3.603,304,3.315,305,1.669,337,3.42,451,3.037,463,3.255,477,3.809,478,3.996,482,3.364,483,2.969,484,3.364,490,3.732,491,3.732,492,3.591,506,2.87,1032,4.649,1033,3.364,1037,4.986,1044,4.495,1045,6.562,1046,4.29,1047,5.732,1048,4.29,1049,4.29,1050,4.29,1051,4.29]],["title/classes/User.html",[28,1.382,40,0.007]],["body/classes/User.html",[3,0.103,4,0.103,5,0.091,8,0.201,15,1.103,18,0.014,19,0.9,20,0.597,21,1.003,28,2.749,31,0.294,39,0.181,40,0.005,45,0.543,51,3.242,63,0.008,64,0.008,100,2.151,101,1.967,110,1.991,112,0.911,151,1.046,179,0.902,181,0.662,185,4.221,187,4.564,189,2.625,195,1.313,197,3.791,198,1.969,199,1.684,200,2.523,201,0.87,202,2.496,203,1.388,206,2.019,207,1.78,208,3.29,236,2.802,277,3.173,451,3.333,497,3.565,498,4.243,499,3.837,500,3.837,501,3.837,502,3.323,503,3.691,517,3.89,518,3.89,519,2.625,524,3.89,531,2.366,532,1.452,539,3.507,760,2.173,915,2.625,969,3.942,988,3.22,1052,2.173,1053,4.472,1054,3.017,1055,3.017,1056,3.017,1057,3.017,1058,4.472,1059,3.017,1060,3.017,1061,3.017,1062,3.89,1063,3.017,1064,3.017,1065,4.472,1066,3.017,1067,3.017,1068,3.89,1069,3.017,1070,4.635,1071,3.017,1072,2.366,1073,2.173,1074,2.625]],["title/classes/UserDto.html",[40,0.007,88,1.756]],["body/classes/UserDto.html",[3,0.133,4,0.133,5,0.118,8,0.261,15,1.174,18,0.014,20,0.575,21,1.209,31,0.307,39,0.133,40,0.009,63,0.009,64,0.009,88,2.372,101,2.056,110,2.119,112,0.898,179,1.171,181,0.798,195,1.286,200,2.671,201,1.129,277,3.107,291,3.071,296,2.31,298,3.664,299,3.605,301,3.007,302,3.611,304,3.544,305,1.524,451,2.855,467,2.453,476,3.375,477,3.179,478,2.855,487,4.121,492,3.375,497,4.121,498,4.436,499,4.436,500,4.436,501,4.436,502,3.346,503,3.375,504,3.406,506,2.62,523,3.88,969,4.121,1070,3.406,1075,3.406,1076,3.916,1077,3.916,1078,3.916,1079,3.916,1080,3.916,1081,3.916,1082,3.916,1083,3.916,1084,3.916,1085,3.916]],["title/controllers/UsersController.html",[104,1.756,1086,2.872]],["body/controllers/UsersController.html",[1,1.215,3,0.07,4,0.07,5,0.062,8,0.137,9,1.197,12,0.741,15,0.951,17,2.219,18,0.014,19,1.193,20,0.562,21,1.331,26,2.222,28,2.437,31,0.318,33,0.462,35,1.215,36,0.991,39,0.07,40,0.003,45,0.598,50,2.06,56,1.6,57,1.403,63,0.006,64,0.006,68,2.641,71,1.962,78,1.864,80,0.906,86,1.149,88,2.611,92,1.615,93,0.991,94,0.834,101,1.396,102,2.5,104,0.906,106,0.869,110,1.717,112,0.863,114,1.215,195,1.397,201,0.594,208,3.647,214,1.483,220,4.444,221,4.444,222,3.458,223,3.458,224,4.46,230,3.458,237,3.012,238,2.395,240,1.483,241,4.59,242,3.795,243,4.59,244,4.59,245,1.483,246,4.59,247,4.444,253,3.993,254,3.993,255,3.993,256,3.301,257,1.483,258,1.483,260,0.662,263,1.483,271,0.947,273,1.483,279,4.27,343,1.07,404,1.215,428,1.856,494,2.985,502,2.421,521,2.421,532,2.012,560,1.664,561,1.244,562,1.449,565,2.798,566,1.615,576,1.091,579,1.091,582,1.615,583,1.615,584,1.615,585,2.607,593,1.615,597,1.791,602,1.615,603,1.615,604,1.615,605,1.29,606,1.791,608,1.615,609,1.615,610,1.615,710,2.395,712,2.083,713,2.083,714,2.083,715,2.62,716,1.483,760,1.483,1086,2.395,1087,1.791,1088,1.615,1089,2.059,1090,2.059,1091,1.615,1092,2.059,1093,2.059,1094,1.615,1095,2.059,1096,2.059,1097,2.059,1098,2.059,1099,1.615,1100,2.059,1101,2.059,1102,2.059,1103,2.059,1104,2.059,1105,2.059,1106,1.615,1107,2.059,1108,2.059,1109,2.059,1110,1.615,1111,2.059,1112,2.059,1113,2.059,1114,2.059,1115,2.059,1116,2.059,1117,2.059,1118,1.791,1119,2.059,1120,2.059,1121,2.059,1122,2.059,1123,2.059,1124,2.059,1125,2.059,1126,2.059,1127,2.059]],["title/modules/UsersModule.html",[127,1.615,144,2.498]],["body/modules/UsersModule.html",[3,0.17,4,0.17,5,0.151,18,0.014,19,1.003,28,1.728,31,0.394,33,1.119,39,0.17,40,0.008,63,0.011,64,0.011,73,3.73,86,3.875,106,2.668,127,2.561,129,2.515,134,2.783,135,2.783,144,3.961,149,2.942,150,3.124,151,1.728,198,2.196,331,3.336,339,4.553,340,4.553,716,3.591,720,4.645,1073,4.553,1086,5,1110,3.911,1128,4.987,1129,4.987,1130,4.987,1131,3.911,1132,4.553,1133,4.987,1134,4.987]],["title/injectables/UsersRepository.html",[0,0.773,1132,2.872]],["body/injectables/UsersRepository.html",[0,0.831,2,1.026,3,0.097,4,0.097,5,0.086,8,0.19,9,1.542,12,1.542,15,1.106,17,2.636,18,0.014,19,1.418,20,0.532,21,1.581,26,2.536,28,2.236,31,0.321,33,0.639,39,0.097,40,0.005,45,0.513,50,1.912,51,1.202,63,0.007,64,0.007,68,2.783,78,2.01,88,2.522,94,1.154,100,1.371,101,1.719,102,2.854,112,0.901,151,0.987,195,1.521,203,1.31,260,0.917,271,1.31,343,1.378,347,2.052,348,4.646,358,2.052,363,2.479,364,4.125,366,3.226,444,1.906,494,3.034,497,2.867,502,2.888,521,2.888,560,1.985,561,1.603,562,1.485,576,2.27,579,2.27,630,2.479,631,2.479,633,3.623,679,2.867,712,2.684,713,2.684,714,2.684,715,2.684,716,2.052,718,2.867,852,2.234,972,2.234,973,2.234,974,2.234,975,2.234,1072,2.234,1088,3.36,1091,3.36,1094,3.36,1099,3.36,1106,3.36,1131,2.234,1132,3.086,1135,2.479,1136,2.849,1137,2.849,1138,3.727,1139,2.849,1140,2.849,1141,2.849,1142,2.849,1143,2.849,1144,2.849,1145,2.849,1146,2.849,1147,2.849,1148,2.849,1149,2.849,1150,2.479,1151,2.479,1152,2.479,1153,2.849]],["title/injectables/UsersService.html",[0,0.773,73,2.353]],["body/injectables/UsersService.html",[0,0.571,2,0.639,3,0.06,4,0.06,5,0.054,8,0.118,9,1.06,12,1.06,15,1.026,17,2.391,18,0.014,19,1.286,20,0.483,21,1.434,26,2.3,28,2.546,31,0.277,33,0.398,39,0.06,40,0.005,45,1.266,50,2.18,51,1.243,56,3.256,57,3,63,0.005,64,0.005,68,2.651,69,1.112,71,1.737,73,1.737,78,1.874,80,0.781,88,2.312,93,2.113,94,1.779,100,0.854,101,1.626,102,2.85,112,0.86,181,0.436,195,1.522,197,1.999,260,0.571,271,0.816,277,0.895,299,1.188,305,0.691,343,0.947,366,3.051,368,3.163,377,1.278,380,2.121,396,1.188,397,1.188,403,2.718,404,1.047,409,4.193,413,1.392,415,1.392,421,4.193,422,4.167,423,4.35,425,1.644,428,2.106,444,1.97,494,2.327,502,2.215,521,2.649,532,2.677,560,1.522,561,1.102,562,1.021,576,1.56,579,1.56,605,1.112,648,1.544,654,2.309,655,2.959,659,2.309,660,1.392,662,1.392,663,1.392,664,1.392,666,1.392,667,3.444,679,1.97,712,1.845,713,1.845,714,1.845,715,1.845,718,2.938,720,1.188,1088,2.309,1091,2.309,1094,2.309,1099,2.309,1106,2.309,1110,1.392,1118,1.544,1131,1.392,1138,2.562,1150,1.544,1151,1.544,1152,1.544,1154,1.544,1155,2.945,1156,2.945,1157,2.945,1158,1.775,1159,1.775,1160,1.775,1161,1.775,1162,1.775,1163,1.775,1164,1.775,1165,2.945,1166,1.775,1167,2.945,1168,1.775,1169,2.945,1170,1.775,1171,1.775,1172,2.945,1173,1.775,1174,1.544,1175,1.392,1176,1.775,1177,1.775,1178,2.945,1179,2.945,1180,1.775,1181,1.775,1182,1.775,1183,1.775,1184,1.775,1185,2.945,1186,1.775,1187,1.775,1188,1.775,1189,1.775,1190,1.775,1191,1.775,1192,1.775,1193,1.775,1194,1.775,1195,1.775,1196,2.945,1197,1.775,1198,1.775,1199,1.775,1200,1.775,1201,1.775,1202,1.775,1203,1.775,1204,1.775,1205,1.775,1206,1.775,1207,1.775,1208,2.945,1209,1.775,1210,1.775,1211,1.775,1212,1.775,1213,1.775,1214,1.775,1215,1.775,1216,1.775,1217,1.775,1218,3.774,1219,1.775,1220,1.775,1221,1.775,1222,1.775,1223,1.775,1224,1.775,1225,1.775,1226,1.775,1227,1.775]],["title/coverage.html",[1228,4.278]],["body/coverage.html",[0,1.401,1,1.179,5,0.06,6,1.739,7,2.545,18,0.014,20,0.151,28,0.693,37,1.567,40,0.012,57,0.844,63,0.005,64,0.005,65,1.439,66,2.545,67,3.398,71,1.179,73,1.179,75,1.252,86,1.115,88,0.88,90,1.439,104,2.447,105,1.439,107,1.739,114,3.456,120,1.252,133,1.179,174,1.739,178,1.179,180,2.338,183,0.919,193,1.439,210,1.439,212,1.439,213,1.739,218,1.337,224,1.252,233,1.059,248,1.179,249,1.337,251,1.439,253,1.252,254,1.252,255,1.252,256,1.252,261,1.567,264,1.439,266,1.439,288,1.739,293,1.439,314,1.252,316,1.439,318,1.337,325,1.439,326,1.439,328,1.439,329,1.439,342,1.739,359,1.337,367,1.739,405,1.567,425,4.663,460,1.059,461,1.739,462,1.739,480,1.059,481,1.739,482,2.545,483,0.919,494,1.059,495,1.739,496,1.739,521,1.008,527,0.88,528,2.338,547,1.439,549,1.008,550,1.739,557,1.439,558,1.739,565,1.337,569,0.778,586,1.252,587,1.337,589,1.439,612,1.337,615,1.337,617,1.439,620,1.739,627,1.337,634,1.739,642,1.567,644,1.439,668,1.683,670,2.545,671,0.844,672,1.567,673,2.545,674,2.545,677,1.567,678,1.739,683,2.545,685,1.567,686,2.545,687,2.545,688,1.439,689,2.545,692,1.059,694,1.008,695,0.962,697,1.567,700,1.337,701,2.545,704,1.337,706,1.337,707,2.545,708,1.337,710,1.439,711,2.545,717,1.567,718,1.337,719,2.545,720,1.337,721,2.545,722,1.739,723,1.739,727,1.739,728,1.739,730,2.545,742,1.739,745,1.739,749,2.338,762,1.252,767,1.439,769,1.739,776,1.439,777,1.739,813,1.439,815,1.439,821,1.739,838,1.567,857,1.739,873,1.567,916,2.338,917,2.338,925,1.739,926,1.739,929,1.739,931,2.545,943,1.567,944,2.338,955,1.567,957,1.439,958,1.739,962,1.337,966,1.567,967,1.739,968,1.739,969,1.337,970,2.338,971,2.338,988,1.439,990,1.739,991,1.739,1002,2.338,1020,1.739,1032,1.439,1033,1.567,1034,1.739,1044,1.567,1045,1.739,1052,2.338,1073,1.439,1075,1.739,1086,1.439,1087,1.739,1132,1.439,1135,1.739,1154,1.739,1175,1.567,1228,1.567,1229,1.999,1230,1.999,1231,1.999,1232,5.857,1233,3.246,1234,1.739,1235,8.03,1236,4.718,1237,5.857,1238,7.958,1239,6.103,1240,1.999,1241,2.824,1242,1.739,1243,5.857,1244,5.857,1245,1.739,1246,4.099,1247,1.739,1248,1.739,1249,4.718,1250,1.739,1251,1.739,1252,1.739,1253,5.095,1254,5.095,1255,1.739,1256,1.739,1257,1.739,1258,4.718,1259,1.999,1260,1.739,1261,1.999,1262,1.999]],["title/dependencies.html",[130,2.832,1263,2.891]],["body/dependencies.html",[18,0.014,33,1.18,34,4.574,36,2.529,40,0.009,54,3.518,63,0.011,64,0.011,83,5.122,119,3.102,130,3.102,151,1.822,154,3.518,201,1.516,203,2.418,305,2.046,310,4.574,312,4.123,735,4.123,1174,4.574,1264,7.113,1265,5.258,1266,5.258,1267,5.258,1268,5.258,1269,5.258,1270,5.258,1271,5.258,1272,5.258,1273,5.258,1274,5.258,1275,5.258,1276,5.258,1277,5.258,1278,5.258,1279,5.258,1280,5.258,1281,5.258,1282,5.258,1283,5.258,1284,5.258,1285,5.258,1286,5.258,1287,5.258,1288,5.258,1289,5.258]],["title/miscellaneous/functions.html",[1290,2.082,1291,4.175]],["body/miscellaneous/functions.html",[8,0.422,18,0.012,63,0.012,64,0.012,133,4.541,1234,5.5,1290,3.961,1291,5.5,1292,6.323]],["title/index.html",[8,0.222,1293,3.324,1294,3.324]],["body/index.html",[18,0.013,63,0.009,64,0.009,101,1.226,203,1.689,735,4.042,1228,2.881,1295,3.674,1296,3.674,1297,5.155,1298,5.18,1299,5.18,1300,5.18,1301,3.674,1302,3.674,1303,3.674,1304,3.674,1305,7.608,1306,3.674,1307,3.674,1308,3.674,1309,3.674,1310,4.484,1311,3.674,1312,4.484,1313,3.674,1314,3.674,1315,3.674,1316,3.674,1317,3.674,1318,3.674,1319,3.674,1320,6.456,1321,4.484,1322,5.914,1323,4.484,1324,5.18,1325,4.484,1326,3.674,1327,3.674,1328,5.955,1329,5.955,1330,5.155,1331,5.155,1332,5.155,1333,3.674,1334,5.155,1335,6.799,1336,5.155,1337,5.155,1338,3.674,1339,3.674,1340,5.155,1341,3.674,1342,5.155,1343,3.674,1344,3.674,1345,3.674,1346,3.674,1347,3.196,1348,3.674,1349,3.674,1350,3.196,1351,3.674,1352,3.674,1353,3.196,1354,3.674,1355,3.674,1356,3.674,1357,3.674,1358,3.674,1359,3.674,1360,5.155,1361,5.955,1362,6.456,1363,5.155,1364,5.155,1365,3.674,1366,3.674,1367,3.674,1368,3.674,1369,3.674,1370,7.239,1371,3.674,1372,3.674,1373,3.674,1374,3.674,1375,3.674,1376,3.674,1377,3.674,1378,3.674,1379,3.674,1380,3.674,1381,3.674,1382,3.674,1383,3.674,1384,3.674,1385,3.674,1386,3.674,1387,3.674,1388,3.674,1389,3.674,1390,7.049,1391,3.674,1392,3.674,1393,5.155,1394,3.674,1395,3.674,1396,3.674,1397,3.674,1398,5.155,1399,5.155,1400,5.155,1401,5.155,1402,3.674,1403,3.674,1404,3.674,1405,3.674,1406,3.674,1407,5.155,1408,5.155,1409,3.674,1410,3.674,1411,3.674,1412,3.674,1413,3.196,1414,3.196,1415,3.196,1416,3.674,1417,3.674,1418,3.674,1419,3.674,1420,3.674,1421,3.674]],["title/modules.html",[129,2.751]],["body/modules.html",[18,0.012,63,0.012,64,0.012,128,4.193,129,2.936,139,3.896,140,3.648,141,3.896,142,3.896,143,3.648,144,3.648,1422,7.705,1423,7.705,1424,7.705,1425,8.078,1426,7.438,1427,7.438]],["title/overview.html",[1428,4.746]],["body/overview.html",[2,1.781,18,0.014,63,0.011,64,0.011,106,2.088,120,4.333,127,2.004,128,5.942,129,2.495,130,2.919,131,3.31,132,3.31,133,2.919,134,2.761,135,2.761,136,4.303,137,4.303,138,4.303,139,5.027,140,4.56,141,5.221,142,5.027,143,4.56,144,4.56,145,4.208,146,3.31,147,3.31,179,1.479,669,2.004,960,4.303,961,4.303,962,4.627,1068,4.303,1428,4.303,1429,4.947,1430,4.947,1431,4.947,1432,4.947]],["title/properties.html",[181,0.711,1263,2.891]],["body/properties.html",[18,0.013,63,0.012,64,0.012,181,0.876,208,2.721,1298,5.147,1299,5.147,1300,5.147,1312,5.147,1321,5.147,1322,5.147,1323,5.147,1324,5.147,1325,5.147,1347,5.147,1350,5.147,1353,5.147,1413,5.147,1414,5.147,1415,5.147,1433,5.917,1434,5.917,1435,5.917,1436,5.917,1437,5.917,1438,5.917,1439,5.917]],["title/miscellaneous/typealiases.html",[1290,2.082,1440,4.8]],["body/miscellaneous/typealiases.html",[8,0.38,18,0.012,20,0.43,63,0.012,64,0.012,180,4.103,205,4.944,528,4.103,545,5.383,749,4.103,764,5.383,916,4.103,917,4.944,923,5.972,944,4.103,953,5.972,970,4.103,971,4.944,986,5.972,1002,4.103,1017,5.972,1052,4.103,1072,5.383,1290,3.569,1441,5.697,1442,4.956,1443,4.956,1444,4.956,1445,4.956,1446,4.956,1447,4.956,1448,4.956,1449,4.956]],["title/miscellaneous/variables.html",[1290,2.082,1450,4.175]],["body/miscellaneous/variables.html",[8,0.122,18,0.014,19,1.133,20,0.561,28,1.043,37,2.36,45,0.328,46,1.585,50,1.776,51,0.769,57,0.769,63,0.005,64,0.005,66,1.429,67,3.215,68,0.632,78,0.472,86,2.146,88,0.802,90,2.769,101,0.608,102,0.738,112,0.868,114,3.472,180,1.312,184,1.991,193,2.167,195,0.932,210,2.167,211,1.585,224,1.886,228,1.142,248,2.268,253,1.886,254,1.886,255,1.886,256,1.886,261,2.36,277,0.919,318,2.572,325,2.769,328,2.769,337,0.966,396,5.272,397,5.283,405,2.36,413,1.429,415,1.429,418,1.585,422,1.219,425,1.68,428,1.017,463,2.839,464,1.219,465,2.146,466,1.219,483,2.806,497,1.219,498,1.312,499,1.312,500,1.312,501,1.312,502,0.919,527,1.325,528,1.312,546,1.142,547,2.167,548,1.585,549,0.919,565,2.014,569,0.709,572,1.965,586,2.409,615,2.572,619,1.585,633,2.915,642,2.36,644,2.167,670,1.429,672,3.015,673,1.429,674,1.429,681,2.36,682,2.618,683,1.429,685,3.015,686,1.429,687,1.429,689,1.429,692,0.966,694,0.919,695,1.448,697,3.015,699,1.68,701,1.429,704,2.572,705,1.312,707,1.429,708,2.572,711,1.429,717,3.015,719,1.429,720,2.572,721,1.429,730,1.429,749,1.312,758,1.585,762,1.886,767,2.167,768,1.585,800,2.618,802,1.585,820,1.585,838,2.36,852,2.36,873,2.36,889,1.585,895,2.618,896,5.12,898,1.585,899,2.014,900,2.618,901,2.014,902,2.618,903,2.014,904,2.618,905,2.618,906,2.014,907,2.618,916,1.312,917,2.167,924,1.585,931,1.429,944,1.312,955,2.36,956,1.585,970,1.312,971,2.167,988,2.167,989,1.585,1002,1.312,1019,1.585,1052,1.312,1062,3.344,1073,2.167,1074,1.585,1175,2.36,1241,1.585,1242,1.585,1245,1.585,1247,1.585,1248,2.618,1250,1.585,1251,1.585,1252,2.618,1253,1.585,1254,5.12,1255,2.618,1256,1.585,1257,2.618,1260,1.585,1290,1.142,1310,1.585,1442,1.585,1443,1.585,1444,1.585,1445,2.618,1446,1.585,1447,1.585,1448,1.585,1449,1.585,1450,1.585,1451,1.823,1452,1.823,1453,1.823,1454,1.823,1455,5.629,1456,1.823,1457,1.823,1458,1.823,1459,1.823,1460,1.823,1461,1.823,1462,3.01,1463,1.823,1464,1.823,1465,1.823,1466,1.823,1467,1.823,1468,1.823,1469,1.823,1470,1.823,1471,1.823,1472,1.823,1473,1.823,1474,1.823,1475,1.823,1476,1.823,1477,1.823,1478,1.823,1479,1.823,1480,3.01,1481,3.845,1482,3.01,1483,1.823,1484,1.823,1485,1.823,1486,1.823,1487,1.823,1488,1.823,1489,3.01,1490,1.823,1491,1.823,1492,1.823,1493,3.01,1494,1.823,1495,1.823,1496,1.823,1497,4.941,1498,3.01,1499,1.823,1500,1.823,1501,1.823,1502,1.823,1503,1.823,1504,1.823,1505,1.823,1506,1.823,1507,1.823,1508,1.823,1509,1.823,1510,1.823,1511,1.823,1512,1.823,1513,1.823,1514,1.823,1515,1.823,1516,1.823,1517,3.01,1518,1.823,1519,1.823,1520,1.823,1521,1.823,1522,1.823,1523,1.823,1524,1.823,1525,1.823,1526,1.823,1527,1.823,1528,1.823,1529,1.823,1530,1.823,1531,1.823,1532,1.823,1533,1.823,1534,1.823,1535,1.823,1536,1.823,1537,1.823,1538,3.01]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1434,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1258,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1259,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1232,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1243,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":896,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["10.0.3",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["14",{"_index":1432,"title":{},"body":{"overview.html":{}}}],["16.1.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":1430,"title":{},"body":{"overview.html":{}}}],["2.3.2",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":1431,"title":{},"body":{"overview.html":{}}}],["24",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["3.0.2",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["30d",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["6",{"_index":1068,"title":{},"body":{"classes/User.html":{},"overview.html":{}}}],["6.3.0",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["7",{"_index":1429,"title":{},"body":{"overview.html":{}}}],["7.1.1",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["9.0.0",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["9.4.0",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":633,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["academia",{"_index":1313,"title":{},"body":{"index.html":{}}}],["access_token_strategy",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":182,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":65,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["according",{"_index":978,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["acesse",{"_index":1330,"title":{},"body":{"index.html":{}}}],["activation",{"_index":1053,"title":{},"body":{"classes/User.html":{}}}],["active",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["addexercise",{"_index":822,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addexercise(planid",{"_index":824,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addorupdatetraining",{"_index":690,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["addorupdatetraining(id",{"_index":778,"title":{},"body":{"controllers/PlansController.html":{}}}],["addorupdatetraining(planid",{"_index":860,"title":{},"body":{"injectables/PlansService.html":{}}}],["adicione",{"_index":1378,"title":{},"body":{"index.html":{}}}],["age",{"_index":972,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["age'})@prop({type",{"_index":976,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["aggregate(pipeline",{"_index":845,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["aliases",{"_index":1441,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowdiskuse(false",{"_index":846,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["already",{"_index":1189,"title":{},"body":{"injectables/UsersService.html":{}}}],["alteredtraining",{"_index":891,"title":{},"body":{"injectables/PlansService.html":{}}}],["alteredtraining.push",{"_index":908,"title":{},"body":{"injectables/PlansService.html":{}}}],["além",{"_index":1314,"title":{},"body":{"index.html":{}}}],["ambiente",{"_index":1364,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":741,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["api",{"_index":1353,"title":{},"body":{"index.html":{},"properties.html":{}}}],["api.gitinstale",{"_index":1367,"title":{},"body":{"index.html":{}}}],["api.onrender.com/swagger",{"_index":1344,"title":{},"body":{"index.html":{}}}],["api/back",{"_index":1296,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":585,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":200,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isarray()@isoptional",{"_index":489,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["apiproperty()@isdate()@isdefined()@isnotempty",{"_index":992,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isdate()@isnotempty()@isdefined",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isdefined()@isarray()@arraynotempty",{"_index":467,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isboolean",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isdate",{"_index":1078,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isjwt()@isstring",{"_index":289,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@ismongoid()@isstring",{"_index":296,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring",{"_index":487,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring()@isemail",{"_index":291,"title":{},"body":{"classes/AuthDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isstring()@isnotempty()@isdefined",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isboolean",{"_index":1021,"title":{},"body":{"classes/TrainingDto.html":{}}}],["apiproperty()@isnumber()@isdefined()@isnotempty",{"_index":994,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isobject",{"_index":294,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isoptional()@isarray",{"_index":1047,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isboolean",{"_index":1035,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["apiproperty()@isoptional()@isdate",{"_index":484,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@ismongoid()@isstring",{"_index":1037,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined",{"_index":471,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined()@minlength(6",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":473,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{}}}],["apiproperty()@isstring()@isurl()@isoptional",{"_index":469,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty({description",{"_index":185,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["apitags",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exercises",{"_index":595,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["apitags('plans",{"_index":796,"title":{},"body":{"controllers/PlansController.html":{}}}],["apitags('users",{"_index":1113,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["aplicação",{"_index":1299,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app.controller",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":105,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":128,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":120,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arquivo",{"_index":1376,"title":{},"body":{"index.html":{}}}],["arr",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["arr.foreach((obj",{"_index":1194,"title":{},"body":{"injectables/UsersService.html":{}}}],["arrayelemat",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraynotempty",{"_index":476,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["async",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["atlasconnection",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["atlasconnection}/${configservice.get('mongo_db",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":178,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["auth.controller",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":728,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.model",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["auth.name",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.repository",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["auth/auth.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/access",{"_index":593,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["auth_controller",{"_index":672,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_repository",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_service",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/IAuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":212,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdocument",{"_index":205,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["authdocument.accesstoken",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.email",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.refreshtoken",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.userid",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto",{"_index":233,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":35,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{}}}],["authguard('jwt",{"_index":42,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('local",{"_index":729,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":139,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1413,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authrepository",{"_index":316,"title":{"injectables/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"coverage.html":{}}}],["authschema",{"_index":210,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":314,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["available",{"_index":1427,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["avatar'})@prop({type",{"_index":1056,"title":{},"body":{"classes/User.html":{}}}],["await",{"_index":102,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["back",{"_index":1348,"title":{},"body":{"index.html":{}}}],["bad",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request_400",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bad_request_400})@apinotfoundresponse({description",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`delete",{"_index":1221,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`disable",{"_index":1227,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`enable",{"_index":1224,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`invalid",{"_index":654,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`update",{"_index":666,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":1217,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(error.message",{"_index":663,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(errors",{"_index":660,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["banco",{"_index":1328,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(passwordlogin",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(password",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["belongs",{"_index":884,"title":{},"body":{"injectables/PlansService.html":{}}}],["birth",{"_index":1058,"title":{},"body":{"classes/User.html":{}}}],["birthdate",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["bmi",{"_index":973,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["body",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["body('exerciseid",{"_index":807,"title":{},"body":{"controllers/PlansController.html":{}}}],["boolean",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breve",{"_index":1399,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1425,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1422,"title":{},"body":{"modules.html":{}}}],["buildparams",{"_index":644,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildparams(params",{"_index":649,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["buildtestes",{"_index":1405,"title":{},"body":{"index.html":{}}}],["calculation",{"_index":987,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["calculation'})@prop({type",{"_index":980,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["canactivate",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["canactivate(context",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["catch",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":1216,"title":{},"body":{"injectables/UsersService.html":{}}}],["characters",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["class",{"_index":40,"title":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":179,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["clone",{"_index":1361,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_imports",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_plansmodule",{"_index":809,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_plansmodule_imports",{"_index":810,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_routinesmodule",{"_index":960,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_routinesmodule_providers",{"_index":961,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["collection",{"_index":206,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{}}}],["com",{"_index":1320,"title":{},"body":{"index.html":{}}}],["comparepasswords",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepasswords(password",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc",{"_index":1340,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1402,"title":{},"body":{"index.html":{}}}],["concat",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cond",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('environment_local",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":936,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('mongo_atlas",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mongo_local",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":45,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(auth_service",{"_index":736,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(authservice",{"_index":731,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(model",{"_index":347,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{}}}],["constructor(reflector",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["constructor(repository",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["construída",{"_index":1435,"title":{},"body":{"properties.html":{}}}],["content",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context.getclass",{"_index":49,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context.gethandler",{"_index":48,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["control",{"_index":1003,"title":{},"body":{"classes/Training.html":{}}}],["controle",{"_index":1304,"title":{},"body":{"index.html":{}}}],["controller",{"_index":104,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exercises",{"_index":594,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["controller('plans",{"_index":795,"title":{},"body":{"controllers/PlansController.html":{}}}],["controller('users",{"_index":1112,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1228,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":343,"title":{},"body":{"injectables/AuthRepository.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":606,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["create(auth",{"_index":350,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["create(exercise",{"_index":563,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["create(plan",{"_index":781,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["create(user",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":758,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["created_201",{"_index":565,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createexercisedto",{"_index":460,"title":{"classes/CreateExerciseDto.html":{}},"body":{"classes/CreateExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["createplandto",{"_index":480,"title":{"classes/CreatePlanDto.html":{}},"body":{"classes/CreatePlanDto.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":494,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["crie",{"_index":1373,"title":{},"body":{"index.html":{}}}],["current",{"_index":912,"title":{},"body":{"injectables/PlansService.html":{}}}],["currentdate",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentdate.gettime",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["d",{"_index":1404,"title":{},"body":{"index.html":{}}}],["da",{"_index":1298,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dados",{"_index":1329,"title":{},"body":{"index.html":{}}}],["data",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{}}}],["data.email",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.pipeline",{"_index":840,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["data.pipeline.ts",{"_index":1248,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data.refreshtoken.refreshtoken",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.userid",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["date'})@prop({type",{"_index":1059,"title":{},"body":{"classes/User.html":{}}}],["date(shape.age",{"_index":1204,"title":{},"body":{"injectables/UsersService.html":{}}}],["de",{"_index":1305,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["decodedrefreshtoken",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedrefreshtoken.exp",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken(token",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator/public.decorator",{"_index":38,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["decorators",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":679,"title":{},"body":{"interfaces/IDefaultController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete(id",{"_index":1138,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["demonstração",{"_index":1315,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":130,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependências",{"_index":1368,"title":{},"body":{"index.html":{}}}],["description",{"_index":208,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["descrição",{"_index":1295,"title":{},"body":{"index.html":{}}}],["desejado",{"_index":1388,"title":{},"body":{"index.html":{}}}],["desenho",{"_index":1356,"title":{},"body":{"index.html":{}}}],["desenvolvida",{"_index":1319,"title":{},"body":{"index.html":{}}}],["development",{"_index":1389,"title":{},"body":{"index.html":{}}}],["diagramação",{"_index":1355,"title":{},"body":{"index.html":{}}}],["diretório",{"_index":1375,"title":{},"body":{"index.html":{}}}],["disable",{"_index":712,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disable(@param('id",{"_index":1126,"title":{},"body":{"controllers/UsersController.html":{}}}],["disable(id",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disabled",{"_index":1226,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IDefaultController.html":{}}}],["docker",{"_index":1398,"title":{},"body":{"index.html":{}}}],["document",{"_index":202,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["documentation",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["documentation/index.html",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["documentação",{"_index":1335,"title":{},"body":{"index.html":{}}}],["done",{"_index":906,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["done'})@prop({type",{"_index":1004,"title":{},"body":{"classes/Training.html":{}}}],["dotenv",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{}}}],["draw",{"_index":1331,"title":{},"body":{"index.html":{}}}],["dtos/auth.dto",{"_index":360,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{}}}],["dtos/dtos",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":1310,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["e._id",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1409,"title":{},"body":{"index.html":{}}}],["elemmatch",{"_index":909,"title":{},"body":{"injectables/PlansService.html":{}}}],["em",{"_index":1322,"title":{},"body":{"index.html":{},"properties.html":{}}}],["email",{"_index":101,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email'})@prop({type",{"_index":189,"title":{},"body":{"classes/Auth.html":{},"classes/User.html":{}}}],["enable",{"_index":713,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enable(@param('id",{"_index":1123,"title":{},"body":{"controllers/UsersController.html":{}}}],["enable(id",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enabled",{"_index":1223,"title":{},"body":{"injectables/UsersService.html":{}}}],["end",{"_index":1297,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1341,"title":{},"body":{"index.html":{}}}],["env",{"_index":1377,"title":{},"body":{"index.html":{}}}],["environment_local='development",{"_index":1383,"title":{},"body":{"index.html":{}}}],["eq",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["error",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["error.constraints",{"_index":1212,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors",{"_index":657,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["errors.length",{"_index":659,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["errors.map((error",{"_index":1211,"title":{},"body":{"injectables/UsersService.html":{}}}],["estrutura",{"_index":1338,"title":{},"body":{"index.html":{}}}],["estática",{"_index":1337,"title":{},"body":{"index.html":{}}}],["evolução",{"_index":1308,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1372,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["execução",{"_index":1316,"title":{},"body":{"index.html":{}}}],["exercise",{"_index":527,"title":{"classes/Exercise.html":{}},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercise'})@prop({type",{"_index":541,"title":{},"body":{"classes/Exercise.html":{}}}],["exercise.focusmuscle",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.id",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.image",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.length",{"_index":601,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["exercise.model",{"_index":591,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"interfaces/IExercisesController.html":{}}}],["exercise.name",{"_index":619,"title":{},"body":{"modules/ExercisesModule.html":{},"miscellaneous/variables.html":{}}}],["exercise.notes",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.video",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedatapipeline",{"_index":838,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisedatapipeline('_id",{"_index":847,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedatapipeline('userid",{"_index":843,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedetails",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails._id",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.focusmuscle",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.image",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.name",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.notes",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.video",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedocument",{"_index":545,"title":{},"body":{"classes/Exercise.html":{},"injectables/ExercisesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["exercisedto",{"_index":549,"title":{"classes/ExerciseDto.html":{}},"body":{"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseexists",{"_index":910,"title":{},"body":{"injectables/PlansService.html":{}}}],["exercisefocusmuscle",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exerciseid",{"_index":699,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["exerciseimage",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisename",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercises",{"_index":546,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["exercises.controller",{"_index":614,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.dto.ts",{"_index":462,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["exercises.dto.ts:17",{"_index":472,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:23",{"_index":468,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:29",{"_index":470,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:35",{"_index":475,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:40",{"_index":474,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.length",{"_index":651,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.map((exe",{"_index":652,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.repository",{"_index":618,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.service",{"_index":613,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises/exercises.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["exercises/exercises.service",{"_index":818,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises/interfaces/exercises.service.interface",{"_index":819,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises_controller",{"_index":685,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_repository",{"_index":615,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_service",{"_index":586,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"interfaces/IExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseschema",{"_index":547,"title":{},"body":{"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisescontroller",{"_index":557,"title":{"controllers/ExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"coverage.html":{}}}],["exercisesmodule",{"_index":140,"title":{"modules/ExercisesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["exercisesrepository",{"_index":617,"title":{"injectables/ExercisesRepository.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["exercisesservice",{"_index":612,"title":{"injectables/ExercisesService.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["exercisevideo",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercícios",{"_index":1317,"title":{},"body":{"index.html":{}}}],["existing",{"_index":756,"title":{},"body":{"classes/Plan.html":{}}}],["existingtraining",{"_index":871,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining.findindex",{"_index":893,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining[existingtrainingindex",{"_index":897,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtrainingindex",{"_index":892,"title":{},"body":{"injectables/PlansService.html":{}}}],["existis",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1190,"title":{},"body":{"injectables/UsersService.html":{}}}],["exp",{"_index":724,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expired",{"_index":55,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["expires",{"_index":918,"title":{},"body":{"classes/RefreshToken.html":{}}}],["expiresin",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":41,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["external",{"_index":535,"title":{},"body":{"classes/Exercise.html":{}}}],["extractjwt",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":98,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["failed",{"_index":667,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":100,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["faça",{"_index":1359,"title":{},"body":{"index.html":{}}}],["field",{"_index":682,"title":{},"body":{"interfaces/IDefaultController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":705,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["findbyparams",{"_index":559,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(@query",{"_index":599,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["findbyparams(params",{"_index":568,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(request",{"_index":783,"title":{},"body":{"controllers/PlansController.html":{}}}],["first",{"_index":1062,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["flavsoliver@gmail.com",{"_index":1421,"title":{},"body":{"index.html":{}}}],["fluxos",{"_index":1357,"title":{},"body":{"index.html":{}}}],["flávio",{"_index":1414,"title":{},"body":{"index.html":{},"properties.html":{}}}],["focus",{"_index":529,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["focusmuscle",{"_index":463,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":935,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["forbiddenexception('refresh",{"_index":941,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["foreignfield",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":1325,"title":{},"body":{"index.html":{},"properties.html":{}}}],["frequency",{"_index":945,"title":{},"body":{"classes/Routine.html":{}}}],["funcionalidades",{"_index":1333,"title":{},"body":{"index.html":{}}}],["function",{"_index":671,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1291,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["futura",{"_index":1401,"title":{},"body":{"index.html":{}}}],["futuredate",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["física",{"_index":1309,"title":{},"body":{"index.html":{}}}],["físicos",{"_index":1318,"title":{},"body":{"index.html":{}}}],["generateaccesstoken",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(userid",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["gerada",{"_index":1339,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":602,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apibearerauth()@apiunauthorizedresponse({description",{"_index":577,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get('authorization",{"_index":938,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["get('documentation",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["get('email",{"_index":1115,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('search",{"_index":598,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get('search')@apibearerauth()@apiunauthorizedresponse({description",{"_index":570,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get()@apibearerauth()@apiunauthorizedresponse({description",{"_index":574,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["getall",{"_index":560,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getall(@req",{"_index":798,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(request",{"_index":785,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(userid",{"_index":828,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["getbyaccesstoken",{"_index":344,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["getbyaccesstoken(token",{"_index":352,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["getbyemail",{"_index":714,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyemail(@query('email",{"_index":1116,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbyemail(email",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyfield",{"_index":680,"title":{},"body":{"interfaces/IDefaultController.html":{}}}],["getbyid",{"_index":561,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param('id",{"_index":603,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["getbyid(id",{"_index":576,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyrefreshtoken",{"_index":345,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["getbyrefreshtoken(token",{"_index":354,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["gethello",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getplanbyexerciseid",{"_index":702,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["getplanbyexerciseid(filter",{"_index":831,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["getting",{"_index":1293,"title":{"index.html":{}},"body":{}}],["git",{"_index":1365,"title":{},"body":{"index.html":{}}}],["graph",{"_index":1426,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard/access",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/local",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/refresh",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["gym",{"_index":1300,"title":{},"body":{"index.html":{},"properties.html":{}}}],["handlerequest",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["handlerequest(err",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["hashedpassword",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword(password",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["height",{"_index":974,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["height'})@prop({type",{"_index":982,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["hello",{"_index":176,"title":{},"body":{"injectables/AppService.html":{}}}],["history",{"_index":1070,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{}}}],["history.dto",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["history.dto.ts",{"_index":991,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["history.dto.ts:15",{"_index":996,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:21",{"_index":997,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:27",{"_index":995,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:9",{"_index":993,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.ts",{"_index":971,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["history.ts:11",{"_index":977,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:15",{"_index":983,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:19",{"_index":985,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:25",{"_index":981,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["https://docs.nestjs.com/controllers#controllers",{"_index":959,"title":{},"body":{"controllers/RoutinesController.html":{}}}],["https://flaviosoliver",{"_index":1417,"title":{},"body":{"index.html":{}}}],["https://github.com/flaviosoliver",{"_index":1439,"title":{},"body":{"properties.html":{}}}],["https://github.com/flaviosoliver/todo",{"_index":1366,"title":{},"body":{"index.html":{}}}],["https://todo",{"_index":1343,"title":{},"body":{"index.html":{}}}],["https://www.linkedin.com/in/flaviosoliver",{"_index":1420,"title":{},"body":{"index.html":{}}}],["iat",{"_index":725,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["iauthcontroller",{"_index":251,"title":{"interfaces/IAuthController.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"coverage.html":{}}}],["iauthrepository",{"_index":359,"title":{"interfaces/IAuthRepository.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["iauthservice",{"_index":249,"title":{"interfaces/IAuthService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["id",{"_index":195,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id'})@prop({type",{"_index":1006,"title":{},"body":{"classes/Training.html":{}}}],["idefaultcontroller",{"_index":677,"title":{"interfaces/IDefaultController.html":{}},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["identifier",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["iexercisescontroller",{"_index":589,"title":{"interfaces/IExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"interfaces/IExercisesController.html":{},"coverage.html":{}}}],["iexercisesrepository",{"_index":627,"title":{"interfaces/IExercisesRepository.html":{}},"body":{"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{}}}],["iexercisesservice",{"_index":587,"title":{"interfaces/IExercisesService.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["image",{"_index":464,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["image'})@prop({type",{"_index":537,"title":{},"body":{"classes/Exercise.html":{}}}],["implementação",{"_index":1400,"title":{},"body":{"index.html":{}}}],["implements",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":31,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["in'})@prop({type",{"_index":919,"title":{},"body":{"classes/RefreshToken.html":{}}}],["incorrect",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["info.message",{"_index":53,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["inject",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(auth_repository",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(auth_service",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["inject(exercises_repository",{"_index":647,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["inject(exercises_service",{"_index":596,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["inject(plans_repository",{"_index":875,"title":{},"body":{"injectables/PlansService.html":{}}}],["inject(plans_service",{"_index":797,"title":{},"body":{"controllers/PlansController.html":{}}}],["inject(users_repository",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":358,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(auth.name",{"_index":361,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["injectmodel(exercise.name",{"_index":628,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["injectmodel(plan.name",{"_index":841,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["injectmodel(user.name",{"_index":1147,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["input",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instalação",{"_index":1358,"title":{},"body":{"index.html":{}}}],["installpara",{"_index":1371,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":662,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":668,"title":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":669,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["interfaces/auth.controller.interface",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces/auth.repository.interface",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["interfaces/auth.service.interface",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["interfaces/exercises.controller.interface",{"_index":590,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["interfaces/exercises.repository.interface",{"_index":616,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/exercises.service.interface",{"_index":588,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/jwt",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["interfaces/plans.controller.interface",{"_index":794,"title":{},"body":{"controllers/PlansController.html":{}}}],["interfaces/plans.repository.interface",{"_index":817,"title":{},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["interfaces/plans.service.interface",{"_index":792,"title":{},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{}}}],["interfaces/users.controller.interface",{"_index":1111,"title":{},"body":{"controllers/UsersController.html":{}}}],["interfaces/users.repository.interface",{"_index":1131,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.service.interface",{"_index":1110,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["internal",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":59,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["io",{"_index":1332,"title":{},"body":{"index.html":{}}}],["iplanscontroller",{"_index":688,"title":{"interfaces/IPlansController.html":{}},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"coverage.html":{}}}],["iplansrepository",{"_index":700,"title":{"interfaces/IPlansRepository.html":{}},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["iplansservice",{"_index":706,"title":{"interfaces/IPlansService.html":{}},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":37,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":477,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isboolean",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isdate",{"_index":492,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isdefined",{"_index":298,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":299,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["isemail(email",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["isjwt",{"_index":300,"title":{},"body":{"classes/AuthDto.html":{}}}],["islocal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":301,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":302,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isnumber",{"_index":998,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["isobject",{"_index":303,"title":{},"body":{"classes/AuthDto.html":{}}}],["isoptional",{"_index":478,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["ispasswordvalid",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":46,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":304,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isurl",{"_index":479,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["iuserscontroller",{"_index":710,"title":{"interfaces/IUsersController.html":{}},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["iusersrepository",{"_index":718,"title":{"interfaces/IUsersRepository.html":{}},"body":{"interfaces/IUsersRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":71,"title":{"interfaces/IUsersService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jsonwebtoken",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":54,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwt_refresh_secret='password'execute",{"_index":1386,"title":{},"body":{"index.html":{}}}],["jwt_secret='password",{"_index":1385,"title":{},"body":{"index.html":{}}}],["jwtfromrequest",{"_index":97,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":75,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["lastname",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["license",{"_index":1437,"title":{},"body":{"properties.html":{}}}],["linguagem",{"_index":1347,"title":{},"body":{"index.html":{},"properties.html":{}}}],["linkedin",{"_index":1419,"title":{},"body":{"index.html":{}}}],["load",{"_index":903,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["load/weight",{"_index":1018,"title":{},"body":{"classes/Training.html":{}}}],["load/weight'})@prop({type",{"_index":1009,"title":{},"body":{"classes/Training.html":{}}}],["local",{"_index":735,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["local_strategy",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["localauthguard",{"_index":266,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localconnection",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["localconnection}/${configservice.get('mongo_db",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["localfield",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":329,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["logger",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('exercises",{"_index":641,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["logger('plansservice",{"_index":872,"title":{},"body":{"injectables/PlansService.html":{}}}],["logger('usersservice",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["login(@body",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(doc",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":218,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["logout(@req",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(request",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["lookup",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["malformed",{"_index":942,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["map",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapexercise",{"_index":642,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapexercise(exe",{"_index":653,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapexercise(exercise",{"_index":656,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapplan",{"_index":873,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapplan(item",{"_index":880,"title":{},"body":{"injectables/PlansService.html":{}}}],["mapplan(plan",{"_index":877,"title":{},"body":{"injectables/PlansService.html":{}}}],["maptrainings",{"_index":1257,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser(user",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":64,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(futuredate.gettime",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["mergedprops",{"_index":1192,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop",{"_index":1196,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop].push(obj[prop",{"_index":1197,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergeobjects",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["messages",{"_index":1200,"title":{},"body":{"injectables/UsersService.html":{}}}],["messages.join",{"_index":1201,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["mim",{"_index":1412,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["minlength(6",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miro",{"_index":1334,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1290,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1393,"title":{},"body":{"index.html":{}}}],["model",{"_index":348,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["modelagem",{"_index":1327,"title":{},"body":{"index.html":{}}}],["models/training.model",{"_index":1000,"title":{},"body":{"modules/SharedModule.html":{}}}],["modo",{"_index":1387,"title":{},"body":{"index.html":{}}}],["modular",{"_index":1336,"title":{},"body":{"index.html":{}}}],["module",{"_index":127,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":129,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo_local='mongodb://127.0.0.1:27017",{"_index":1382,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":1351,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":203,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{},"index.html":{}}}],["mongoose.schema.types.objectid",{"_index":766,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["mongoose.types.objectid(value",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["more'})@prop({type",{"_index":1067,"title":{},"body":{"classes/User.html":{}}}],["muscle",{"_index":530,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["musculação",{"_index":1311,"title":{},"body":{"index.html":{}}}],["n",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["na",{"_index":1312,"title":{},"body":{"index.html":{},"properties.html":{}}}],["name",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/TrainingDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["name'})@prop({type",{"_index":539,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["necessárias",{"_index":1369,"title":{},"body":{"index.html":{}}}],["nele",{"_index":1381,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1326,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1350,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":34,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":36,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":201,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":57,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtoken",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["no_content_204",{"_index":1255,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":1349,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1323,"title":{},"body":{"index.html":{},"properties.html":{}}}],["not_found_404",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["not_found_404})@apiinternalservererrorresponse({description",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["not_found_404})@apiokresponse({description",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["notes",{"_index":465,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["notes'})@prop({type",{"_index":1011,"title":{},"body":{"classes/Training.html":{}}}],["notfoundexception",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`email",{"_index":1118,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`exercise",{"_index":665,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["notfoundexception(`id",{"_index":605,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":1191,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1370,"title":{},"body":{"index.html":{}}}],["null",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":726,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{}}}],["o",{"_index":1324,"title":{},"body":{"index.html":{},"properties.html":{}}}],["obj",{"_index":1195,"title":{},"body":{"injectables/UsersService.html":{}}}],["obj[prop",{"_index":1198,"title":{},"body":{"injectables/UsersService.html":{}}}],["object",{"_index":209,"title":{},"body":{"classes/Auth.html":{}}}],["object'})@prop({type",{"_index":192,"title":{},"body":{"classes/Auth.html":{}}}],["object.entries(mergedprops).map",{"_index":1199,"title":{},"body":{"injectables/UsersService.html":{}}}],["odm",{"_index":1352,"title":{},"body":{"index.html":{}}}],["ok",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok_200",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oliveira",{"_index":1415,"title":{},"body":{"index.html":{},"properties.html":{}}}],["opt",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.focusmuscle",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.push",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["overview",{"_index":1428,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1263,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":1303,"title":{},"body":{"index.html":{}}}],["param",{"_index":582,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":609,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":572,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["params.focusmuscle",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.focusmuscle?.length",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.name",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.userid",{"_index":800,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["params.utils",{"_index":646,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["params.utils.ts",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["paramsdto",{"_index":569,"title":{"classes/ParamsDto.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":937,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":738,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordlogin",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passworduser",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":583,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/disable",{"_index":1125,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/doneexercise",{"_index":806,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/doneexercise')@apibearerauth()@apiunauthorizedresponse({description",{"_index":790,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/enable",{"_index":1122,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/shape",{"_index":1120,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/update",{"_index":608,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/update')@apibearerauth()@apiunauthorizedresponse({description",{"_index":580,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["patch(':id/updatetraining",{"_index":804,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/updatetraining')@apibearerauth()@apiunauthorizedresponse({description",{"_index":779,"title":{},"body":{"controllers/PlansController.html":{}}}],["path",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface.ts",{"_index":723,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pipeline",{"_index":842,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["pipelines/exercise",{"_index":839,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["plan",{"_index":695,"title":{"classes/Plan.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plan'})@prop({type",{"_index":751,"title":{},"body":{"classes/Plan.html":{}}}],["plan.dto.ts",{"_index":482,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["plan.dto.ts:16",{"_index":1049,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:19",{"_index":488,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:21",{"_index":1050,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:25",{"_index":486,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:26",{"_index":1048,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:30",{"_index":485,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:31",{"_index":1046,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:37",{"_index":491,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:42",{"_index":490,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.expiresin",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.focusmuscle",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.id",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.length",{"_index":801,"title":{},"body":{"controllers/PlansController.html":{}}}],["plan.model",{"_index":696,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{}}}],["plan.name",{"_index":820,"title":{},"body":{"modules/PlansModule.html":{},"miscellaneous/variables.html":{}}}],["plan.training",{"_index":889,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["plan.userid",{"_index":802,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["plan.userid.tostring",{"_index":886,"title":{},"body":{"injectables/PlansService.html":{}}}],["plandocument",{"_index":764,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansRepository.html":{},"miscellaneous/typealiases.html":{}}}],["plandto",{"_index":694,"title":{"classes/PlanDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planid",{"_index":709,"title":{},"body":{"interfaces/IPlansService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["plans",{"_index":765,"title":{},"body":{"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["plans.controller",{"_index":812,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.length",{"_index":878,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.map((item",{"_index":879,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.repository",{"_index":816,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.service",{"_index":814,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans/plans.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["plans_controller",{"_index":697,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_repository",{"_index":704,"title":{},"body":{"interfaces/IPlansRepository.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_service",{"_index":708,"title":{},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planschema",{"_index":767,"title":{},"body":{"classes/Plan.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planscontroller",{"_index":776,"title":{"controllers/PlansController.html":{}},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["plansmodule",{"_index":141,"title":{"modules/PlansModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["plansrepository",{"_index":815,"title":{"injectables/PlansRepository.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"coverage.html":{}}}],["plansservice",{"_index":813,"title":{"injectables/PlansService.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["port=3000",{"_index":1384,"title":{},"body":{"index.html":{}}}],["portfolio.vercel.app",{"_index":1418,"title":{},"body":{"index.html":{}}}],["portfólio",{"_index":1416,"title":{},"body":{"index.html":{}}}],["post",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@apiunauthorizedresponse({description",{"_index":564,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["post()@apiunauthorizedresponse({description",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":96,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["production",{"_index":1395,"title":{},"body":{"index.html":{}}}],["project",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projeto",{"_index":1362,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["prop",{"_index":197,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["prop({type",{"_index":946,"title":{},"body":{"classes/Routine.html":{}}}],["properties",{"_index":181,"title":{"properties.html":{}},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["provide",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@useguards(localauthguard)@post('login')@apiunauthorizedresponse({description",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["push",{"_index":852,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":584,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["raiz",{"_index":1374,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1193,"title":{},"body":{"injectables/UsersService.html":{}}}],["ref",{"_index":759,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["reflect",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["refresh",{"_index":191,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refresh_token_strategy",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":183,"title":{"classes/RefreshToken.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["refreshtoken(@body",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(data",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken.refreshtoken",{"_index":365,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["refreshtokendocument",{"_index":923,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":293,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/AuthDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenguard",{"_index":264,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["refreshtokens(data",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenschema",{"_index":193,"title":{},"body":{"classes/Auth.html":{},"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenstrategy",{"_index":326,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["regex",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":979,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["removeexercise",{"_index":856,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["repetitions",{"_index":901,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["repetitions'})@prop({type",{"_index":1013,"title":{},"body":{"classes/Training.html":{}}}],["replace('bearer",{"_index":939,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["repository",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["request",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.user?.id",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PlansController.html":{}}}],["require",{"_index":920,"title":{},"body":{"classes/RefreshToken.html":{}}}],["required",{"_index":187,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["res",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["res.sendfile(path.join(__dirname",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["response",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":1354,"title":{},"body":{"index.html":{}}}],["result",{"_index":366,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["result.join('\\n",{"_index":1202,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.userid.tostring",{"_index":883,"title":{},"body":{"injectables/PlansService.html":{}}}],["result[0",{"_index":848,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["results",{"_index":63,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":50,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["rotinas",{"_index":1307,"title":{},"body":{"index.html":{}}}],["routine",{"_index":943,"title":{"classes/Routine.html":{}},"body":{"classes/Routine.html":{},"coverage.html":{}}}],["routinedocument",{"_index":953,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/typealiases.html":{}}}],["routines",{"_index":954,"title":{},"body":{"classes/Routine.html":{}}}],["routines.controller",{"_index":965,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines.service",{"_index":964,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines/routines.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["routineschema",{"_index":955,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routinescontroller",{"_index":957,"title":{"controllers/RoutinesController.html":{}},"body":{"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"coverage.html":{}}}],["routinesmodule",{"_index":142,"title":{"modules/RoutinesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoutinesModule.html":{},"modules.html":{},"overview.html":{}}}],["routinesrepository",{"_index":966,"title":{"injectables/RoutinesRepository.html":{}},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["routinesservice",{"_index":962,"title":{"injectables/RoutinesService.html":{}},"body":{"modules/RoutinesModule.html":{},"injectables/RoutinesService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1390,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["savenewaccesstoken",{"_index":346,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["savenewaccesstoken(refreshtoken",{"_index":356,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["saveplan",{"_index":703,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["saveplan(plan",{"_index":833,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["schema",{"_index":198,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":199,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(auth",{"_index":211,"title":{},"body":{"classes/Auth.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exercise",{"_index":548,"title":{},"body":{"classes/Exercise.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(plan",{"_index":768,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":924,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(routine",{"_index":956,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shapehistory",{"_index":989,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(training",{"_index":1019,"title":{},"body":{"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1074,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccess",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secretrefresh",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["seguintes",{"_index":1379,"title":{},"body":{"index.html":{}}}],["series",{"_index":899,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["series'})@prop({type",{"_index":1015,"title":{},"body":{"classes/Training.html":{}}}],["servedocs",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(@res",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(res",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["server",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server_error_500",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_error_500})@apiokresponse({description",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["service",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":854,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["setmetadata(is_public_key",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seu",{"_index":1363,"title":{},"body":{"index.html":{}}}],["shape",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["shape.age",{"_index":1149,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["shape.bmi",{"_index":1152,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.height",{"_index":1150,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.weight",{"_index":1151,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shapehistory",{"_index":969,"title":{"classes/ShapeHistory.html":{}},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["shapehistorydocument",{"_index":986,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/typealiases.html":{}}}],["shapehistorydto",{"_index":521,"title":{"classes/ShapeHistoryDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/ShapeHistoryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["shapehistorydto.age",{"_index":1203,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.bmi",{"_index":1207,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.height",{"_index":1205,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.weight",{"_index":1206,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistoryschema",{"_index":988,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/dtos/params.dto",{"_index":592,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/dtos/training.dto",{"_index":793,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/models/training.model",{"_index":763,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{}}}],["shared/shared.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["shared/utils/build",{"_index":645,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["shared/utils/http",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["sharedmodule",{"_index":143,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["short",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["signature",{"_index":60,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["signoptions",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["src/.../access",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.interface.ts",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.model.ts",{"_index":1442,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth.repository.interface.ts",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.interface.ts",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../build",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../credentials.utils.ts",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.mapper.ts",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.model.ts",{"_index":1443,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exercises.controller.interface.ts",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.repository.interface.ts",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.service.interface.ts",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../local.strategy.ts",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.mapper.ts",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plan.model.ts",{"_index":1444,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../plans.controller.interface.ts",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.repository.interface.ts",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.service.interface.ts",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1445,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../routine.model.ts",{"_index":1446,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../shape",{"_index":1447,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../training.mapper.ts",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../training.model.ts",{"_index":1448,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.mapper.ts",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1449,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.controller.interface.ts",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.repository.interface.ts",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.interface.ts",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":111,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:16",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.service.ts",{"_index":174,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app.module.ts",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:48",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:60",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:72",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":180,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.model.ts:11",{"_index":196,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:15",{"_index":190,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:19",{"_index":188,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:23",{"_index":194,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.repository.ts",{"_index":342,"title":{},"body":{"injectables/AuthRepository.html":{},"coverage.html":{}}}],["src/modules/auth/auth.repository.ts:15",{"_index":351,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:19",{"_index":353,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:23",{"_index":357,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:30",{"_index":355,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:9",{"_index":349,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:104",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:148",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:156",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:173",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:178",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:195",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:38",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:41",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:79",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/decorator/public.decorator.ts",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dtos/auth.dto.ts",{"_index":288,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:19",{"_index":297,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:26",{"_index":290,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:33",{"_index":292,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:37",{"_index":295,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":742,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:10",{"_index":743,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts:16",{"_index":744,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/refresh",{"_index":925,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/guard/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guard/local",{"_index":727,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guard/refresh",{"_index":929,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/auth.controller.interface.ts",{"_index":670,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.repository.interface.ts",{"_index":673,"title":{},"body":{"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.service.interface.ts",{"_index":674,"title":{},"body":{"interfaces/IAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/jwt",{"_index":722,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/refresh",{"_index":916,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/access",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/local.strategy.ts",{"_index":730,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:10",{"_index":732,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:18",{"_index":734,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/refresh",{"_index":931,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/utils/credentials.utils.ts",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/dtos/create",{"_index":461,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts",{"_index":550,"title":{},"body":{"classes/ExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:19",{"_index":552,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:25",{"_index":554,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:31",{"_index":551,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:37",{"_index":553,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:43",{"_index":556,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:48",{"_index":555,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/exercise.model.ts",{"_index":528,"title":{},"body":{"classes/Exercise.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/exercise.model.ts:13",{"_index":540,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:17",{"_index":533,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:21",{"_index":538,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:25",{"_index":544,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:29",{"_index":542,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:9",{"_index":534,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercises.controller.ts",{"_index":558,"title":{},"body":{"controllers/ExercisesController.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.controller.ts:100",{"_index":567,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:110",{"_index":581,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:58",{"_index":575,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:69",{"_index":571,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:84",{"_index":578,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.module.ts",{"_index":611,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["src/modules/exercises/exercises.repository.ts",{"_index":620,"title":{},"body":{"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.repository.ts:10",{"_index":621,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:16",{"_index":622,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:20",{"_index":624,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:24",{"_index":625,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:28",{"_index":623,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:32",{"_index":626,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.service.ts",{"_index":634,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.service.ts:21",{"_index":635,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:28",{"_index":638,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:36",{"_index":637,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:51",{"_index":639,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:65",{"_index":636,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:80",{"_index":640,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/interfaces/exercises.controller.interface.ts",{"_index":683,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.repository.interface.ts",{"_index":686,"title":{},"body":{"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.service.interface.ts",{"_index":687,"title":{},"body":{"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/utils/exercise.mapper.ts",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/dtos/create",{"_index":481,"title":{},"body":{"classes/CreatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts",{"_index":769,"title":{},"body":{"classes/PlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:20",{"_index":772,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:26",{"_index":773,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:32",{"_index":771,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:37",{"_index":770,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:44",{"_index":775,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:49",{"_index":774,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/update",{"_index":1045,"title":{},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/interfaces/plans.controller.interface.ts",{"_index":689,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.repository.interface.ts",{"_index":701,"title":{},"body":{"interfaces/IPlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.service.interface.ts",{"_index":707,"title":{},"body":{"interfaces/IPlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/pipelines/exercise",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts",{"_index":749,"title":{},"body":{"classes/Plan.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts:11",{"_index":754,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:15",{"_index":755,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:19",{"_index":753,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:23",{"_index":752,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:31",{"_index":761,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:38",{"_index":757,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plans.controller.ts",{"_index":777,"title":{},"body":{"controllers/PlansController.html":{},"coverage.html":{}}}],["src/modules/plans/plans.controller.ts:109",{"_index":782,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:124",{"_index":788,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:139",{"_index":780,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:154",{"_index":791,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:61",{"_index":786,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:73",{"_index":784,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:93",{"_index":787,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.module.ts",{"_index":811,"title":{},"body":{"modules/PlansModule.html":{}}}],["src/modules/plans/plans.repository.ts",{"_index":821,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{}}}],["src/modules/plans/plans.repository.ts:12",{"_index":823,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:18",{"_index":829,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:26",{"_index":830,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:34",{"_index":827,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:38",{"_index":826,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:42",{"_index":835,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:46",{"_index":834,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:50",{"_index":832,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:54",{"_index":825,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:72",{"_index":837,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.service.ts",{"_index":857,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{}}}],["src/modules/plans/plans.service.ts:121",{"_index":870,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:158",{"_index":868,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:23",{"_index":859,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:30",{"_index":864,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:38",{"_index":865,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:52",{"_index":863,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:67",{"_index":862,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:82",{"_index":866,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:98",{"_index":861,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/utils/plan.mapper.ts",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts",{"_index":944,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts:12",{"_index":950,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:15",{"_index":947,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:18",{"_index":948,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:25",{"_index":952,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:28",{"_index":951,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:9",{"_index":949,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routines.controller.ts",{"_index":958,"title":{},"body":{"controllers/RoutinesController.html":{},"coverage.html":{}}}],["src/modules/routines/routines.module.ts",{"_index":963,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["src/modules/routines/routines.repository.ts",{"_index":967,"title":{},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["src/modules/routines/routines.service.ts",{"_index":968,"title":{},"body":{"injectables/RoutinesService.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto",{"_index":684,"title":{},"body":{"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/params.dto.ts",{"_index":745,"title":{},"body":{"classes/ParamsDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto.ts:2",{"_index":747,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:3",{"_index":746,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:4",{"_index":748,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/training.dto",{"_index":693,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/training.dto.ts",{"_index":1020,"title":{},"body":{"classes/TrainingDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/training.dto.ts:17",{"_index":1024,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:24",{"_index":1023,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:30",{"_index":1030,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:36",{"_index":1029,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:42",{"_index":1026,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:47",{"_index":1028,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:52",{"_index":1022,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:58",{"_index":1027,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:64",{"_index":1025,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:70",{"_index":1031,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/update",{"_index":1033,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/shared/interfaces/default.controller.interface.ts",{"_index":678,"title":{},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["src/modules/shared/models/training.model",{"_index":493,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["src/modules/shared/models/training.model.ts",{"_index":1002,"title":{},"body":{"classes/Training.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/models/training.model.ts:10",{"_index":1008,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:18",{"_index":1007,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:22",{"_index":1016,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:26",{"_index":1014,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:30",{"_index":1010,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:34",{"_index":1012,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:38",{"_index":1005,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/shared.module.ts",{"_index":999,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/modules/shared/utils/build",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/http",{"_index":1253,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/training.mapper.ts",{"_index":1256,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/dtos/create",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/dtos",{"_index":675,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["src/modules/users/dtos/shape",{"_index":990,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/modules/users/dtos/user.dto.ts",{"_index":1075,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto.ts:22",{"_index":1082,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:29",{"_index":1080,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:35",{"_index":1084,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:41",{"_index":1081,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:47",{"_index":1083,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:53",{"_index":1079,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:59",{"_index":1076,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:65",{"_index":1085,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:70",{"_index":1077,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/interfaces/users.controller.interface.ts",{"_index":711,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.repository.interface.ts",{"_index":719,"title":{},"body":{"interfaces/IUsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.service.interface",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/modules/users/interfaces/users.service.interface.ts",{"_index":721,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/shape",{"_index":970,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts",{"_index":1052,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts:11",{"_index":1064,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:15",{"_index":1061,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:21",{"_index":1069,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:25",{"_index":1063,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:29",{"_index":1066,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:33",{"_index":1060,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:37",{"_index":1055,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:41",{"_index":1071,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:45",{"_index":1057,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:111",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:122",{"_index":1109,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:136",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:147",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:57",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:68",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:80",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:96",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1128,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.repository.ts",{"_index":1135,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/modules/users/users.repository.ts:15",{"_index":1137,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:19",{"_index":1142,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:23",{"_index":1144,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:27",{"_index":1143,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:32",{"_index":1145,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:36",{"_index":1146,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:52",{"_index":1139,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:56",{"_index":1141,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:60",{"_index":1140,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:9",{"_index":1136,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.service.ts",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:129",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:162",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:174",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:187",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:20",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:27",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:35",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:50",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:67",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:71",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:95",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/utils/user.mapper.ts",{"_index":1260,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1391,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1394,"title":{},"body":{"index.html":{}}}],["start:prodexecutar",{"_index":1396,"title":{},"body":{"index.html":{}}}],["started",{"_index":1294,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":915,"title":{},"body":{"injectables/PlansService.html":{},"classes/User.html":{}}}],["status'})@prop({type",{"_index":1054,"title":{},"body":{"classes/User.html":{}}}],["status.utils",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["status.utils.ts",{"_index":1254,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["str",{"_index":1213,"title":{},"body":{"injectables/UsersService.html":{}}}],["strategy",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["strategy/access",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/refresh",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{}}}],["super",{"_index":44,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["super.canactivate(context",{"_index":52,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["support",{"_index":1423,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":1065,"title":{},"body":{"classes/User.html":{}}}],["svg",{"_index":1424,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1342,"title":{},"body":{"index.html":{}}}],["t",{"_index":681,"title":{},"body":{"interfaces/IDefaultController.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["t.exerciseid",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t.exerciseid.tostring",{"_index":894,"title":{},"body":{"injectables/PlansService.html":{}}}],["table",{"_index":1262,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1261,"title":{},"body":{"coverage.html":{}}}],["tecnologias",{"_index":1345,"title":{},"body":{"index.html":{}}}],["test",{"_index":1408,"title":{},"body":{"index.html":{}}}],["test:covsobre",{"_index":1411,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1410,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1407,"title":{},"body":{"index.html":{}}}],["then((errors",{"_index":1210,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(email",{"_index":739,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.decodetoken(newaccesstoken",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(user.id",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(user.id",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyemail(user.email",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(id",{"_index":1218,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashedpassword(user.password",{"_index":1187,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.decode(token",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(error",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.logger.error(str",{"_index":1215,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model",{"_index":844,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(auth",{"_index":362,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["this.model.create(exercise",{"_index":629,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["this.model.create(plan",{"_index":849,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(user",{"_index":1148,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.deleteone",{"_index":1153,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.find",{"_index":630,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.find(params",{"_index":632,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{}}}],["this.model.findbyid(id",{"_index":631,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findbyidandupdate(plan.id",{"_index":850,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.findone",{"_index":363,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findone(filter",{"_index":851,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.updateone",{"_index":364,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.updateone(filter",{"_index":853,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":47,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["this.repository.create(doc",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.create(exercise",{"_index":661,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["this.repository.create(plan",{"_index":882,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.create(user",{"_index":1188,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.delete(id",{"_index":1220,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.disable(id",{"_index":1225,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.enable(id",{"_index":1222,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findbyparams(parameters",{"_index":650,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["this.repository.getall",{"_index":648,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getall(userid",{"_index":876,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyemail(email",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.getbyid(id",{"_index":655,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getbyid(planid",{"_index":885,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyrefreshtoken",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.getplanbyexerciseid(filter",{"_index":911,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.savenewaccesstoken",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.saveplan(plan",{"_index":890,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.update(id",{"_index":664,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.updateexercisedonestatus(filter",{"_index":914,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.updateshape(id",{"_index":1219,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.secretrefresh",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.service.addorupdatetraining(id",{"_index":805,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(exercise",{"_index":607,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["this.service.create(plan",{"_index":803,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(user",{"_index":1114,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.disable(id",{"_index":1127,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.enable(id",{"_index":1124,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.findbyparams(params",{"_index":600,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["this.service.getall",{"_index":597,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["this.service.getall(userid",{"_index":799,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.getbyemail(email",{"_index":1117,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.getbyid(id",{"_index":604,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.login(email",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.logout(userid",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.refreshtokens(data",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.update(id",{"_index":610,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.updateexercisedonestatus(id",{"_index":808,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.updateshape(id",{"_index":1121,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.transformstring(arr",{"_index":1214,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.unixtimestamp",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatetraining(plan.training",{"_index":888,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":103,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":56,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":207,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["token",{"_index":62,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["token'})@prop({type",{"_index":186,"title":{},"body":{"classes/Auth.html":{},"classes/RefreshToken.html":{}}}],["token.dto",{"_index":306,"title":{},"body":{"classes/AuthDto.html":{}}}],["token.dto.ts",{"_index":926,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:2",{"_index":928,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:3",{"_index":927,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:16",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:28",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:5",{"_index":930,"title":{},"body":{"injectables/RefreshTokenGuard.html":{}}}],["token.model",{"_index":204,"title":{},"body":{"classes/Auth.html":{}}}],["token.model.ts",{"_index":917,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.model.ts:12",{"_index":921,"title":{},"body":{"classes/RefreshToken.html":{}}}],["token.model.ts:8",{"_index":922,"title":{},"body":{"classes/RefreshToken.html":{}}}],["token.strategy",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.strategy.ts:14",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:17",{"_index":932,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:25",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":934,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["training",{"_index":483,"title":{"classes/Training.html":{}},"body":{"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["training.$.done",{"_index":855,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["training.createdat",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["training.done",{"_index":907,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.dto",{"_index":1051,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["training.dto.ts",{"_index":1034,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"coverage.html":{}}}],["training.dto.ts:17",{"_index":1039,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:23",{"_index":1038,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:28",{"_index":1043,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:33",{"_index":1042,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:38",{"_index":1040,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:43",{"_index":1041,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:48",{"_index":1036,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.exerciseid",{"_index":895,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.exerciseid.tostring",{"_index":913,"title":{},"body":{"injectables/PlansService.html":{}}}],["training.id",{"_index":898,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.load",{"_index":904,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.name",{"_index":1001,"title":{},"body":{"modules/SharedModule.html":{}}}],["training.notes",{"_index":905,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.repetitions",{"_index":902,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.series",{"_index":900,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.updatedat",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trainingdata",{"_index":698,"title":{},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{}}}],["trainingdocument",{"_index":1017,"title":{},"body":{"classes/Training.html":{},"miscellaneous/typealiases.html":{}}}],["trainingdto",{"_index":692,"title":{"classes/TrainingDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/TrainingDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingschema",{"_index":762,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingupdatedto",{"_index":1032,"title":{"classes/TrainingUpdateDto.html":{}},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["transformstring",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["transformstring(arr",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["treinos",{"_index":1306,"title":{},"body":{"index.html":{}}}],["trim",{"_index":940,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":51,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1440,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":1321,"title":{},"body":{"index.html":{},"properties.html":{}}}],["um",{"_index":1360,"title":{},"body":{"index.html":{}}}],["uma",{"_index":1301,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_401",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorized_401})@apibadrequestresponse({description",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":61,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["unauthorizedexception('token",{"_index":58,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["unauthorizedexception(`invalid",{"_index":740,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(`user",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":532,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["undefined})@apibody({type",{"_index":566,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["undefined})@prop({type",{"_index":531,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["unit",{"_index":1406,"title":{},"body":{"index.html":{}}}],["unix",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["unixtimestamp",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["unknown",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["unlicensed",{"_index":1438,"title":{},"body":{"properties.html":{}}}],["unwind",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":1403,"title":{},"body":{"index.html":{}}}],["update",{"_index":562,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["update')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1108,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":1119,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":579,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatedtraining",{"_index":887,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateexercisedonestatus",{"_index":691,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["updateexercisedonestatus(filter",{"_index":836,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["updateexercisedonestatus(id",{"_index":789,"title":{},"body":{"controllers/PlansController.html":{}}}],["updateexercisedonestatus(planid",{"_index":867,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateplandto",{"_index":1044,"title":{"classes/UpdatePlanDto.html":{}},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["updateshape",{"_index":715,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updateshape(id",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatetraining",{"_index":858,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatetraining(existingtraining",{"_index":869,"title":{},"body":{"injectables/PlansService.html":{}}}],["uri",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":536,"title":{},"body":{"classes/Exercise.html":{}}}],["useclass",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get(':id')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('email')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get()@apibearerauth()@apiunauthorizedresponse({description",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/disable')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/enable')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/shape",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/update')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@post('logout')@apibearerauth()@apiunauthorizedresponse({description",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@post('refreshtoken')@apibearerauth()@apiunauthorizedresponse({description",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":28,"title":{"classes/User.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/Auth.html":{},"injectables/AuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.active",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.avatar",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.birthdate",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.dto.ts",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.id",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.lastname",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.model",{"_index":716,"title":{},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["user.name",{"_index":1134,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.shape",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":1072,"title":{},"body":{"classes/User.html":{},"injectables/UsersRepository.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":88,"title":{"classes/UserDto.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":184,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":737,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":760,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1130,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":1133,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1129,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dtos/dtos",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/interfaces/users.service.interface",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["users/user.model",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["users_controller",{"_index":717,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_repository",{"_index":720,"title":{},"body":{"interfaces/IUsersRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema",{"_index":1073,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1086,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":144,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1132,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"coverage.html":{}}}],["usersservice",{"_index":73,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["utilizadas",{"_index":1346,"title":{},"body":{"index.html":{}}}],["utilizando",{"_index":1436,"title":{},"body":{"properties.html":{}}}],["utils/credentials.utils",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/exercise.mapper",{"_index":643,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["utils/plan.mapper",{"_index":874,"title":{},"body":{"injectables/PlansService.html":{}}}],["utils/user.mapper",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["valid",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["validate(email",{"_index":733,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(exercise",{"_index":658,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["validate(payload",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(plan",{"_index":881,"title":{},"body":{"injectables/PlansService.html":{}}}],["validate(req",{"_index":933,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validate(shapehistorydto",{"_index":1209,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate(user).then((errors",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["validateuser(email",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":305,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["validity",{"_index":750,"title":{},"body":{"classes/Plan.html":{}}}],["validobj",{"_index":1208,"title":{},"body":{"injectables/UsersService.html":{}}}],["value",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1450,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variáveis",{"_index":1380,"title":{},"body":{"index.html":{}}}],["version",{"_index":1433,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1397,"title":{},"body":{"index.html":{}}}],["video",{"_index":466,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["video'})@prop({type",{"_index":543,"title":{},"body":{"classes/Exercise.html":{}}}],["void",{"_index":676,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["watch",{"_index":1392,"title":{},"body":{"index.html":{}}}],["web",{"_index":1302,"title":{},"body":{"index.html":{}}}],["weight",{"_index":975,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["weight'})@prop({type",{"_index":984,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["world",{"_index":177,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":573,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["zoom",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/access-token.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guard/access-token.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guard/access-token.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guard/access-token.guard.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorator/public.decorator';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    if (info && info.message === 'jwt expired') {\n      throw new UnauthorizedException('Token Expired');\n    }\n    if (info && info.message === 'invalid signature') {\n      throw new UnauthorizedException('Invalid Token');\n    }\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: IUsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/access-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/access-token.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from 'src/modules/users/interfaces/users.service.interface';\nimport { UserDto } from 'src/modules/users/dtos/user.dto';\n\nexport const ACCESS_TOKEN_STRATEGY = 'ACCESS_TOKEN_STRATEGY';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService\n  ) {\n    super({\n      secretOrKey: process.env.JWT_SECRET,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n    });\n  }\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload;\n    const user = await this.usersService.getByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    Async\n                                serveDocs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        serveDocs\n                        \n                    \n                \n            \n            \n                \n                    \n                    serveDocs(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('documentation')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AppService } from './app.service';\nimport * as path from 'path';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('documentation')\n  async serveDocs(@Res() res: Response) {\n    return res.sendFile(path.join(__dirname, '../documentation/index.html'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\n\n\nPlansModule\n\nPlansModule\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExercisesModule\n                        \n                        \n                            PlansModule\n                        \n                        \n                            RoutinesModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { RoutinesModule } from './routines/routines.module';\nimport { ExercisesModule } from './exercises/exercises.module';\nimport { UsersModule } from './users/users.module';\nimport { PlansModule } from './plans/plans.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AppController } from '../app.controller';\nimport { AppService } from '../app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        const localConnection = configService.get('MONGO_LOCAL');\n        const atlasConnection = configService.get('MONGO_ATLAS');\n        const isLocal = configService.get('ENVIRONMENT_LOCAL') ?? false;\n        return {\n          uri: isLocal\n            ? `${localConnection}/${configService.get('MONGO_DB')}`\n            : `${atlasConnection}/${configService.get('MONGO_DB')}`,\n        };\n      },\n      inject: [ConfigService],\n    }),\n    AuthModule,\n    UsersModule,\n    ExercisesModule,\n    PlansModule,\n    RoutinesModule,\n    SharedModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User token'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshToken\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User refresh token object'})@Prop({type: RefreshTokenSchema, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refresh-token.model';\n\nexport type AuthDocument = Auth & Document;\n\n@Schema({ collection: 'auth', timestamps: true })\nexport class Auth {\n  @ApiProperty({ description: 'User Id}' })\n  userId: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({ description: 'User token' })\n  @Prop({ type: String, required: true })\n  accessToken: string;\n\n  @ApiProperty({ description: 'User refresh token object' })\n  @Prop({ type: RefreshTokenSchema, required: true })\n  refreshToken: RefreshToken;\n}\n\nexport const AuthSchema = SchemaFactory.createForClass(Auth);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(doc: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(LocalAuthGuard)@Post('login')@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: UserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('logout')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Post('refreshtoken')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Inject, Post, Req, UseGuards } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  AUTH_SERVICE,\n  IAuthService,\n} from './interfaces/auth.service.interface';\nimport { IAuthController } from './interfaces/auth.controller.interface';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n} from '../shared/utils/http-response-status.utils';\nimport { UserDto } from '../users/dtos/dtos';\nimport { AuthDto, LoginDto } from './dtos/dtos';\nimport { Public } from './decorator/public.decorator';\nimport { AccessTokenGuard } from './guard/access-token.guard';\nimport { RefreshTokenGuard } from './guard/refresh-token.guard';\nimport { LocalAuthGuard } from './guard/local-auth.guard';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController implements IAuthController {\n  constructor(\n    @Inject(AUTH_SERVICE)\n    private readonly service: IAuthService\n  ) {}\n\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: UserDto })\n  async login(@Body() doc: LoginDto): Promise {\n    const { email, password } = doc;\n    return await this.service.login(email, password);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Post('logout')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async logout(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return this.service.logout(userId);\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('refreshtoken')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async refreshToken(@Body() data: AuthDto): Promise {\n    return await this.service.refreshTokens(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsJWT()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsEmail,\n  IsJWT,\n  IsMongoId,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\nimport { RefreshTokenDto } from './refresh-token.dto';\n\nexport class AuthDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsJWT()\n  @IsString()\n  accessToken: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsObject()\n  refreshToken: RefreshTokenDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './interfaces/auth.service.interface';\nimport { AuthRepository } from './auth.repository';\nimport { AUTH_REPOSITORY } from './interfaces/auth.repository.interface';\nimport { Auth, AuthSchema } from './auth.model';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { USERS_SERVICE } from '../users/interfaces/users.service.interface';\nimport { UsersService } from '../users/users.service';\nimport {\n  ACCESS_TOKEN_STRATEGY,\n  AccessTokenStrategy,\n} from './strategy/access-token.strategy';\nimport {\n  REFRESH_TOKEN_STRATEGY,\n  RefreshTokenStrategy,\n} from './strategy/refresh-token.strategy';\nimport { LOCAL_STRATEGY, LocalStrategy } from './strategy/local.strategy';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Auth.name,\n        schema: AuthSchema,\n      },\n    ]),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '7d' },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    ConfigModule,\n  ],\n  providers: [\n    { useClass: AuthService, provide: AUTH_SERVICE },\n    { useClass: AuthRepository, provide: AUTH_REPOSITORY },\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: LocalStrategy, provide: LOCAL_STRATEGY },\n    { useClass: AccessTokenStrategy, provide: ACCESS_TOKEN_STRATEGY },\n    {\n      useClass: RefreshTokenStrategy,\n      provide: REFRESH_TOKEN_STRATEGY,\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AUTH_SERVICE, AUTH_REPOSITORY],\n})\nexport class AuthModule {\n  constructor() {\n    dotenv.config();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthRepository.html":{"url":"injectables/AuthRepository.html","title":"injectable - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByAccessToken\n                            \n                            \n                                    Async\n                                getByRefreshToken\n                            \n                            \n                                    Async\n                                saveNewAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(auth: Auth)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    auth\n                                    \n                                                Auth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByAccessToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewAccessToken(refreshToken: string, auth: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    auth\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Auth, AuthDocument } from './auth.model';\nimport { IAuthRepository } from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthRepository implements IAuthRepository {\n  constructor(\n    @InjectModel(Auth.name)\n    readonly model: Model\n  ) {}\n\n  async create(auth: Auth): Promise {\n    return await this.model.create(auth);\n  }\n\n  async getByAccessToken(token: string): Promise {\n    return await this.model.findOne({ accessToken: token });\n  }\n\n  async saveNewAccessToken(refreshToken: string, auth: AuthDto): Promise {\n    await this.model.updateOne(\n      { 'refreshToken.refreshToken': refreshToken },\n      auth\n    );\n  }\n\n  async getByRefreshToken(token: string): Promise {\n    const result = await this.model.findOne({\n      'refreshToken.refreshToken': token,\n    });\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretAccess\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretRefresh\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decodeToken\n                            \n                            \n                                    Private\n                                generateAccessToken\n                            \n                            \n                                    Private\n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                unixTimestamp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IAuthRepository, usersService: IUsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IAuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unixTimestamp\n                        \n                    \n                \n            \n            \n                \nunixTimestamp()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AuthService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretAccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('JWT_SECRET')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretRefresh\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('JWT_REFRESH_SECRET')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from '../users/interfaces/users.service.interface';\nimport {\n  AUTH_REPOSITORY,\n  IAuthRepository,\n} from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/dtos';\nimport { IAuthService } from './interfaces/auth.service.interface';\nimport { comparePasswords } from './utils/credentials.utils';\nimport { User } from '../users/user.model';\n\n@Injectable()\nexport class AuthService implements IAuthService {\n  private readonly logger = new Logger('AuthService');\n\n  constructor(\n    @Inject(AUTH_REPOSITORY)\n    private readonly repository: IAuthRepository,\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) {}\n\n  private readonly secretAccess = this.configService.get('JWT_SECRET');\n  private readonly secretRefresh =\n    this.configService.get('JWT_REFRESH_SECRET');\n\n  async login(email: string, password: string): Promise {\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      if (!user) {\n        throw new UnauthorizedException(`User email ${email}`);\n      }\n\n      const isPasswordValid = await comparePasswords(password, user.password);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException(\n          `Password is incorrect to user ${user.email}`\n        );\n      }\n\n      const accessToken = this.generateAccessToken(user.id, user.email);\n      const refreshToken = await this.generateRefreshToken(user.id, user.email);\n\n      const doc: AuthDto = {\n        userId: user.id,\n        email: user.email,\n        accessToken: accessToken,\n        refreshToken: {\n          refreshToken: refreshToken,\n          expiresIn: this.unixTimestamp(),\n        },\n      };\n\n      await this.repository.create(doc);\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async logout(userId: string) {\n    try {\n      const user = await this.usersService.getById(userId);\n\n      if (!user) {\n        throw new UnauthorizedException(`User id ${userId}`);\n      }\n\n      const doc: AuthDto = {\n        userId: '',\n        email: '',\n        accessToken: '',\n        refreshToken: {\n          refreshToken: '',\n          expiresIn: 0,\n        },\n      };\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async refreshTokens(data: AuthDto): Promise {\n    try {\n      const doc = await this.repository.getByRefreshToken(\n        data.refreshToken.refreshToken\n      );\n\n      if (!doc) {\n        throw new NotFoundException(\n          `Token ${data.refreshToken.refreshToken} not found`\n        );\n      }\n\n      const newAccessToken = await this.generateAccessToken(\n        data.userId,\n        data.email\n      );\n\n      const newRefreshToken = await this.generateRefreshToken(\n        data.userId,\n        data.email\n      );\n\n      const decodedRefreshToken = await this.decodeToken(newAccessToken);\n\n      const authDocument = new AuthDto();\n      authDocument.userId = data.userId;\n      authDocument.email = data.email;\n      authDocument.accessToken = newAccessToken;\n      authDocument.refreshToken = {\n        refreshToken: newRefreshToken,\n        expiresIn: decodedRefreshToken.exp,\n      };\n\n      await this.repository.saveNewAccessToken(\n        data.refreshToken.refreshToken,\n        authDocument\n      );\n      return authDocument;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async decodeToken(token: string): Promise {\n    try {\n      return this.jwtService.decode(token);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async validateUser(email: string, password: string) {\n    let user: User;\n    try {\n      user = await this.usersService.getByEmail(email);\n\n      if (!user) return null;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n    const isPasswordValid = comparePasswords(password, user.password);\n\n    if (!isPasswordValid) return null;\n\n    return user;\n  }\n\n  private generateAccessToken(userId: string, email: string): string {\n    const payload = { sub: userId, email: email };\n    return this.jwtService.sign(payload);\n  }\n\n  private async generateRefreshToken(\n    userId: string,\n    email: string\n  ): Promise {\n    const refreshToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        email: email,\n      },\n      {\n        secret: this.secretRefresh,\n        expiresIn: '30d',\n      }\n    );\n    return refreshToken;\n  }\n\n  unixTimestamp() {\n    const currentDate = new Date();\n    const futureDate = new Date(\n      currentDate.getTime() + 30 * 24 * 60 * 60 * 1000\n    );\n    const unix = Math.floor(futureDate.getTime() / 1000);\n\n    return unix;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExerciseDto.html":{"url":"classes/CreateExerciseDto.html","title":"class - CreateExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/create-exercises.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateExerciseDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlanDto.html":{"url":"classes/CreatePlanDto.html","title":"class - CreatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/create-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         [Training]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsNotEmpty,\n  IsString,\n  IsArray,\n  ArrayNotEmpty,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class CreatePlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: [Training];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()@MinLength(6, {message: 'Your password is too short! It must be 5 characters or more!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShapeHistoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ShapeHistoryDto } from './shape-history.dto';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  @MinLength(6, {\n    message: 'Your password is too short! It must be 5 characters or more!',\n  })\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDate()\n  @IsNotEmpty()\n  @IsDefined()\n  birthDate: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistoryDto[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exercise.html":{"url":"classes/Exercise.html","title":"class - Exercise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exercise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercise.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Exercise', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Image'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Info notes to exercise'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Video'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type ExerciseDocument = Exercise & Document;\n\n@Schema({ collection: 'exercises', timestamps: true })\nexport class Exercise {\n  @ApiProperty({ description: 'Exercise Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Exercise', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'External URL for Exercise Image' })\n  @Prop({ type: String, required: false })\n  image?: string;\n\n  @ApiProperty({ description: 'External URL for Exercise Video' })\n  @Prop({ type: String, required: false })\n  video?: string;\n\n  @ApiProperty({ description: 'Info notes to exercise' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n}\n\nexport const ExerciseSchema = SchemaFactory.createForClass(Exercise);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExerciseDto.html":{"url":"classes/ExerciseDto.html","title":"class - ExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/exercise.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class ExerciseDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExercisesController.html":{"url":"controllers/ExercisesController.html","title":"controller - ExercisesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exercises\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateExerciseDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  Get,\n  UseGuards,\n  Param,\n  NotFoundException,\n  Body,\n  Post,\n  Patch,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  EXERCISES_SERVICE,\n  IExercisesService,\n} from './interfaces/exercises.service.interface';\nimport { IExercisesController } from './interfaces/exercises.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { Exercise } from './exercise.model';\nimport { ExerciseDto, CreateExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { AccessTokenGuard } from '../auth/guard/access-token.guard';\n\n@Controller('exercises')\n@UseGuards(AccessTokenGuard)\n@ApiTags('exercises')\nexport class ExercisesController implements IExercisesController {\n  constructor(\n    @Inject(EXERCISES_SERVICE)\n    private readonly service: IExercisesService\n  ) {}\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Exercise] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Get('search')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async findByParams(@Query() params?: ParamsDto): Promise {\n    const exercise = await this.service.findByParams(params);\n    if (!exercise || exercise.length === 0) {\n      return;\n    }\n    return exercise;\n  }\n\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async getById(@Param('id') id: string): Promise {\n    const exercise = await this.service.getById(id);\n    if (!exercise) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return exercise;\n  }\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [ExerciseDto] })\n  @ApiBody({ type: CreateExerciseDto })\n  async create(@Body() exercise: CreateExerciseDto): Promise {\n    return await this.service.create(exercise);\n  }\n\n  @Patch(':id/update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() exercise: ExerciseDto\n  ): Promise {\n    return await this.service.update(id, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExercisesModule.html":{"url":"modules/ExercisesModule.html","title":"module - ExercisesModule","body":"\n                   \n\n\n\n\n    Modules\n    ExercisesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/exercises/exercises.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ExercisesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExercisesService } from './exercises.service';\nimport { ExercisesController } from './exercises.controller';\nimport { Exercise, ExerciseSchema } from './exercise.model';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { EXERCISES_SERVICE } from './interfaces/exercises.service.interface';\nimport { EXERCISES_REPOSITORY } from './interfaces/exercises.repository.interface';\nimport { ExercisesRepository } from './exercises.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Exercise.name,\n        schema: ExerciseSchema,\n      },\n    ]),\n  ],\n  controllers: [ExercisesController],\n  providers: [\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n    { useClass: ExercisesRepository, provide: EXERCISES_REPOSITORY },\n  ],\n  exports: [EXERCISES_SERVICE, EXERCISES_REPOSITORY],\n})\nexport class ExercisesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesRepository.html":{"url":"injectables/ExercisesRepository.html","title":"injectable - ExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IExercisesRepository } from './interfaces/exercises.repository.interface';\nimport { Exercise, ExerciseDocument } from './exercise.model';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\n\n@Injectable()\nexport class ExercisesRepository implements IExercisesRepository {\n  constructor(\n    @InjectModel(Exercise.name)\n    readonly model: Model\n  ) {}\n\n  async create(exercise: CreateExerciseDto): Promise {\n    return await this.model.create(exercise);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    await this.model.updateOne({ _id: id }, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesService.html":{"url":"injectables/ExercisesService.html","title":"injectable - ExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IExercisesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IExercisesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('exercises')\n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  EXERCISES_REPOSITORY,\n  IExercisesRepository,\n} from './interfaces/exercises.repository.interface';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { mapExercise } from './utils/exercise.mapper';\nimport { IExercisesService } from './interfaces/exercises.service.interface';\nimport { validate } from 'class-validator';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\n\n@Injectable()\nexport class ExercisesService implements IExercisesService {\n  private readonly logger = new Logger('exercises');\n\n  constructor(\n    @Inject(EXERCISES_REPOSITORY)\n    private readonly repository: IExercisesRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let exercises = await this.repository.findByParams(parameters);\n      if (exercises && exercises.length > 0) {\n        return exercises.map((exe) => mapExercise(exe));\n      } else {\n        return (exercises = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid exercise params`);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const exercise = await this.repository.getById(id);\n      if (exercise != null || exercise != undefined) {\n        return mapExercise(exercise);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async create(exercise: CreateExerciseDto): Promise {\n    try {\n      const errors = await validate(exercise);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(exercise);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, exercise);\n      } else {\n        throw new NotFoundException(`Exercise id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update exercise id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthController.html":{"url":"interfaces/IAuthController.html","title":"interface - IAuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            logout\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logout:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { AuthDto, LoginDto } from '../dtos/dtos';\n\nexport const AUTH_CONTROLLER = 'AUTH_CONTROLLER';\n\nexport interface IAuthController {\n  login: (doc: LoginDto) => Promise;\n  logout: (request: Request) => Promise;\n  refreshToken: (data: AuthDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthRepository.html":{"url":"interfaces/IAuthRepository.html","title":"interface - IAuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            getByAccessToken\n                                        \n                                \n                                \n                                        \n                                            getByRefreshToken\n                                        \n                                \n                                \n                                        \n                                            saveNewAccessToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByAccessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByAccessToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByRefreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByRefreshToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        saveNewAccessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        saveNewAccessToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Auth } from '../auth.model';\nimport { AuthDto } from '../dtos/auth.dto';\n\nexport const AUTH_REPOSITORY = 'AUTH_REPOSITORY';\n\nexport interface IAuthRepository {\n  create: (auth: Auth) => Promise;\n  getByAccessToken: (token: string) => Promise;\n  getByRefreshToken: (token: string) => Promise;\n  saveNewAccessToken: (refreshToken: string, auth: AuthDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthService.html":{"url":"interfaces/IAuthService.html","title":"interface - IAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            logout\n                                        \n                                \n                                \n                                        \n                                            refreshTokens\n                                        \n                                \n                                \n                                        \n                                            validateUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logout:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokens:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validateUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validateUser:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDto } from 'src/modules/users/dtos/dtos';\nimport { AuthDto } from '../dtos/auth.dto';\nimport { JwtPayload } from './jwt-payload.interface';\n\nexport const AUTH_SERVICE = 'AUTH_SERVICE';\n\nexport interface IAuthService {\n  login: (email: string, password: string) => Promise;\n  logout: (userId: string) => void;\n  refreshTokens: (data: any) => Promise;\n  validateUser: (email: string, password: string) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDefaultController.html":{"url":"interfaces/IDefaultController.html","title":"interface - IDefaultController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDefaultController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/interfaces/default.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByField\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByField\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByField:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDefaultController {\n  create: (doc: T) => Promise;\n  getAll: () => Promise;\n  getByField: (field: any) => Promise;\n  update: (id: string, doc: T) => Promise;\n  delete: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesController.html":{"url":"interfaces/IExercisesController.html","title":"interface - IExercisesController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\nimport { Exercise } from '../exercise.model';\n\nexport const EXERCISES_CONTROLLER = 'EXERCISES_CONTROLLER';\n\nexport interface IExercisesController {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesRepository.html":{"url":"interfaces/IExercisesRepository.html","title":"interface - IExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_REPOSITORY = 'EXERCISES_REPOSITORY';\n\nexport interface IExercisesRepository {\n  create: (exercise: CreateExerciseDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesService.html":{"url":"interfaces/IExercisesService.html","title":"interface - IExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_SERVICE = 'EXERCISES_SERVICE';\n\nexport interface IExercisesService {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansController.html":{"url":"interfaces/IPlansController.html","title":"interface - IPlansController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\nimport { CreatePlanDto, PlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\nimport { ParamsDto } from 'src/modules/shared/dtos/params.dto';\n\nexport const PLANS_CONTROLLER = 'PLANS_CONTROLLER';\n\nexport interface IPlansController {\n  getAll: (request: Request) => Promise;\n  findByParams: (request: Request, params?: ParamsDto) => Promise;\n  getById: (id: string) => Promise;\n  create: (plan: CreatePlanDto, request: Request) => Promise;\n  update: (id: string, plan: PlanDto, request: Request) => Promise;\n  addOrUpdateTraining: (\n    id: string,\n    request: Request,\n    trainingData: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    id: string,\n    request: Request,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansRepository.html":{"url":"interfaces/IPlansRepository.html","title":"interface - IPlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            getPlanByExerciseId\n                                        \n                                \n                                \n                                        \n                                            savePlan\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getPlanByExerciseId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getPlanByExerciseId:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savePlan\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        savePlan:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\n\nexport const PLANS_REPOSITORY = 'PLANS_REPOSITORY';\n\nexport interface IPlansRepository {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto) => Promise;\n  getPlanByExerciseId: (filter: any) => Promise;\n  savePlan: (plan: Plan) => Promise;\n  updateExerciseDoneStatus: (filter: any) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansService.html":{"url":"interfaces/IPlansService.html","title":"interface - IPlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\n\nexport const PLANS_SERVICE = 'PLANS_SERVICE';\n\nexport interface IPlansService {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto, userId: string) => Promise;\n  addOrUpdateTraining: (\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersController.html":{"url":"interfaces/IUsersController.html","title":"interface - IUsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\nimport { User } from '../user.model';\n\nexport const USERS_CONTROLLER = 'USERS_CONTROLLER';\n\nexport interface IUsersController {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersRepository.html":{"url":"interfaces/IUsersRepository.html","title":"interface - IUsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_REPOSITORY = 'USERS_REPOSITORY';\n\nexport interface IUsersRepository {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\nexport interface IUsersService {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  getById: (id: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  email: string;\n  sub: string;\n  iat: number;\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/local.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { AUTH_SERVICE } from '../interfaces/auth.service.interface';\n\nexport const LOCAL_STRATEGY = 'LOCAL_STRATEGY';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(@Inject(AUTH_SERVICE) private authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(email: string, password: string) {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(`Invalid Email and/or Password`);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamsDto.html":{"url":"classes/ParamsDto.html","title":"class - ParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParamsDto {\n  name?: string;\n  focusMuscle?: string[];\n  userId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Plan.html":{"url":"classes/Plan.html","title":"class - Plan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plan.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Validity of plan'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Plan', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Existing Exercises in the Plan', type: undefined})@Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id who created the plan'})@Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type PlanDocument = Plan & Document;\n\n@Schema({ collection: 'plans', timestamps: true })\nexport class Plan {\n  @ApiProperty({ description: 'Plan Id}' })\n  id: string;\n\n  @ApiProperty({ description: 'Plan Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Plan', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'Validity of plan' })\n  @Prop({ type: Date, required: true })\n  expiresIn?: Date;\n\n  @ApiProperty({ description: 'User Id who created the plan' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @ApiProperty({\n    description: 'Existing Exercises in the Plan',\n    type: [Training],\n  })\n  @Prop({ type: [TrainingSchema], required: false })\n  training?: Training[];\n}\n\nexport const PlanSchema = SchemaFactory.createForClass(Plan);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDate,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class PlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: Training[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlansController.html":{"url":"controllers/PlansController.html","title":"controller - PlansController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plans\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(id: string, request: Request, trainingData: TrainingDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/updatetraining')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingData\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreatePlanDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(request: Request, params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(id: string, request: Request, exerciseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/doneexercise')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Query,\n  UseGuards,\n  Patch,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  IPlansService,\n  PLANS_SERVICE,\n} from './interfaces/plans.service.interface';\nimport { Plan } from './plan.model';\nimport { CreatePlanDto, PlanDto } from './dtos/dtos';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n  CREATED_201,\n} from '../shared/utils/http-response-status.utils';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { IPlansController } from './interfaces/plans.controller.interface';\nimport { AccessTokenGuard } from '../auth/guard/access-token.guard';\n\n@Controller('plans')\n@UseGuards(AccessTokenGuard)\n@ApiTags('plans')\nexport class PlansController implements IPlansController {\n  constructor(\n    @Inject(PLANS_SERVICE)\n    private readonly service: IPlansService\n  ) {}\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Plan] })\n  async getAll(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return await this.service.getAll(userId);\n  }\n\n  @Get('search')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async findByParams(\n    @Req() request: Request,\n    @Query() params?: ParamsDto\n  ): Promise {\n    const userId = request.user?.id;\n    params.userId = userId;\n    const plan = await this.service.findByParams(params);\n    if (!plan || plan.length === 0) {\n      return;\n    }\n    return plan;\n  }\n\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async getById(@Param('id') id: string): Promise {\n    const plan = await this.service.getById(id);\n    if (!plan) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return plan;\n  }\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [PlanDto] })\n  @ApiBody({ type: CreatePlanDto })\n  async create(\n    @Body() plan: CreatePlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    plan.userId = userId;\n    return await this.service.create(plan);\n  }\n\n  @Patch(':id/update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() plan: PlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.update(id, plan, userId);\n  }\n\n  @Patch(':id/updatetraining')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async addOrUpdateTraining(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body() trainingData: TrainingDto[]\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.addOrUpdateTraining(id, userId, trainingData);\n  }\n\n  @Patch(':id/doneexercise')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateExerciseDoneStatus(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body('exerciseId') exerciseId: string\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.updateExerciseDoneStatus(id, userId, exerciseId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlansModule.html":{"url":"modules/PlansModule.html","title":"module - PlansModule","body":"\n                   \n\n\n\n\n    Modules\n    PlansModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlansModule\n\n\n\ncluster_PlansModule_imports\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/plans/plans.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            PlansController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExercisesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Plan, PlanSchema } from './plan.model';\nimport { PlansController } from './plans.controller';\nimport { PlansService } from './plans.service';\nimport { PlansRepository } from './plans.repository';\nimport { PLANS_SERVICE } from './interfaces/plans.service.interface';\nimport { PLANS_REPOSITORY } from './interfaces/plans.repository.interface';\nimport { ExercisesModule } from '../exercises/exercises.module';\nimport { ExercisesService } from '../exercises/exercises.service';\nimport { EXERCISES_SERVICE } from '../exercises/interfaces/exercises.service.interface';\nimport { SharedModule } from '../shared/shared.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Plan.name,\n        schema: PlanSchema,\n      },\n    ]),\n    ExercisesModule,\n    SharedModule,\n  ],\n  controllers: [PlansController],\n  providers: [\n    { useClass: PlansService, provide: PLANS_SERVICE },\n    { useClass: PlansRepository, provide: PLANS_REPOSITORY },\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n  ],\n})\nexport class PlansModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansRepository.html":{"url":"injectables/PlansRepository.html","title":"injectable - PlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addExercise\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPlanByExerciseId\n                            \n                            \n                                    Async\n                                savePlan\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    addExercise(planId: string, training: TrainingDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    training\n                                    \n                                                TrainingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlanByExerciseId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanByExerciseId(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        savePlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    savePlan(plan: Plan)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                Plan\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Plan, PlanDocument } from './plan.model';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { IPlansRepository } from './interfaces/plans.repository.interface';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { exerciseDataPipeline } from './pipelines/exercise-data.pipeline';\n\n@Injectable()\nexport class PlansRepository implements IPlansRepository {\n  constructor(\n    @InjectModel(Plan.name)\n    readonly model: Model\n  ) {}\n\n  async getAll(userId: string): Promise {\n    const pipeline = exerciseDataPipeline('userId', userId);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result;\n  }\n\n  async getById(id: string): Promise {\n    const pipeline = exerciseDataPipeline('_id', id);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result[0];\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    return await this.model.create(plan);\n  }\n\n  async update(id: string, plan: PlanDto): Promise {\n    await this.model.updateOne({ _id: id }, plan);\n  }\n\n  async savePlan(plan: Plan): Promise {\n    return this.model.findByIdAndUpdate(plan.id, plan, { new: true });\n  }\n\n  async getPlanByExerciseId(filter: any): Promise {\n    return await this.model.findOne(filter);\n  }\n\n  async addExercise(\n    planId: string,\n    training: TrainingDto,\n    userId: string\n  ): Promise {\n    await this.model.updateOne({\n      $and: [\n        {\n          _id: planId,\n          userId: userId,\n        },\n      ],\n      $push: {\n        training: training,\n      },\n    });\n  }\n\n  async updateExerciseDoneStatus(filter: any): Promise {\n    await this.model.updateOne(filter, {\n      $set: {\n        'training.$.done': true,\n      },\n    });\n  }\n\n  //removeExercise()\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansService.html":{"url":"injectables/PlansService.html","title":"injectable - PlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                            \n                                    Private\n                                updateTraining\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IPlansRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IPlansRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(planId: string, userId: string, trainingDto: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingDto\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(planId: string, userId: string, exerciseId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTraining(existingTraining: TrainingDto[], updateTraining: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    existingTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Training[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('PlansService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plans.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { IPlansService } from './interfaces/plans.service.interface';\nimport {\n  IPlansRepository,\n  PLANS_REPOSITORY,\n} from './interfaces/plans.repository.interface';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { mapPlan } from './utils/plan.mapper';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\nimport { Training } from '../shared/models/training.model';\nimport { TrainingDto } from '../shared/dtos/training.dto';\n\n@Injectable()\nexport class PlansService implements IPlansService {\n  private readonly logger = new Logger('PlansService');\n\n  constructor(\n    @Inject(PLANS_REPOSITORY)\n    private readonly repository: IPlansRepository\n  ) {}\n\n  async getAll(userId: string): Promise {\n    try {\n      return await this.repository.getAll(userId);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const plan = await this.repository.getById(id);\n      if (plan != null || plan !== undefined) {\n        return mapPlan(plan);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let plans = await this.repository.findByParams(parameters);\n      if (plans && plans.length > 0) {\n        return plans.map((item) => mapPlan(item));\n      } else {\n        return (plans = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid plan params`);\n    }\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    try {\n      const errors = await validate(plan);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(plan);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, plan: PlanDto, userId: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined && result.userId.toString() === userId) {\n        return await this.repository.update(id, plan);\n      } else {\n        throw new NotFoundException(\n          `Plan id ${id} not found or does not belongs to the user ${userId}`\n        );\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${id} failed`);\n    }\n  }\n\n  async addOrUpdateTraining(\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ): Promise {\n    try {\n      const plan = await this.repository.getById(planId);\n      if (!plan || plan.userId.toString() !== userId) {\n        throw new NotFoundException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const updatedTraining = this.updateTraining(plan.training, trainingDto);\n      plan.training = updatedTraining;\n\n      return this.repository.savePlan(plan);\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${planId} failed`);\n    }\n  }\n\n  private updateTraining(\n    existingTraining: TrainingDto[],\n    updateTraining: TrainingDto[]\n  ): Training[] {\n    const alteredTraining: TrainingDto[] = [];\n\n    for (const training of updateTraining) {\n      const existingTrainingIndex = existingTraining.findIndex(\n        (t) => t.exerciseId.toString() === training.exerciseId\n      );\n\n      if (existingTrainingIndex !== -1) {\n        existingTraining[existingTrainingIndex] = {\n          id: training.id,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        };\n      } else {\n        alteredTraining.push({\n          id: undefined,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        });\n      }\n    }\n\n    return [...existingTraining, ...alteredTraining];\n  }\n\n  async updateExerciseDoneStatus(\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ): Promise {\n    try {\n      const filter = {\n        _id: planId,\n        userId: userId,\n        training: {\n          $elemMatch: {\n            exerciseId: exerciseId,\n          },\n        },\n      };\n\n      const plan = await this.repository.getById(planId);\n\n      if (!plan) {\n        throw new BadRequestException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const exerciseExists = await this.repository.getPlanByExerciseId(filter);\n\n      if (!exerciseExists) {\n        throw new BadRequestException(\n          `Exercise id ${exerciseId} not found or plan does not belongs to the current user`\n        );\n      }\n\n      for (const training of plan.training) {\n        if (training.exerciseId.toString() === exerciseId) {\n          await this.repository.updateExerciseDoneStatus(filter);\n        }\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(\n        `Update status exercise in plan ${planId} failed`\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/refresh-token.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token expires in'})@Prop({type: Number, require: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/refresh-token.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token'})@Prop({type: String, require: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/refresh-token.model.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Schema({ _id: false })\nexport class RefreshToken {\n  @ApiProperty({ description: 'Refresh token' })\n  @Prop({ type: String, require: true })\n  refreshToken: string;\n\n  @ApiProperty({ description: 'Refresh token expires in' })\n  @Prop({ type: Number, require: true })\n  expiresIn: number;\n}\n\nexport type RefreshTokenDocument = RefreshToken & Document;\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresIn\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/refresh-token.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/refresh-token.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RefreshTokenDto {\n  refreshToken: string;\n  expiresIn: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/refresh-token.guard.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guard/refresh-token.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/refresh-token.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ForbiddenException, Inject, Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../auth.service';\nimport { AUTH_SERVICE } from '../interfaces/auth.service.interface';\n\nexport const REFRESH_TOKEN_STRATEGY = 'REFRESH_TOKEN_STRATEGY';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    private readonly configService: ConfigService\n  ) {\n    super({\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      passReqToCallback: true,\n    });\n  }\n  async validate(req: Request, payload: JwtPayload) {\n    const refreshToken = req\n      ?.get('authorization')\n      ?.replace('Bearer', '')\n      .trim();\n\n    if (!refreshToken) throw new ForbiddenException('Refresh token malformed');\n\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Routine.html":{"url":"classes/Routine.html","title":"class - Routine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Routine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routine.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                frequency\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                training\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\n\nexport type RoutineDocument = Routine & Document;\n\n@Schema({ collection: 'routines', timestamps: true })\nexport class Routine {\n  id: string;\n\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @Prop({ type: String, required: true })\n  frequency: string;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @Prop({ type: [TrainingSchema], required: true })\n  training: Training[];\n}\n\nexport const RoutineSchema = SchemaFactory.createForClass(Routine);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoutinesController.html":{"url":"controllers/RoutinesController.html","title":"controller - RoutinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoutinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        /*\nhttps://docs.nestjs.com/controllers#controllers\n*/\n\nimport { Controller } from '@nestjs/common';\n\n@Controller()\nexport class RoutinesController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoutinesModule.html":{"url":"modules/RoutinesModule.html","title":"module - RoutinesModule","body":"\n                   \n\n\n\n\n    Modules\n    RoutinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nRoutinesService\n\nRoutinesService\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/routines/routines.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoutinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoutinesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoutinesService } from './routines.service';\nimport { RoutinesController } from './routines.controller';\n\n@Module({\n  imports: [],\n  controllers: [RoutinesController],\n  providers: [RoutinesService],\n})\nexport class RoutinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesRepository.html":{"url":"injectables/RoutinesRepository.html","title":"injectable - RoutinesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.repository.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesRepository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesService.html":{"url":"injectables/RoutinesService.html","title":"injectable - RoutinesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistory.html":{"url":"classes/ShapeHistory.html","title":"class - ShapeHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/shape-history.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User age'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'According to registered User data, BMI calculation'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User height'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User weight'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ShapeHistoryDocument = ShapeHistory & Document;\n\n@Schema({ _id: false, timestamps: true })\nexport class ShapeHistory {\n  @ApiProperty({ description: 'User age' })\n  @Prop({ type: Date, required: true })\n  age: Date;\n\n  @ApiProperty({ description: 'User height' })\n  @Prop({ type: Number, required: true })\n  height: number;\n\n  @ApiProperty({ description: 'User weight' })\n  @Prop({ type: Number, required: true })\n  weight: number;\n\n  @ApiProperty({\n    description: 'According to registered User data, BMI calculation',\n  })\n  @Prop({ type: Number, required: true })\n  bmi: number;\n}\n\nexport const ShapeHistorySchema = SchemaFactory.createForClass(ShapeHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistoryDto.html":{"url":"classes/ShapeHistoryDto.html","title":"class - ShapeHistoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/shape-history.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsDefined, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class ShapeHistoryDto {\n  @ApiProperty()\n  @IsDate()\n  @IsDefined()\n  @IsNotEmpty()\n  age: Date;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  height: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  weight: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  bmi: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Training, TrainingSchema } from './models/training.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Training.name,\n        schema: TrainingSchema,\n      },\n    ]),\n  ],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Training.html":{"url":"classes/Training.html","title":"class - Training","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Training\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/models/training.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Control Done'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})@Prop({type: undefined, required: true, ref: 'Exercises'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Training Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise load/weight'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Notes'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Repetitions'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Series'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport mongoose from 'mongoose';\n\nexport type TrainingDocument = Training & Document;\n\n@Schema({ timestamps: true })\nexport class Training {\n  @ApiProperty({ description: 'Training Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Id' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Exercises',\n  })\n  exerciseId: string;\n\n  @ApiProperty({ description: 'Exercise Series' })\n  @Prop({ type: String, required: true })\n  series: string;\n\n  @ApiProperty({ description: 'Exercise Repetitions' })\n  @Prop({ type: String, required: true })\n  repetitions: string;\n\n  @ApiProperty({ description: 'Exercise load/weight' })\n  @Prop({ type: String, required: true })\n  load: string;\n\n  @ApiProperty({ description: 'Exercise Notes' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n\n  @ApiProperty({ description: 'Exercise Control Done' })\n  @Prop({ type: Boolean, required: true })\n  done: boolean;\n}\n\nexport const TrainingSchema = SchemaFactory.createForClass(Training);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingDto.html":{"url":"classes/TrainingDto.html","title":"class - TrainingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                series\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nexport class TrainingDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  exerciseId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  series: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  repetitions: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  load: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsBoolean()\n  done: boolean;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingUpdateDto.html":{"url":"classes/TrainingUpdateDto.html","title":"class - TrainingUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/update-training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class TrainingUpdateDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  exerciseId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  series?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  repetitions?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  load?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  done?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlanDto.html":{"url":"classes/UpdatePlanDto.html","title":"class - UpdatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/update-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [TrainingUpdateDto]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsArray,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { TrainingUpdateDto } from 'src/modules/shared/dtos/update-training.dto';\n\nexport class UpdatePlanDto {\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  id?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  focusMuscle?: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  userId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  training?: [TrainingUpdateDto];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User activation status'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User avatar'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User birth date'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User sur name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password, it must be 5 characters or more'})@Prop({type: String, required: true, minlength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User shape history data', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { ShapeHistory, ShapeHistorySchema } from './shape-history';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({ collection: 'users', timestamps: true })\nexport class User {\n  @ApiProperty({ description: 'User Id' })\n  id: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({\n    description: 'User password, it must be 5 characters or more',\n  })\n  @Prop({ type: String, required: true, minlength: 6 })\n  password: string;\n\n  @ApiProperty({ description: 'User first name' })\n  @Prop({ type: String, required: true })\n  firstName: string;\n\n  @ApiProperty({ description: 'User sur name' })\n  @Prop({ type: String, required: true })\n  lastName: string;\n\n  @ApiProperty({ description: 'User birth date' })\n  @Prop({ type: Date, required: true })\n  birthDate: Date;\n\n  @ApiProperty({ description: 'User activation status' })\n  @Prop({ type: Boolean, required: true })\n  active: boolean;\n\n  @ApiProperty({ description: 'User shape history data', type: [ShapeHistory] })\n  @Prop({ type: [ShapeHistorySchema], required: true })\n  shape: ShapeHistory[];\n\n  @ApiProperty({ description: 'User avatar' })\n  @Prop({ type: String, required: false })\n  avatar?: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ShapeHistory } from '../shape-history';\n\nexport class UserDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsDate()\n  birthDate: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistory[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                disable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                enable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/disable')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/enable')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('email')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get(':id')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/shape-update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from './interfaces/users.service.interface';\nimport { IUsersController } from './interfaces/users.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { User } from './user.model';\nimport { ShapeHistoryDto, UserDto, CreateUserDto } from './dtos/dtos';\nimport { AccessTokenGuard } from '../auth/guard/access-token.guard';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController implements IUsersController {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly service: IUsersService\n  ) {}\n\n  @UseGuards(AccessTokenGuard)\n  @Get()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [User] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Post()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [UserDto] })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise {\n    return await this.service.create(user);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('email')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getByEmail(@Query('email') email: string): Promise {\n    const user = await this.service.getByEmail(email);\n    if (!user) {\n      throw new NotFoundException(`Email ${email} not found`);\n    }\n    return user;\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getById(@Param('id') id: string): Promise {\n    const user = await this.service.getById(id);\n    if (!user) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return user;\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(@Param('id') id: string, @Body() user: UserDto): Promise {\n    return await this.service.update(id, user);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/shape-update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateShape(\n    @Param('id') id: string,\n    @Body() shape: ShapeHistoryDto\n  ): Promise {\n    return await this.service.updateShape(id, shape);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/enable')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async enable(@Param('id') id: string): Promise {\n    return await this.service.enable(id);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/disable')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async disable(@Param('id') id: string): Promise {\n    return await this.service.disable(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './user.model';\nimport { USERS_SERVICE } from './interfaces/users.service.interface';\nimport { USERS_REPOSITORY } from './interfaces/users.repository.interface';\nimport { UsersRepository } from './users.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: UsersRepository, provide: USERS_REPOSITORY },\n  ],\n  exports: [USERS_SERVICE, USERS_REPOSITORY],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './user.model';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { IUsersRepository } from './interfaces/users.repository.interface';\n\n@Injectable()\nexport class UsersRepository implements IUsersRepository {\n  constructor(\n    @InjectModel(User.name)\n    readonly model: Model\n  ) {}\n\n  async create(user: CreateUserDto): Promise {\n    return await this.model.create(user);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async getByEmail(email: string): Promise {\n    const result = await this.model.findOne({ email: email });\n    return result ? result : null;\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    await this.model.updateOne({ _id: id }, user);\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    await this.model.updateOne(\n      { _id: id },\n      {\n        $push: {\n          shape: {\n            age: shape.age,\n            height: shape.height,\n            weight: shape.weight,\n            bmi: shape.bmi,\n          },\n        },\n      }\n    );\n  }\n\n  async delete(id: string): Promise {\n    await this.model.deleteOne({ _id: id });\n  }\n\n  async enable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: true });\n  }\n\n  async disable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: false });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                hashedPassword\n                            \n                            \n                                transformString\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IUsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IUsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashedPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashedPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transformString\n                        \n                    \n                \n            \n            \n                \ntransformString(arr: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('UsersService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport {\n  IUsersRepository,\n  USERS_REPOSITORY,\n} from './interfaces/users.repository.interface';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { isEmail, validate } from 'class-validator';\nimport { IUsersService } from './interfaces/users.service.interface';\nimport { mapUser } from './utils/user.mapper';\n\n@Injectable()\nexport class UsersService implements IUsersService {\n  private readonly logger = new Logger('UsersService');\n\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly repository: IUsersRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const user = await this.repository.getById(id);\n      if (user != null || user != undefined) {\n        const userDto = mapUser(user);\n        return userDto;\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async getByEmail(email: string): Promise {\n    try {\n      const valid = isEmail(email);\n      if (valid) {\n        const user = await this.repository.getByEmail(email);\n        if (user != null || user != undefined) {\n          return mapUser(user);\n        }\n      } else {\n        throw new NotFoundException(`Email ${email} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid email ${email}`);\n    }\n  }\n\n  async hashedPassword(password: string): Promise {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async create(user: CreateUserDto): Promise {\n    try {\n      validate(user).then((errors) => {\n        if (errors.length > 0) {\n          throw new BadRequestException(errors);\n        }\n      });\n      const existis = await this.getByEmail(user.email);\n      if (!existis) {\n        user.password = await this.hashedPassword(user.password);\n        return await this.repository.create(user);\n      } else {\n        throw new BadRequestException(\n          `User with email ${user.email} already exists`\n        );\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, user);\n      } else {\n        throw new NotFoundException(`User id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update user id ${id} failed`);\n    }\n  }\n\n  transformString(arr: any): string {\n    const mergedProps: Record = {};\n\n    arr.forEach((obj) => {\n      for (const prop in obj) {\n        if (mergedProps[prop]) {\n          mergedProps[prop].push(obj[prop]);\n        } else {\n          mergedProps[prop] = [obj[prop]];\n        }\n      }\n    });\n\n    const result = Object.entries(mergedProps).map(\n      ([prop, messages]) => `${prop}: ${messages.join(', ')}`\n    );\n\n    return result.join('\\n');\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    const shapeHistoryDto = new ShapeHistoryDto();\n    shapeHistoryDto.age = new Date(shape.age);\n    shapeHistoryDto.height = shape.height;\n    shapeHistoryDto.weight = shape.weight;\n    shapeHistoryDto.bmi = shape.bmi;\n\n    const validObj = validate(shapeHistoryDto)\n      .then((errors) => {\n        if (errors.length > 0) {\n          const arr = errors.map((error) => error.constraints);\n          const str = this.transformString(arr);\n          this.logger.error(str);\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .catch((error) => {\n        this.logger.error(error);\n        throw new BadRequestException(error);\n      });\n\n    if ((await validObj) === true) {\n      const user = this.getById(id);\n      if (user !== undefined) {\n        await this.repository.updateShape(id, shape);\n      }\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async delete(id: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.delete(id);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Delete user id ${id} failed`);\n    }\n  }\n\n  async enable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.enable(id);\n        return `${id} enabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Enable user id ${id} failed`);\n    }\n  }\n\n  async disable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.disable(id);\n        return `${id} disabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Disable user id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            variable\n            AuthSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.repository.ts\n            \n            injectable\n            AuthRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/decorator/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/decorator/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/access-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/refresh-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            interface\n            IAuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            variable\n            AUTH_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            interface\n            IAuthRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            variable\n            AUTH_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            interface\n            IAuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            variable\n            AUTH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/refresh-token.model.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/refresh-token.model.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/access-token.strategy.ts\n            \n            variable\n            ACCESS_TOKEN_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            variable\n            LOCAL_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/refresh-token.strategy.ts\n            \n            variable\n            REFRESH_TOKEN_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/utils/credentials.utils.ts\n            \n            variable\n            comparePasswords\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/create-exercises.dto.ts\n            \n            class\n            CreateExerciseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/exercise.dto.ts\n            \n            class\n            ExerciseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            class\n            Exercise\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            variable\n            ExerciseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.controller.ts\n            \n            controller\n            ExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.repository.ts\n            \n            injectable\n            ExercisesRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.service.ts\n            \n            injectable\n            ExercisesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            interface\n            IExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            variable\n            EXERCISES_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            interface\n            IExercisesRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            variable\n            EXERCISES_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            interface\n            IExercisesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            variable\n            EXERCISES_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/utils/exercise.mapper.ts\n            \n            variable\n            mapExercise\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/create-plan.dto.ts\n            \n            class\n            CreatePlanDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/plan.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/update-plan.dto.ts\n            \n            class\n            UpdatePlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            interface\n            IPlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            variable\n            PLANS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            interface\n            IPlansRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            variable\n            PLANS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            interface\n            IPlansService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            variable\n            PLANS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/pipelines/exercise-data.pipeline.ts\n            \n            variable\n            exerciseDataPipeline\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            class\n            Plan\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            variable\n            PlanSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.controller.ts\n            \n            controller\n            PlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.repository.ts\n            \n            injectable\n            PlansRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.service.ts\n            \n            injectable\n            PlansService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/utils/plan.mapper.ts\n            \n            variable\n            mapPlan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            class\n            Routine\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            variable\n            RoutineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.controller.ts\n            \n            controller\n            RoutinesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.repository.ts\n            \n            injectable\n            RoutinesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.service.ts\n            \n            injectable\n            RoutinesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/params.dto.ts\n            \n            class\n            ParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/training.dto.ts\n            \n            class\n            TrainingDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/update-training.dto.ts\n            \n            class\n            TrainingUpdateDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/interfaces/default.controller.interface.ts\n            \n            interface\n            IDefaultController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            class\n            Training\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            variable\n            TrainingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/build-params.utils.ts\n            \n            variable\n            buildParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            BAD_REQUEST_400\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            CREATED_201\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NO_CONTENT_204\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NOT_FOUND_404\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            OK_200\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            SERVER_ERROR_500\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            UNAUTHORIZED_401\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/training.mapper.ts\n            \n            variable\n            mapTrainings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/shape-history.dto.ts\n            \n            class\n            ShapeHistoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            interface\n            IUsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            variable\n            USERS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            interface\n            IUsersRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            variable\n            USERS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            interface\n            IUsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            class\n            ShapeHistory\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            variable\n            ShapeHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/utils/user.mapper.ts\n            \n            variable\n            mapUser\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.4.0\n        \n            @nestjs/config : ^2.3.2\n        \n            @nestjs/core : ^9.4.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.4.0\n        \n            @nestjs/serve-static : ^4.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.1.0\n        \n            jsonwebtoken : ^9.0.0\n        \n            mongoose : ^7.1.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescrição\nAPI/Back-end da aplicação To-do Gym.\nUma aplicação web para controle de treinos, rotinas, evolução física e musculação na academia, além de demonstração da execução de exercícios físicos.\nDesenvolvida com TypeScript em NodeJS com o framework Nest.\nModelagem de Banco de Dados\n\n  \n\n\nAcesse Draw IO\nFuncionalidades\n\n  \n\n\nAcesse Miro\nDocumentação Modular Estática\nDocumentação de estrutura da aplicação gerada com Compodoc\nDocumentação de Endpoints com Swagger\nhttps://todo-gym-api.onrender.com/swagger/\nTecnologias Utilizadas\nLinguagem: TypeScript\nBack-end: NodeJS\nFramework Node: NestJS\nBanco de Dados: MongoDB\nODM Mongoose\nDocumentação API Rest: Swagger\nDocumentação Modular Estática: Compodoc\nDiagramação Banco de Dados: Draw IO\nDesenho de Fluxos: Miro\nInstalação\nFaça um clone do projeto em seu ambiente local\n# clone\n$ git clone https://github.com/flaviosoliver/todo-gym-api.gitInstale as dependências necessárias\nnpm installPara executar o projeto\nCrie em seu ambiente local, na raiz do diretório do projeto um arquivo .env e adicione as seguintes variáveis nele:\nMONGO_LOCAL='mongodb://127.0.0.1:27017'\nENVIRONMENT_LOCAL='development'\nPORT=3000\nJWT_SECRET='password'\nJWT_REFRESH_SECRET='password'Execute o projeto no modo desejado\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodExecutar via Docker\n*Em breve: Implementação futura\ndocker-compose up -d --buildTestes\n*Em breve: Implementação futura\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSobre mim\n\nAuthor - Flávio Oliveira\nPortfólio - https://flaviosoliver-portfolio.vercel.app/\nLinkedIn - https://www.linkedin.com/in/flaviosoliver/\nEmail - flavsoliver@gmail.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExercisesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlansModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoutinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRoutinesService\n\nRoutinesService\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : API da aplicação To-do Gym, construída em NodeJS, utilizando o framework NestJS na linguagem TypeScript\n        \n            License : UNLICENSED\n        \n            Author : Flávio Oliveira - https://github.com/flaviosoliver\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthDocument   (src/.../auth.model.ts)\n                        \n                        \n                            ExerciseDocument   (src/.../exercise.model.ts)\n                        \n                        \n                            PlanDocument   (src/.../plan.model.ts)\n                        \n                        \n                            RefreshTokenDocument   (src/.../refresh-token.model.ts)\n                        \n                        \n                            RoutineDocument   (src/.../routine.model.ts)\n                        \n                        \n                            ShapeHistoryDocument   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingDocument   (src/.../training.model.ts)\n                        \n                        \n                            UserDocument   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/auth.model.ts\n    \n    \n        \n            \n                \n                    \n                    AuthDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/exercises/exercise.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExerciseDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/plans/plan.model.ts\n    \n    \n        \n            \n                \n                    \n                    PlanDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/auth/refresh-token.model.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/routines/routine.model.ts\n    \n    \n        \n            \n                \n                    \n                    RoutineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/shape-history.ts\n    \n    \n        \n            \n                \n                    \n                    ShapeHistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/shared/models/training.model.ts\n    \n    \n        \n            \n                \n                    \n                    TrainingDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ACCESS_TOKEN_STRATEGY   (src/.../access-token.strategy.ts)\n                        \n                        \n                            AUTH_CONTROLLER   (src/.../auth.controller.interface.ts)\n                        \n                        \n                            AUTH_REPOSITORY   (src/.../auth.repository.interface.ts)\n                        \n                        \n                            AUTH_SERVICE   (src/.../auth.service.interface.ts)\n                        \n                        \n                            AuthSchema   (src/.../auth.model.ts)\n                        \n                        \n                            BAD_REQUEST_400   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            buildParams   (src/.../build-params.utils.ts)\n                        \n                        \n                            comparePasswords   (src/.../credentials.utils.ts)\n                        \n                        \n                            CREATED_201   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            exerciseDataPipeline   (src/.../exercise-data.pipeline.ts)\n                        \n                        \n                            EXERCISES_CONTROLLER   (src/.../exercises.controller.interface.ts)\n                        \n                        \n                            EXERCISES_REPOSITORY   (src/.../exercises.repository.interface.ts)\n                        \n                        \n                            EXERCISES_SERVICE   (src/.../exercises.service.interface.ts)\n                        \n                        \n                            ExerciseSchema   (src/.../exercise.model.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            LOCAL_STRATEGY   (src/.../local.strategy.ts)\n                        \n                        \n                            mapExercise   (src/.../exercise.mapper.ts)\n                        \n                        \n                            mapPlan   (src/.../plan.mapper.ts)\n                        \n                        \n                            mapTrainings   (src/.../training.mapper.ts)\n                        \n                        \n                            mapUser   (src/.../user.mapper.ts)\n                        \n                        \n                            NO_CONTENT_204   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            NOT_FOUND_404   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            OK_200   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            PLANS_CONTROLLER   (src/.../plans.controller.interface.ts)\n                        \n                        \n                            PLANS_REPOSITORY   (src/.../plans.repository.interface.ts)\n                        \n                        \n                            PLANS_SERVICE   (src/.../plans.service.interface.ts)\n                        \n                        \n                            PlanSchema   (src/.../plan.model.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REFRESH_TOKEN_STRATEGY   (src/.../refresh-token.strategy.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refresh-token.model.ts)\n                        \n                        \n                            RoutineSchema   (src/.../routine.model.ts)\n                        \n                        \n                            SERVER_ERROR_500   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            ShapeHistorySchema   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingSchema   (src/.../training.model.ts)\n                        \n                        \n                            UNAUTHORIZED_401   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            USERS_CONTROLLER   (src/.../users.controller.interface.ts)\n                        \n                        \n                            USERS_REPOSITORY   (src/.../users.repository.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.service.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/strategy/access-token.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ACCESS_TOKEN_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ACCESS_TOKEN_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/auth.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Auth)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/http-response-status.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BAD_REQUEST_400\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BAD REQUEST'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CREATED_201\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CREATED'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NO_CONTENT_204\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NO CONTENT'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NOT_FOUND_404\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NOT FOUND'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OK_200\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'OK'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER_ERROR_500\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'INTERNAL SERVER ERROR'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UNAUTHORIZED_401\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UNAUTHORIZED'\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/build-params.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (params?: ParamsDto): any => {\n  const opt: any = { $or: [] };\n\n  if (params && params.userId) {\n    opt.$or.push({ userId: params.userId });\n  }\n\n  if (params && params.name) {\n    opt.$or.push({ name: { $regex: params.name, $options: 'i' } });\n  }\n\n  if (params && params.focusMuscle?.length > 0) {\n    opt.$or.push({ focusMuscle: { $in: params.focusMuscle } });\n  } else {\n    opt.$or.focusMuscle = [];\n  }\n\n  return opt;\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/utils/credentials.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  passwordLogin: string,\n  passwordUser: string\n): Promise => {\n  return await bcrypt.compare(passwordLogin, passwordUser);\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/pipelines/exercise-data.pipeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exerciseDataPipeline\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (field: string, value: string): any => [\n  {\n    $match: {\n      [field]: new mongoose.Types.ObjectId(value),\n    },\n  },\n  {\n    $unwind: '$training',\n  },\n  {\n    $lookup: {\n      from: 'exercises',\n      localField: 'training.exerciseId',\n      foreignField: '_id',\n      as: 'exerciseDetails',\n    },\n  },\n  {\n    $unwind: '$exerciseDetails',\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        exerciseId: '$exerciseDetails._id',\n        series: '$training.series',\n        repetitions: '$training.repetitions',\n        load: '$training.load',\n        done: '$training.done',\n        createdAt: '$training.createdAt',\n        updatedAt: '$training.updatedAt',\n        exerciseName: '$exerciseDetails.name',\n        exerciseFocusMuscle: '$exerciseDetails.focusMuscle',\n        exerciseImage: '$exerciseDetails.image',\n        exerciseVideo: '$exerciseDetails.video',\n        notes: {\n          $concat: ['$training.notes', '\\n', '$exerciseDetails.notes'],\n        },\n      },\n    },\n  },\n  {\n    $group: {\n      _id: '$_id',\n      name: {\n        $first: '$name',\n      },\n      focusMuscle: {\n        $first: '$focusMuscle',\n      },\n      userId: {\n        $first: '$userId',\n      },\n      training: {\n        $push: '$training',\n      },\n      exerciseDetails: {\n        $push: '$exerciseDetails',\n      },\n    },\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        $map: {\n          input: '$training',\n          as: 't',\n          in: {\n            $mergeObjects: [\n              '$$t',\n              {\n                $arrayElemAt: [\n                  {\n                    $filter: {\n                      input: '$exerciseDetails',\n                      as: 'e',\n                      cond: {\n                        $eq: ['$$e._id', '$$t.exerciseId'],\n                      },\n                    },\n                  },\n                  0,\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/exercise.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExerciseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Exercise)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorator/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/strategy/local.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOCAL_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOCAL_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/utils/exercise.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapExercise\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (exercise: Exercise): ExerciseDto => {\n  return {\n    id: exercise.id,\n    name: exercise.name,\n    focusMuscle: exercise.focusMuscle,\n    image: exercise.image,\n    video: exercise.video,\n    notes: exercise.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/utils/plan.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapPlan\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (plan: Plan): PlanDto => {\n  return {\n    id: plan.id,\n    name: plan.name,\n    focusMuscle: plan.focusMuscle,\n    expiresIn: plan.expiresIn,\n    userId: plan.userId,\n    training: plan.training,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/training.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapTrainings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (training: Training): TrainingDto => {\n  return {\n    id: training.id,\n    exerciseId: training.exerciseId,\n    series: training.series,\n    repetitions: training.repetitions,\n    load: training.load,\n    done: training.done,\n    notes: training.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/users/utils/user.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (user: User): UserDto => {\n  return {\n    id: user.id,\n    email: user.email,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    birthDate: user.birthDate,\n    active: user.active,\n    shape: user.shape,\n    avatar: user.avatar ? user.avatar : '',\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/plan.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PlanSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Plan)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/strategy/refresh-token.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REFRESH_TOKEN_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'REFRESH_TOKEN_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/refresh-token.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/modules/routines/routine.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoutineSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Routine)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/shape-history.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShapeHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShapeHistory)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/models/training.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TrainingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Training)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
