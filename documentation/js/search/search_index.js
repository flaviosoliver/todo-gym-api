var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.819,1,3.114]],["body/injectables/AccessTokenGuard.html",[0,1.425,1,5.419,2,2.151,3,0.2,4,0.2,5,0.178,6,6.014,7,4.53,8,2.648,9,0.84,10,5.028,11,0.351,12,0.014,13,1.33,14,3.615,15,2.906,16,0.2,17,0.01,18,3.862,19,5.028,20,3.862,21,0.012,22,0.012]],["title/injectables/AccessTokenStrategy.html",[0,0.819,23,2.859]],["body/injectables/AccessTokenStrategy.html",[0,1.198,2,1.634,3,0.152,4,0.152,5,0.135,8,2.081,9,0.845,11,0.376,12,0.014,13,1.01,15,2.208,16,0.201,17,0.007,18,2.934,20,2.934,21,0.01,22,0.01,23,4.184,24,5.109,25,3.16,26,0.298,27,2.081,28,2.246,29,3.637,30,4.393,31,4.086,32,4.393,33,2.164,34,1.155,35,0.448,36,1.29,37,3.424,38,5.817,39,4.086,40,4.393,41,4.184,42,1.572,43,1.492,44,3.442,45,1.926,46,4.557,47,3.82,48,3.442,49,3.16,50,4.184,51,3.442,52,3.16,53,2.445,54,4.393,55,1.926,56,4.393,57,1.201,58,4.184,59,3.82,60,3.442,61,2.106,62,1.771,63,3.82,64,4.393,65,3.82,66,3.82,67,3.82,68,2.106,69,1.457,70,2.333,71,1.771,72,3.82,73,2.32,74,2.012,75,1.513]],["title/controllers/AppController.html",[76,1.743,77,2.859]],["body/controllers/AppController.html",[3,0.171,4,0.171,5,0.152,9,0.913,11,0.369,12,0.014,13,1.139,16,0.171,17,0.008,21,0.011,22,0.011,26,0.336,27,2.25,28,2.379,33,1.842,34,0.983,35,0.381,36,1.098,42,2.25,62,1.996,75,2.165,76,2.756,77,4.522,78,2.081,79,4.306,80,6.317,81,6.287,82,1.734,83,4.953,84,0.701,85,4.953,86,4.277,87,6.287,88,4.953,89,6.908,90,3.562,91,2.915,92,4.319,93,4.306,94,6.287,95,4.953,96,4.953,97,4.953,98,4.953,99,4.953]],["title/modules/AppModule.html",[100,1.602,101,2.859]],["body/modules/AppModule.html",[3,0.135,4,0.135,5,0.12,11,0.393,12,0.014,13,0.896,16,0.135,17,0.007,21,0.009,22,0.009,28,1.342,45,1.708,57,1.129,68,1.868,75,1.342,77,4.412,78,2.254,92,4.479,93,3.388,100,2.473,101,5.8,102,1.959,103,2.294,104,2.603,105,2.603,106,2.294,107,3.415,108,2.169,109,3.388,110,3.388,111,3.388,112,4.784,113,4.479,114,4.784,115,4.784,116,4.479,117,4.479,118,3.583,119,2.603,120,2.603,121,3.897,122,3.611,123,2.436,124,1.342,125,4.664,126,4.753,127,2.603,128,3.897,129,3.897,130,3.388,131,3.388,132,3.897,133,3.388,134,3.897,135,3.897,136,3.897,137,3.388,138,3.897,139,3.897,140,3.897,141,3.897,142,5.365,143,3.897,144,3.897,145,3.897,146,3.897]],["title/injectables/AppService.html",[0,0.819,92,2.485]],["body/injectables/AppService.html",[0,1.422,2,2.144,3,0.2,4,0.2,5,0.177,9,0.837,11,0.292,12,0.014,13,1.326,16,0.2,17,0.01,21,0.012,22,0.012,26,0.392,27,2.47,42,2.063,75,1.985,80,6.662,84,0.769,92,4.317,147,5.012,148,5.765,149,5.765,150,5.765]],["title/classes/Auth.html",[17,0.007,151,2.34]],["body/classes/Auth.html",[3,0.142,4,0.142,5,0.126,9,0.981,11,0.343,12,0.014,16,0.218,17,0.007,21,0.01,22,0.01,26,0.279,35,0.583,57,0.756,69,2.24,70,2.709,82,1.863,84,0.864,124,1.414,151,3.977,152,1.218,153,2.954,154,0.807,155,4.211,156,3.333,157,2.345,158,3.977,159,3.571,160,4.284,161,3.408,162,4.107,163,3.571,164,4.107,165,3.941,166,4.211,167,4.107,168,4.534,169,4.107,170,1.146,171,4.107,172,3.568,173,2.437,174,2.286,175,2.431,176,1.175,177,3.095,178,1.881,179,4.107,180,2.954,181,2.743,182,2.417,183,3.094,184,4.107,185,2.954,186,3.571]],["title/controllers/AuthController.html",[76,1.743,187,2.859]],["body/controllers/AuthController.html",[3,0.113,4,0.113,5,0.1,8,1.168,9,0.808,11,0.369,12,0.014,13,0.751,14,2.041,15,1.64,16,0.113,17,0.006,21,0.008,22,0.008,26,0.222,27,1.693,28,2.508,33,2.071,34,1.105,35,0.499,36,1.235,42,1.992,43,1.734,45,1.431,55,2.441,57,1.025,61,1.565,62,1.316,69,1.082,71,1.908,75,1.917,76,1.431,78,1.371,82,1.536,86,1.921,91,1.921,151,1.921,156,2.168,157,1.214,165,2.041,176,0.934,183,3.501,187,3.404,188,2.838,189,2.347,190,3.404,191,3.404,192,3.264,193,4.079,194,3.264,195,4.005,196,4.005,197,2.347,198,2.347,199,4.361,200,3.264,201,4.005,202,2.838,203,4.684,204,3.264,205,3.404,206,3.264,207,3.264,208,3.264,209,3.264,210,2.347,211,3.404,212,2.557,213,2.347,214,4.392,215,3.404,216,4.392,217,4.392,218,2.347,219,4.392,220,4.005,221,1.921,222,3.161,223,2.18,224,3.404,225,3.264,226,3.818,227,3.818,228,3.818,229,2.959,230,2.347,231,2.347,232,3.264,233,1.724,234,1.042,235,3.264,236,3.264,237,1.495,238,2.838,239,2.347,240,3.264,241,3.264,242,2.379,243,3.264,244,3.264,245,3.404,246,3.264,247,2.838,248,3.264,249,3.264,250,3.264,251,2.18,252,3.264,253,3.264]],["title/classes/AuthDto.html",[17,0.007,233,2.1]],["body/classes/AuthDto.html",[3,0.165,4,0.165,5,0.146,9,1.04,11,0.344,12,0.014,16,0.165,17,0.01,21,0.01,22,0.01,26,0.323,35,0.551,69,2.248,82,1.974,84,0.845,152,1.412,154,0.89,155,4.528,156,3.105,157,2.522,165,2.975,175,2.551,176,1.361,233,3.237,254,4.138,255,4.759,256,4.759,257,3.729,258,4.759,259,4.876,260,4.759,261,4.759,262,2.801,263,4.759,264,3.432,265,4.094,266,6.129,267,3.412,268,3.432,269,6.129,270,3.432,271,1.842,272,4.759]],["title/modules/AuthModule.html",[100,1.602,112,2.655]],["body/modules/AuthModule.html",[3,0.129,4,0.129,5,0.114,8,1.329,11,0.405,12,0.014,13,0.854,16,0.129,17,0.006,21,0.009,22,0.009,23,3.732,28,1.279,34,0.737,37,3.055,45,1.628,53,2.889,58,3.732,78,2.18,100,2.411,102,1.867,103,2.187,104,2.481,105,2.481,106,2.187,107,2.889,108,2.889,112,4.714,117,4.412,118,3.466,119,2.481,120,2.481,122,3.521,123,2.323,124,1.279,125,5.2,126,4.657,127,2.481,131,3.23,137,3.23,151,2.187,173,1.628,185,3.732,187,4.302,221,3.521,223,2.481,273,3.715,274,3.715,275,3.715,276,4.512,277,3.715,278,2.91,279,3.715,280,3.245,281,2.91,282,3.732,283,3.715,284,3.995,285,2.91,286,2.91,287,3.23,288,3.715,289,3.715,290,5.19,291,3.732,292,3.732,293,3.715,294,3.732,295,3.732,296,3.715,297,2.481,298,3.715,299,3.715,300,3.23,301,3.715,302,3.715,303,1.962,304,3.715,305,5.076,306,5.076,307,3.715]],["title/injectables/AuthRepository.html",[0,0.819,282,2.859]],["body/injectables/AuthRepository.html",[0,1.091,2,1.422,3,0.132,4,0.132,5,0.118,8,1.895,9,1,11,0.361,12,0.014,13,0.879,16,0.132,17,0.006,21,0.009,22,0.009,26,0.26,27,1.895,28,2.684,33,2.561,34,1.367,35,0.53,36,1.527,42,2.346,43,1.909,57,0.704,62,1.541,71,2.642,75,2.092,84,0.842,124,1.317,151,4.448,155,2.554,156,2.425,166,4.379,178,1.751,180,2.75,233,3.463,237,1.751,282,3.808,285,2.996,286,2.996,308,3.324,309,1.691,310,4.604,311,4.604,312,4.604,313,2.75,314,5.122,315,3.824,316,5.295,317,3.824,318,5.295,319,3.824,320,5.295,321,3.824,322,5.295,323,3.824,324,2.75,325,3.536,326,2.996,327,3.824,328,3.824,329,4.604,330,2.75,331,5.295,332,3.31]],["title/injectables/AuthService.html",[0,0.819,280,2.485]],["body/injectables/AuthService.html",[0,0.631,2,0.693,3,0.065,4,0.065,5,0.057,8,1.096,9,0.978,11,0.321,12,0.014,13,0.429,16,0.065,17,0.003,21,0.005,22,0.005,26,0.127,27,1.096,28,2.528,31,2.66,33,2.284,34,1.218,35,0.472,36,1.361,37,2.296,39,2.66,41,3.25,42,2.196,43,1.52,45,0.817,46,2.4,51,1.46,52,1.34,53,1.037,57,1.319,60,1.46,61,3.465,62,2.61,69,2.327,70,2.317,71,2.713,72,2.664,73,3.338,74,3.084,75,2.114,84,0.876,90,2.806,126,4.08,127,1.245,154,0.445,155,3.958,156,3.084,157,2.284,166,1.245,170,0.384,180,2.806,190,2.203,191,2.203,201,3.861,222,2.046,223,1.245,233,2.387,234,0.595,237,0.854,242,2.852,251,1.245,278,1.46,280,1.915,284,1.245,285,1.46,287,1.62,300,1.62,303,2.387,325,3.018,333,1.62,334,3.25,335,3.901,336,3.901,337,3.064,338,3.064,339,3.901,340,2.664,341,3.901,342,3.392,343,2.664,344,1.34,345,5.674,346,3.064,347,2.203,348,3.064,349,1.864,350,3.064,351,1.864,352,1.864,353,1.864,354,3.064,355,1.864,356,3.064,357,1.864,358,3.064,359,1.864,360,1.864,361,1.864,362,1.864,363,3.064,364,1.864,365,2.606,366,2.606,367,3.064,368,3.064,369,1.864,370,3.064,371,1.864,372,3.591,373,1.097,374,1.46,375,1.864,376,1.864,377,1.864,378,3.591,379,3.064,380,4.519,381,3.064,382,2.4,383,1.864,384,3.54,385,1.864,386,1.864,387,1.62,388,1.864,389,1.864,390,3.591,391,3.335,392,3.591,393,1.864,394,1.037,395,1.864,396,1.864,397,1.864,398,1.037,399,3.064,400,1.864,401,3.901,402,3.901,403,3.064,404,1.864,405,1.864,406,1.864,407,1.864,408,1.864,409,1.864,410,1.864,411,1.864,412,1.864,413,1.864,414,2.046,415,2.664,416,1.864,417,1.864,418,1.864,419,1.864,420,1.864,421,1.864,422,1.864,423,3.064,424,3.064,425,1.864,426,1.864,427,1.864]],["title/classes/CreateExerciseDto.html",[17,0.007,428,2.1]],["body/classes/CreateExerciseDto.html",[3,0.157,4,0.157,5,0.139,9,1.059,11,0.301,12,0.014,16,0.157,17,0.01,21,0.01,22,0.01,26,0.307,34,1.313,35,0.561,36,1.659,82,2.011,84,0.88,152,1.342,154,0.861,175,2.576,176,1.294,264,3.171,268,2.843,270,3.495,271,1.751,428,3.132,429,6.504,430,3.933,431,3.325,432,4.419,433,3.683,434,4.419,435,2.828,436,4.524,437,4.646,438,4.524,439,3.253,440,4.524,441,3.933,442,4.524,443,4.524,444,3.708,445,3.491,446,3.709,447,5.183]],["title/classes/CreatePlanDto.html",[17,0.007,448,2.1]],["body/classes/CreatePlanDto.html",[3,0.155,4,0.155,5,0.138,9,1.055,11,0.334,12,0.014,16,0.155,17,0.01,21,0.01,22,0.01,26,0.304,34,1.307,35,0.559,36,1.551,82,2.004,84,0.831,152,1.329,154,0.855,157,2.449,175,2.569,176,1.281,262,2.637,264,3.353,267,3.28,268,3.156,270,3.156,271,1.734,303,3.478,431,3.309,435,2.8,444,3.684,445,3.876,446,3.478,448,3.112,449,6.487,450,3.509,451,3.417,452,3.28,453,3.509,454,4.48,455,4.48,456,2.992,457,4.48,458,3.895,459,3.895,460,3.895,461,3.684,462,3.895]],["title/classes/CreateUserDto.html",[17,0.007,463,2.1]],["body/classes/CreateUserDto.html",[3,0.133,4,0.133,5,0.118,9,1.082,11,0.309,12,0.014,16,0.133,17,0.009,21,0.009,22,0.009,26,0.261,35,0.573,36,1.178,69,2.018,82,2.055,84,0.869,152,1.139,154,0.771,175,2.604,176,1.098,242,3.465,264,3.571,265,3.547,268,3.504,270,3.418,271,1.486,435,2.401,439,3.819,444,3.32,445,3.126,446,2.805,461,3.32,463,2.805,464,6.576,465,3.338,466,4.066,467,4.378,468,4.378,469,4.378,470,4.378,471,3.301,472,3.32,473,3.338,474,3.84,475,2.565,476,3.84,477,3.84,478,3.84,479,3.84,480,3.84,481,3.84,482,3.84,483,3.84,484,5.31,485,5.31,486,4.617,487,4.617,488,4.617,489,3.84,490,3.059,491,3.84,492,3.819,493,3.338,494,3.84,495,3.84]],["title/classes/Exercise.html",[17,0.007,496,1.743]],["body/classes/Exercise.html",[3,0.204,4,0.125,5,0.111,9,1.015,11,0.258,12,0.014,16,0.204,17,0.006,21,0.009,22,0.009,26,0.245,34,1.268,35,0.603,36,1.55,57,0.664,68,3.351,82,1.928,84,0.902,124,1.241,152,1.069,154,0.738,158,4.114,160,4.449,161,3.086,170,1.388,172,3.692,173,2.228,174,2.007,175,2.473,176,1.031,177,2.007,181,2.408,182,2.122,183,3.202,431,2.958,432,4.268,433,3.75,434,4.268,496,3.432,497,2.593,498,4.418,499,4.418,500,2.824,501,1.728,502,3.605,503,3.605,504,6.39,505,6.39,506,3.605,507,3.605,508,2.824,509,3.605,510,3.605,511,3.605,512,3.605,513,3.605,514,2.824,515,2.254,516,2.593,517,3.134]],["title/classes/ExerciseDto.html",[17,0.007,518,1.998]],["body/classes/ExerciseDto.html",[3,0.152,4,0.152,5,0.135,9,1.077,11,0.295,12,0.014,16,0.152,17,0.01,21,0.01,22,0.01,26,0.298,34,1.295,35,0.571,36,1.646,82,2.046,84,0.888,152,1.303,154,0.845,170,1.344,175,2.606,176,1.256,262,2.586,264,3.328,267,3.238,268,3.126,270,3.557,271,1.7,431,3.278,432,4.356,433,3.63,434,4.356,435,2.747,437,4.557,439,3.16,441,3.82,444,3.637,445,3.424,446,3.667,447,5.109,518,2.924,519,3.82,520,4.393,521,4.393,522,4.393,523,4.393,524,4.393,525,4.393]],["title/controllers/ExercisesController.html",[76,1.743,526,2.859]],["body/controllers/ExercisesController.html",[3,0.089,4,0.089,5,0.079,8,0.916,9,0.849,11,0.346,12,0.014,13,0.589,14,1.601,15,1.287,16,0.089,17,0.004,21,0.007,22,0.007,26,0.174,27,1.412,28,2.56,33,2.013,34,1.074,35,0.561,36,1.2,42,2.092,43,1.786,45,1.122,57,0.727,61,1.227,62,1.032,71,2.356,73,1.352,74,1.173,75,2.127,76,1.122,78,1.076,82,1.612,84,0.688,86,1.507,170,1.204,176,0.732,183,3.589,189,1.841,195,4.204,196,4.204,197,3.892,198,3.892,199,4.262,205,1.841,210,2.838,211,2.838,213,1.841,214,4.441,215,4.204,216,4.441,217,4.441,218,1.841,219,4.441,220,4.441,226,3.861,227,3.861,228,3.861,229,3.654,230,1.841,231,1.841,234,0.818,237,1.173,239,1.841,245,4.204,309,1.26,373,1.507,394,1.425,398,1.425,428,3.262,496,3.228,501,2.308,515,1.601,518,3.234,526,2.838,527,2.226,528,1.808,529,1.863,530,1.468,531,1.658,532,2.006,533,2.226,534,3.216,535,2.006,536,2.56,537,1.71,538,2.095,539,2.226,540,2.56,541,1.73,542,1.841,543,2.006,544,2.56,545,1.352,546,2.006,547,2.56,548,1.352,549,2.006,550,2.56,551,2.006,552,2.006,553,2.006,554,3.092,555,1.601,556,2.636,557,2.006,558,2.838,559,2.56,560,1.841,561,1.601,562,2.56,563,2.56,564,2.56,565,2.226,566,2.226,567,2.56,568,2.226,569,2.56,570,2.006,571,2.006,572,2.006,573,1.601,574,2.226,575,2.56,576,2.006,577,2.006,578,2.006]],["title/modules/ExercisesModule.html",[100,1.602,113,2.485]],["body/modules/ExercisesModule.html",[3,0.172,4,0.172,5,0.153,11,0.4,12,0.014,13,1.142,16,0.172,17,0.008,21,0.011,22,0.011,34,0.986,78,2.646,100,2.538,102,2.496,107,2.764,108,2.764,113,3.937,122,2.923,123,3.105,124,1.71,173,2.177,297,3.317,305,4.529,306,4.529,496,2.177,516,4.529,526,4.974,555,4.324,557,3.891,560,3.572,579,4.966,580,4.206,581,4.966,582,4.966,583,4.619,584,3.891,585,4.529,586,4.966,587,4.318]],["title/injectables/ExercisesRepository.html",[0,0.819,585,2.859]],["body/injectables/ExercisesRepository.html",[0,1.072,2,1.388,3,0.129,4,0.129,5,0.115,8,1.862,9,1.026,11,0.368,12,0.014,13,0.858,16,0.129,17,0.006,21,0.009,22,0.009,26,0.253,27,1.862,28,2.726,33,2.538,34,1.354,35,0.525,36,1.513,42,2.441,43,1.952,62,1.503,71,2.75,75,2.234,84,0.787,124,1.284,170,1.235,178,1.708,234,1.191,237,1.708,309,1.662,313,2.683,314,5.082,324,2.683,330,2.683,428,3.426,496,3.098,514,2.922,518,3.26,528,2.384,529,2.234,530,1.936,531,1.792,532,4.077,537,3.476,538,2.511,541,1.635,545,2.749,548,2.749,560,2.683,561,2.332,584,2.922,585,3.743,588,3.243,589,3.73,590,3.73,591,3.73,592,3.73,593,3.73,594,3.73,595,3.476,596,3.73,597,3.73,598,3.243,599,3.243,600,3.243,601,2.196]],["title/injectables/ExercisesService.html",[0,0.819,580,2.655]],["body/injectables/ExercisesService.html",[0,0.863,2,1.03,3,0.096,4,0.096,5,0.085,8,1.499,9,0.96,11,0.346,12,0.014,13,0.637,16,0.096,17,0.007,21,0.007,22,0.007,26,0.188,27,1.499,28,2.598,29,1.732,33,2.369,34,1.202,35,0.466,36,1.343,42,2.166,43,1.823,45,1.214,57,1.038,61,2.702,62,2.272,71,2.666,73,3.494,74,3.194,75,2.193,84,0.71,154,0.608,170,1.437,234,0.885,237,1.269,271,1.072,309,1.338,332,2.62,334,4.054,344,1.992,347,3.014,365,1.85,366,1.85,372,1.992,373,1.63,378,4.354,390,4.354,391,4.418,392,4.354,394,2.333,398,2.333,414,1.85,428,2.977,496,3.116,501,2.009,515,3.16,518,2.833,528,1.919,529,1.941,530,1.559,531,1.443,532,3.283,537,2.799,538,2.182,541,1.837,542,1.992,545,2.213,548,2.213,556,2.799,557,2.17,561,1.732,573,1.732,580,2.799,583,1.85,584,2.17,595,3.765,602,2.408,603,4.191,604,2.77,605,2.77,606,2.77,607,2.77,608,2.77,609,4.191,610,2.17,611,2.77,612,1.992,613,2.408,614,2.408,615,2.77,616,2.408,617,2.408,618,2.408,619,2.77,620,2.77,621,2.77,622,3.283,623,3.283,624,2.77,625,2.408,626,2.77,627,2.17,628,2.17,629,2.77,630,2.17,631,2.17,632,2.17,633,2.77,634,2.17,635,2.17]],["title/interfaces/IAuthController.html",[224,2.859,636,0.948]],["body/interfaces/IAuthController.html",[3,0.183,4,0.183,5,0.163,9,0.769,11,0.333,12,0.014,16,0.227,21,0.011,22,0.011,26,0.36,27,2.346,33,1.971,34,1.051,35,0.505,36,1.175,42,1.895,43,1.827,57,0.975,91,3.118,154,0.952,190,5.353,191,4.716,193,4.38,201,3.809,202,5.702,203,4.783,224,4.716,233,2.798,234,1.692,636,1.263,637,2.135,638,4.15,639,5.297,640,2.755,641,5.138]],["title/interfaces/IAuthRepository.html",[325,2.655,636,0.948]],["body/interfaces/IAuthRepository.html",[3,0.175,4,0.175,5,0.156,11,0.323,12,0.014,16,0.221,21,0.011,22,0.011,26,0.344,35,0.564,43,1.878,57,0.932,84,0.778,151,4.311,154,0.926,156,2.319,166,4.258,233,3.367,284,4.258,286,3.966,309,2.339,310,6.368,311,6.368,312,6.368,325,4.258,326,3.966,636,1.207,637,2.04,640,3.324,642,3.966]],["title/interfaces/IAuthService.html",[222,2.655,636,0.948]],["body/interfaces/IAuthService.html",[3,0.164,4,0.164,5,0.146,11,0.343,12,0.014,16,0.211,21,0.01,22,0.01,26,0.322,35,0.569,39,3.596,41,3.405,43,1.567,50,3.405,52,3.405,55,2.075,57,0.872,69,2.025,84,0.859,154,0.887,155,3.162,156,2.169,157,1.761,190,5.139,191,5.139,221,3.596,222,4.08,233,2.501,242,3.07,251,3.162,326,3.709,340,6.213,342,6.213,343,6.213,636,1.129,637,1.908,640,3.342,643,3.709,644,4.735,645,6.763]],["title/interfaces/IDefaultController.html",[636,0.948,646,3.114]],["body/interfaces/IDefaultController.html",[3,0.178,4,0.178,5,0.158,12,0.014,16,0.178,21,0.011,22,0.011,26,0.349,35,0.583,43,1.944,84,0.717,154,0.934,170,1.325,201,4.625,309,2.351,529,2.535,531,2.535,636,1.224,637,2.069,640,3.386,646,5.038,647,4.463,648,4.916,649,7.361,650,5.038,651,4.463]],["title/interfaces/IExercisesController.html",[558,2.859,636,0.948]],["body/interfaces/IExercisesController.html",[3,0.167,4,0.167,5,0.149,11,0.346,12,0.014,16,0.214,21,0.011,22,0.011,26,0.328,35,0.573,43,1.909,57,0.89,84,0.69,154,0.899,170,1.276,234,1.544,309,2.3,428,3.27,496,2.994,518,3.112,528,3.299,529,2.48,530,2.679,531,2.48,538,2.396,541,2.119,558,4.453,560,3.477,636,1.153,637,1.949,640,3.354,652,3.788,653,3.023,654,4.85]],["title/interfaces/IExercisesRepository.html",[595,2.655,636,0.948]],["body/interfaces/IExercisesRepository.html",[3,0.17,4,0.17,5,0.151,11,0.317,12,0.014,16,0.216,21,0.011,22,0.011,26,0.333,35,0.575,43,1.917,57,0.902,84,0.696,154,0.907,170,1.286,234,1.565,309,2.312,428,3.298,496,2.737,518,3.138,528,3.315,529,2.492,530,2.692,531,2.492,538,2.417,541,2.148,583,4.17,595,4.17,636,1.169,637,1.975,640,3.361,653,3.063,655,3.838]],["title/interfaces/IExercisesService.html",[556,2.655,636,0.948]],["body/interfaces/IExercisesService.html",[3,0.17,4,0.17,5,0.151,11,0.317,12,0.014,16,0.216,21,0.011,22,0.011,26,0.333,35,0.575,43,1.917,57,0.902,84,0.696,154,0.907,170,1.286,234,1.565,309,2.312,428,3.298,496,2.737,518,3.138,528,3.315,529,2.492,530,2.692,531,2.492,538,2.417,541,2.148,555,3.904,556,4.17,636,1.169,637,1.975,640,3.361,653,3.063,656,3.838]],["title/interfaces/IPlansController.html",[636,0.948,657,2.859]],["body/interfaces/IPlansController.html",[3,0.147,4,0.147,5,0.13,11,0.362,12,0.014,16,0.197,21,0.01,22,0.01,26,0.288,35,0.577,43,1.924,57,0.781,84,0.795,91,2.496,154,0.825,170,1.41,203,4.986,234,1.354,309,2.186,448,3.001,528,3.135,529,2.357,530,2.546,531,2.357,538,2.199,541,1.859,636,1.011,637,1.709,640,3.368,653,2.651,657,4.086,658,3.322,659,4.923,660,4.279,661,3.001,662,3.687,663,2.856,664,3.071,665,2.832,666,4.451,667,3.687,668,2.36]],["title/interfaces/IPlansRepository.html",[636,0.948,669,2.655]],["body/interfaces/IPlansRepository.html",[3,0.153,4,0.153,5,0.136,11,0.332,12,0.014,16,0.202,21,0.01,22,0.01,26,0.301,35,0.592,43,1.974,57,0.815,84,0.729,154,0.849,157,1.646,170,1.204,234,1.413,309,2.224,448,3.087,528,3.189,529,2.397,530,2.59,531,2.397,538,2.262,541,1.94,636,1.056,637,1.784,640,3.414,653,2.767,660,4.352,663,2.938,664,3.47,665,2.956,669,3.904,670,3.467,671,6.053,672,6.053,673,3.904,674,4.204]],["title/interfaces/IPlansService.html",[636,0.948,675,2.655]],["body/interfaces/IPlansService.html",[3,0.152,4,0.152,5,0.135,11,0.33,12,0.014,16,0.201,21,0.01,22,0.01,26,0.298,35,0.582,43,1.94,57,0.807,84,0.866,154,0.843,157,2.58,170,1.197,234,1.4,309,2.215,448,3.068,528,3.177,529,2.388,530,2.58,531,2.388,538,2.248,541,1.921,636,1.045,637,1.766,640,3.383,653,2.74,659,4.988,660,4.336,661,3.44,662,3.811,663,2.919,664,2.784,668,2.44,675,3.879,676,3.434,677,3.879,678,4.55]],["title/interfaces/IUsersController.html",[636,0.948,679,2.859]],["body/interfaces/IUsersController.html",[3,0.158,4,0.158,5,0.14,11,0.303,12,0.014,16,0.207,21,0.01,22,0.01,26,0.31,35,0.588,43,1.96,55,2.617,57,0.841,69,1.515,70,2.379,84,0.815,154,0.867,170,1.452,234,1.459,309,2.251,463,3.153,471,2.296,490,3,529,2.427,531,2.427,636,1.09,637,1.841,640,3.401,679,4.293,680,3.579,681,4.407,682,4.407,683,4.407,684,4.407,685,3.286,686,4.676]],["title/interfaces/IUsersRepository.html",[636,0.948,687,2.655]],["body/interfaces/IUsersRepository.html",[3,0.151,4,0.151,5,0.134,11,0.221,12,0.014,16,0.2,21,0.01,22,0.01,26,0.296,35,0.598,43,1.992,55,2.538,57,0.803,69,1.446,70,2.072,84,0.842,154,0.841,170,1.526,234,1.393,309,2.211,463,3.058,471,2.192,490,2.91,529,2.384,530,2.575,531,2.384,636,1.04,637,1.758,640,3.43,648,4.623,681,4.328,682,4.328,683,4.328,684,4.328,687,3.867,688,3.417,689,3.867]],["title/interfaces/IUsersService.html",[31,2.34,636,0.948]],["body/interfaces/IUsersService.html",[3,0.151,4,0.151,5,0.134,11,0.221,12,0.014,16,0.2,21,0.01,22,0.01,26,0.296,31,3.408,35,0.598,43,1.992,53,3.222,55,2.538,57,0.803,69,1.446,70,2.072,84,0.842,154,0.841,170,1.526,234,1.393,309,2.211,463,3.058,471,2.192,490,2.91,529,2.384,530,2.575,531,2.384,636,1.04,637,1.758,640,3.43,648,4.623,681,4.328,682,4.328,683,4.328,684,4.328,690,3.417]],["title/interfaces/JwtPayload.html",[39,2.34,636,0.948]],["body/interfaces/JwtPayload.html",[3,0.19,4,0.19,5,0.169,12,0.014,16,0.19,21,0.011,22,0.011,26,0.373,35,0.58,39,3.945,69,2.499,84,0.876,154,0.973,415,6.552,636,1.309,637,2.212,691,4.771,692,4.771,693,7.536,694,7.536,695,5.251]],["title/injectables/LocalStrategy.html",[0,0.819,295,2.859]],["body/injectables/LocalStrategy.html",[0,1.226,2,1.691,3,0.157,4,0.157,5,0.14,8,1.627,9,0.864,11,0.37,12,0.014,13,1.046,15,2.285,16,0.206,17,0.008,18,3.036,20,3.036,21,0.01,22,0.01,26,0.309,27,2.129,28,2.284,29,3.72,33,2.213,34,1.181,35,0.458,36,1.319,42,1.627,44,3.562,45,1.993,46,3.562,48,3.562,49,3.27,57,1.095,59,3.953,61,2.179,69,2.199,70,2.373,71,1.832,73,2.401,74,2.082,75,1.565,84,0.835,90,3.27,221,2.676,223,3.036,242,3.765,280,4.683,281,3.562,294,4.279,295,4.279,696,3.562,697,3.953,698,4.546,699,5.95,700,4.546,701,3.953,702,4.546,703,4.546,704,4.546,705,4.546,706,4.546,707,4.546]],["title/classes/LoginDto.html",[17,0.007,193,2.655]],["body/classes/LoginDto.html",[3,0.184,4,0.184,5,0.164,9,0.956,11,0.334,12,0.014,16,0.184,17,0.011,21,0.011,22,0.011,26,0.362,35,0.507,69,2.368,82,1.815,84,0.831,152,1.581,154,0.956,175,2.459,176,1.524,193,4.396,242,3.589,257,4.174,264,3.423,265,4.396,268,3.423,270,3.423,271,2.062,456,3.558,708,4.632,709,5.328,710,5.328]],["title/classes/ParamsDto.html",[17,0.007,538,1.539]],["body/classes/ParamsDto.html",[3,0.192,4,0.192,5,0.171,9,1.056,12,0.014,16,0.192,17,0.009,21,0.012,22,0.012,26,0.377,34,1.444,35,0.56,36,1.748,84,0.879,152,1.648,154,0.98,157,2.706,431,3.656,538,2.613,711,4.829,712,5.554,713,5.554,714,5.554]],["title/classes/Plan.html",[17,0.007,664,1.906]],["body/classes/Plan.html",[3,0.122,4,0.122,5,0.108,9,1.008,11,0.321,12,0.014,16,0.201,17,0.006,21,0.009,22,0.009,26,0.24,34,1.256,35,0.608,36,1.404,57,0.65,68,2.399,70,1.791,82,1.914,84,0.856,124,1.215,152,1.047,154,0.727,157,2.164,158,4.086,160,4.428,161,3.398,170,1.471,172,3.666,173,2.194,174,1.964,175,2.458,176,1.009,177,1.964,178,2.292,181,2.357,182,2.077,183,3.179,303,3.072,431,2.923,451,3.27,452,3.523,498,4.352,499,4.352,500,3.921,501,2.788,508,2.764,515,3.129,664,3.714,715,2.538,716,5.005,717,5.005,718,3.529,719,3.529,720,3.529,721,3.529,722,5.005,723,3.529,724,4.352,725,3.921,726,3.6,727,3.529,728,3.129,729,2.764,730,2.764,731,2.764,732,2.764,733,2.538,734,3.068]],["title/classes/PlanDto.html",[17,0.007,663,1.998]],["body/classes/PlanDto.html",[3,0.151,4,0.151,5,0.134,9,1.075,11,0.33,12,0.014,16,0.151,17,0.01,21,0.01,22,0.01,26,0.296,34,1.29,35,0.57,36,1.535,82,2.042,84,0.855,152,1.294,154,0.841,157,2.418,170,1.339,175,2.602,176,1.248,262,3.408,264,3.453,267,3.617,268,3.318,270,3.318,271,1.688,303,3.432,431,3.266,435,2.727,444,3.62,445,3.825,446,3.432,451,3.392,452,3.222,453,3.417,456,2.913,458,3.792,461,3.62,462,3.792,663,2.91,735,3.792,736,4.362,737,4.362,738,4.362,739,4.362,740,4.362,741,4.362]],["title/controllers/PlansController.html",[76,1.743,742,2.859]],["body/controllers/PlansController.html",[3,0.068,4,0.068,5,0.06,8,0.7,9,0.841,11,0.333,12,0.014,13,0.45,14,1.222,15,0.983,16,0.068,17,0.003,21,0.005,22,0.005,26,0.133,27,1.14,28,2.55,33,2.155,34,1.15,35,0.546,36,1.284,42,2.072,43,1.776,45,0.857,57,1.112,61,0.937,62,0.788,71,2.334,73,1.033,74,0.896,75,2.079,76,0.857,78,0.821,82,1.597,84,0.782,86,1.151,91,1.151,157,2.445,170,1.287,176,0.559,183,3.563,189,1.406,195,4.165,196,4.165,197,3.345,198,3.345,199,4.265,203,4.904,205,2.901,210,3.345,211,2.292,212,4.303,213,1.406,214,4.343,215,3.683,216,4.343,217,4.343,218,1.406,219,4.343,220,4.343,226,3.775,227,3.775,228,3.775,229,3.202,230,1.406,231,1.406,234,0.624,237,0.896,239,1.406,245,4.165,247,4.775,309,1.288,373,1.151,394,1.088,398,1.088,448,2.901,501,1.933,528,1.847,529,1.097,530,1.185,531,1.389,533,1.7,534,2.694,535,1.532,538,1.8,539,1.7,541,1.768,542,1.406,543,1.532,545,1.033,546,1.532,548,1.033,549,1.532,551,1.532,552,1.532,553,2.496,554,2.496,561,1.222,566,1.7,568,1.7,570,1.532,571,1.532,572,1.532,573,1.222,576,1.532,577,3.16,578,1.532,657,2.292,659,2.901,660,2.521,661,2.457,663,2.911,664,3.319,665,1.306,667,4.044,668,2.589,675,2.128,677,1.306,731,1.532,742,2.292,743,1.7,744,1.955,745,1.955,746,1.955,747,1.532,748,1.955,749,1.955,750,1.955,751,1.955,752,1.955,753,1.955,754,1.955,755,1.955,756,1.955,757,1.955,758,1.532,759,1.532,760,1.955,761,1.955,762,1.955,763,1.955,764,1.955,765,1.955,766,1.7,767,1.955,768,1.7,769,1.955,770,1.955,771,1.955,772,1.955,773,1.955,774,1.955]],["title/modules/PlansModule.html",[100,1.602,114,2.655]],["body/modules/PlansModule.html",[3,0.15,4,0.15,5,0.133,11,0.403,12,0.014,13,0.994,16,0.15,17,0.007,21,0.01,22,0.01,34,0.858,78,2.417,100,2.607,102,2.172,103,2.543,104,2.886,105,2.886,106,2.543,107,3.202,108,2.405,113,4.617,114,5.114,116,4.617,118,3.842,119,2.886,120,2.886,122,3.386,123,2.701,124,1.488,130,3.757,133,3.757,173,1.894,297,2.886,305,4.652,306,4.652,555,3.597,580,3.842,664,2.071,665,2.886,673,3.842,677,3.842,733,4.138,742,4.652,758,3.385,775,4.321,776,4.321,777,4.321,778,4.321,779,4.138,780,4.321,781,4.138,782,4.321,783,3.385,784,4.321,785,4.321,786,3.757]],["title/injectables/PlansRepository.html",[0,0.819,781,2.859]],["body/injectables/PlansRepository.html",[0,0.852,2,1.012,3,0.094,4,0.094,5,0.084,8,1.479,9,1.027,11,0.352,12,0.014,13,0.626,16,0.094,17,0.005,21,0.007,22,0.007,26,0.185,27,1.479,28,2.744,33,2.632,34,1.404,35,0.545,36,1.569,42,2.483,43,1.97,57,1.028,62,1.096,71,2.73,74,1.246,75,2.178,84,0.838,124,0.937,157,2.446,161,1.893,170,1.151,178,1.246,234,0.869,237,1.246,309,1.32,313,1.956,314,4.549,324,1.956,330,2.973,332,3.126,448,2.95,451,2.751,528,1.893,529,1.423,530,1.538,531,1.423,537,2.761,538,2.162,541,1.192,545,2.183,548,2.183,561,1.701,600,2.365,601,2.433,660,2.584,661,2.95,663,2.807,664,3.447,665,1.817,669,2.761,671,3.594,672,3.594,674,2.973,678,3.917,730,2.131,747,3.239,759,2.131,781,2.973,783,2.131,787,2.365,788,5,789,2.72,790,2.72,791,2.72,792,2.72,793,2.72,794,3.594,795,2.72,796,2.72,797,4.134,798,2.72,799,4.134,800,2.72,801,2.72,802,4.134,803,2.72,804,2.131,805,2.72,806,2.72,807,2.72,808,4.134,809,2.72,810,4.134,811,4.134,812,4.134,813,2.72,814,2.72,815,2.72,816,2.72,817,2.72,818,2.131,819,2.72,820,2.72,821,2.72,822,2.72]],["title/injectables/PlansService.html",[0,0.819,779,2.859]],["body/injectables/PlansService.html",[0,0.621,2,0.68,3,0.063,4,0.063,5,0.056,8,1.079,9,0.912,11,0.319,12,0.014,13,0.42,16,0.063,17,0.005,21,0.005,22,0.005,26,0.124,27,1.079,28,2.519,29,1.143,33,2.336,34,1.21,35,0.469,36,1.352,42,2.104,43,1.745,45,0.801,57,1.233,61,2.697,62,1.8,70,1.598,71,2.594,73,3.473,74,3.117,75,2.025,84,0.843,154,0.438,157,2.628,170,1.422,234,0.584,237,0.837,271,0.708,309,0.963,332,1.885,334,3.212,344,1.315,347,2.169,365,1.221,366,1.221,372,3.212,373,2.266,378,4.046,390,4.046,391,4.071,392,4.046,394,1.679,398,2.751,414,1.221,433,1.679,448,2.359,451,2.436,496,1.322,501,1.845,528,1.381,529,1.038,530,1.122,531,1.325,537,2.014,538,1.729,541,1.322,542,1.315,545,1.593,548,1.593,561,1.143,573,1.143,601,1.076,612,1.315,613,1.589,614,1.589,617,1.589,618,1.589,622,2.363,623,2.363,625,1.589,627,1.432,628,1.432,630,1.432,631,1.432,632,1.432,634,2.363,635,3.016,650,1.432,659,2.768,660,2.406,661,3.645,663,2.245,664,3.48,668,3.393,669,2.983,673,1.221,674,1.315,675,2.014,678,4.775,729,1.432,731,3.016,747,2.363,758,1.432,759,1.432,779,2.169,783,1.432,794,2.622,823,1.589,824,5.626,825,3.016,826,1.828,827,1.828,828,1.828,829,1.828,830,1.828,831,1.828,832,1.828,833,1.828,834,1.828,835,1.828,836,1.828,837,3.849,838,3.016,839,1.432,840,1.828,841,1.828,842,1.828,843,1.828,844,1.828,845,1.828,846,1.828,847,1.828,848,1.828,849,1.828,850,4.466,851,3.016,852,1.828,853,3.016,854,1.828,855,2.622,856,1.828,857,3.016,858,3.016,859,1.828,860,1.828,861,3.347,862,1.589,863,1.828,864,1.589,865,2.014,866,2.622,867,2.014,868,2.622,869,2.014,870,2.622,871,2.622,872,2.014,873,2.622,874,1.828,875,1.828,876,3.016,877,1.828,878,1.828,879,1.828,880,1.828,881,1.589]],["title/classes/RefreshToken.html",[17,0.007,156,1.821]],["body/classes/RefreshToken.html",[3,0.164,4,0.164,5,0.146,9,0.887,11,0.31,12,0.014,16,0.234,17,0.008,21,0.01,22,0.01,26,0.322,35,0.569,57,0.872,68,2.269,82,1.685,84,0.796,124,1.63,152,1.405,154,0.887,156,3.469,158,3.596,159,4.116,161,3.273,165,4.467,166,4.517,168,3.405,172,3.572,173,2.678,174,2.635,175,2.329,176,1.354,177,2.635,183,2.798,303,3.572,601,2.787,695,4.772,882,4.864,883,3.405,884,6.109,885,4.735,886,7.146,887,4.735,888,4.735,889,4.116,890,4.116]],["title/classes/RefreshTokenDto.html",[17,0.007,259,2.859]],["body/classes/RefreshTokenDto.html",[3,0.2,4,0.2,5,0.177,9,1.002,12,0.014,16,0.2,17,0.01,21,0.012,22,0.012,26,0.392,35,0.531,84,0.769,152,1.71,154,1.002,156,3.386,259,4.966,303,3.904,695,4.611,891,6.427,892,5.012,893,5.765,894,5.765]],["title/injectables/RefreshTokenGuard.html",[0,0.819,895,3.114]],["body/injectables/RefreshTokenGuard.html",[0,1.422,2,2.144,3,0.2,4,0.2,5,0.177,7,4.516,8,2.645,9,0.837,10,5.012,11,0.35,12,0.014,13,1.326,14,3.604,15,2.897,16,0.2,17,0.01,18,3.85,19,5.012,20,3.85,21,0.012,22,0.012,165,3.604,895,5.409,896,6.003]],["title/injectables/RefreshTokenStrategy.html",[0,0.819,292,2.859]],["body/injectables/RefreshTokenStrategy.html",[0,1.169,2,1.574,3,0.146,4,0.146,5,0.13,8,2.03,9,0.824,11,0.387,12,0.014,13,0.973,15,2.126,16,0.196,17,0.007,18,2.826,20,2.826,21,0.01,22,0.01,25,3.043,26,0.287,27,2.03,28,2.204,29,3.547,33,2.11,34,1.126,35,0.437,36,1.258,39,4.025,41,4.918,42,1.514,44,4.444,45,1.855,47,3.678,48,4.444,49,3.043,50,4.08,51,3.314,52,3.043,57,1.044,61,2.719,62,1.705,63,3.678,65,3.678,66,3.678,67,3.678,68,2.028,75,1.457,90,3.043,91,2.49,126,5.393,127,2.826,156,2.598,161,1.938,165,2.645,203,4.275,212,3.314,221,2.49,223,2.826,238,3.678,280,4.589,281,3.314,291,4.08,292,4.08,697,3.678,897,5.014,898,4.231,899,5.673,900,4.231,901,4.231,902,4.231,903,4.231,904,4.231]],["title/classes/Routine.html",[17,0.007,905,3.114]],["body/classes/Routine.html",[3,0.141,4,0.141,5,0.125,9,1.055,11,0.319,12,0.014,16,0.218,17,0.007,21,0.009,22,0.009,26,0.277,34,1.247,35,0.606,57,0.751,82,1.942,84,0.893,124,1.405,152,1.21,154,0.804,157,2.337,160,4.56,161,3.581,170,1.294,172,3.836,173,2.426,174,2.271,177,2.271,178,2.535,181,2.725,182,2.401,431,3.158,451,3.327,501,3.012,725,4.337,726,3.981,728,3.461,729,3.196,732,3.196,905,4.922,906,2.934,907,6.283,908,7.043,909,4.08,910,4.08,911,4.08,912,4.08,913,4.08,914,4.08,915,3.547,916,4.08,917,3.196,918,3.547]],["title/controllers/RoutinesController.html",[76,1.743,919,2.859]],["body/controllers/RoutinesController.html",[3,0.21,4,0.21,5,0.187,11,0.308,12,0.014,13,1.396,16,0.21,17,0.01,21,0.012,22,0.012,76,3.121,78,2.55,919,5.12,920,5.278,921,6.071]],["title/modules/RoutinesModule.html",[100,1.602,115,2.655]],["body/modules/RoutinesModule.html",[3,0.186,4,0.186,5,0.165,11,0.364,12,0.014,13,1.236,16,0.186,17,0.009,21,0.011,22,0.011,78,2.78,100,2.89,102,2.701,103,3.164,104,3.59,105,3.59,106,3.164,107,3.991,108,2.992,115,5.225,118,4.419,119,3.59,120,3.59,122,3.164,919,5.156,922,4.673,923,4.673,924,5.225,925,5.375,926,5.375,927,5.375]],["title/injectables/RoutinesRepository.html",[0,0.819,928,3.114]],["body/injectables/RoutinesRepository.html",[0,1.475,2,2.281,3,0.212,4,0.212,5,0.189,11,0.311,12,0.014,13,1.41,16,0.212,17,0.01,21,0.012,22,0.012,928,5.61,929,5.331]],["title/injectables/RoutinesService.html",[0,0.819,924,2.655]],["body/injectables/RoutinesService.html",[0,1.475,2,2.281,3,0.212,4,0.212,5,0.189,11,0.311,12,0.014,13,1.41,16,0.212,17,0.01,21,0.012,22,0.012,924,4.783,930,5.331]],["title/classes/ShapeHistory.html",[17,0.007,931,2.655]],["body/classes/ShapeHistory.html",[3,0.139,4,0.139,5,0.123,9,0.971,11,0.316,12,0.014,16,0.216,17,0.007,21,0.009,22,0.009,26,0.272,35,0.588,57,0.738,68,1.921,70,2.693,82,1.844,124,1.38,152,1.189,154,0.794,158,3.937,160,4.43,161,3.496,172,3.697,173,2.397,174,2.231,175,2.41,176,1.146,177,3.044,178,1.836,182,2.359,183,3.063,251,3.653,452,3.723,601,2.359,695,5.246,931,4.158,932,5.034,933,2.883,934,5.24,935,5.484,936,5.24,937,5.24,938,4.008,939,4.008,940,5.469,941,5.469,942,4.008,943,4.008,944,4.008,945,4.008,946,4.008,947,4.008,948,3.485,949,4.008,950,2.883,951,3.485]],["title/classes/ShapeHistoryDto.html",[17,0.007,490,1.998]],["body/classes/ShapeHistoryDto.html",[3,0.167,4,0.167,5,0.148,9,1.045,11,0.314,12,0.014,16,0.167,17,0.01,21,0.011,22,0.011,26,0.328,35,0.554,82,1.984,152,1.43,154,0.897,175,2.562,176,1.379,264,3.566,268,3.566,271,1.866,452,3.44,461,3.864,490,3.106,695,5.083,934,5.344,935,5.344,936,5.344,937,5.344,952,6.468,953,4.192,954,4.822,955,4.822,956,6.822,957,4.822,958,4.822,959,4.822,960,7.195]],["title/modules/SharedModule.html",[100,1.602,116,2.485]],["body/modules/SharedModule.html",[3,0.193,4,0.193,5,0.172,11,0.37,12,0.014,13,1.285,16,0.193,17,0.009,21,0.012,22,0.012,34,1.109,78,2.348,100,2.731,102,2.809,107,3.111,108,3.111,116,4.237,122,3.289,123,3.494,124,1.924,173,2.45,297,3.732,451,2.56,728,4.237,961,5.588,962,5.588,963,5.588]],["title/classes/Training.html",[17,0.007,451,1.821]],["body/classes/Training.html",[3,0.121,4,0.121,5,0.108,9,1.034,11,0.294,12,0.014,16,0.201,17,0.006,21,0.009,22,0.009,26,0.238,35,0.6,36,1.104,57,0.645,68,2.386,82,1.964,84,0.894,124,1.206,152,1.039,154,0.723,158,4.193,160,4.517,161,3.481,170,1.426,172,3.762,173,2.182,174,1.949,175,2.507,176,1.001,177,1.949,178,2.28,182,2.061,183,3.262,433,3.511,451,3.052,472,3.943,496,3.364,501,1.678,515,3.112,668,3.224,725,3.9,728,2.189,732,2.743,865,4.213,867,4.213,869,3.868,872,4.213,964,2.518,965,4.978,966,3.502,967,3.502,968,3.502,969,3.502,970,3.502,971,3.502,972,3.502,973,3.502,974,3.502,975,3.502,976,3.502,977,3.502,978,3.502,979,3.044,980,3.502,981,3.044]],["title/classes/TrainingDto.html",[17,0.007,661,2.1]],["body/classes/TrainingDto.html",[3,0.135,4,0.135,5,0.12,9,1.115,11,0.272,12,0.014,16,0.135,17,0.009,21,0.009,22,0.009,26,0.265,34,1.218,35,0.565,36,1.658,82,2.118,84,0.871,152,1.156,154,0.779,170,1.264,175,2.67,176,1.115,262,3.158,264,3.518,267,3.415,268,3.584,270,3.681,271,1.508,432,4.098,433,3.415,434,4.098,437,4.203,439,2.803,446,3.491,447,4.806,456,4.098,472,3.354,475,2.603,492,3.858,661,2.834,668,3.415,865,4.098,867,4.098,869,4.098,872,4.098,982,3.388,983,3.897,984,3.897,985,3.897,986,3.897,987,3.897,988,3.897,989,3.897,990,3.897,991,3.897,992,3.897,993,3.897]],["title/classes/TrainingUpdateDto.html",[17,0.007,994,2.859]],["body/classes/TrainingUpdateDto.html",[3,0.144,4,0.144,5,0.128,9,1.084,11,0.284,12,0.014,16,0.144,17,0.009,21,0.01,22,0.01,26,0.282,35,0.574,36,1.752,82,2.058,84,0.88,152,1.232,154,0.814,170,1.306,175,2.613,176,1.188,262,2.445,264,2.686,267,3.529,268,2.686,270,3.577,271,1.608,433,3.529,446,3.942,472,3.503,475,4.533,492,4.03,668,3.529,865,4.235,867,4.235,869,4.235,872,4.235,994,4.03,995,5.946,996,3.611,997,4.154,998,4.154,999,3.611,1000,4.154,1001,4.154,1002,4.154,1003,4.154,1004,4.154,1005,4.154]],["title/classes/UpdatePlanDto.html",[17,0.007,1006,3.114]],["body/classes/UpdatePlanDto.html",[3,0.148,4,0.148,5,0.131,9,1.069,11,0.326,12,0.014,16,0.148,17,0.01,21,0.01,22,0.01,26,0.29,34,1.276,35,0.567,36,1.76,82,2.03,84,0.851,152,1.267,154,0.829,157,2.392,170,1.325,175,2.588,176,1.221,267,3.579,270,3.29,271,1.653,303,3.396,431,3.232,445,3.785,446,3.97,450,3.345,451,2.945,452,3.177,453,3.345,459,3.713,460,3.713,461,3.569,475,2.852,994,4.624,995,3.345,999,4.963,1006,4.472,1007,6.535,1008,4.27,1009,5.708,1010,4.27,1011,4.27,1012,4.27,1013,4.27]],["title/classes/User.html",[17,0.007,70,1.422]],["body/classes/User.html",[3,0.104,4,0.104,5,0.092,9,1.035,11,0.298,12,0.014,16,0.184,17,0.005,21,0.008,22,0.008,26,0.204,34,0.883,35,0.606,36,0.987,57,0.553,68,2.133,69,1.945,70,2.828,82,1.966,84,0.884,124,1.034,152,0.89,154,0.646,158,4.195,160,4.536,161,3.505,163,2.61,170,1.291,172,3.765,173,1.951,174,1.671,175,2.497,176,0.858,177,2.477,178,1.375,181,2.005,182,1.767,183,3.265,242,3.149,251,2.973,452,3.488,466,3.543,467,4.22,468,3.815,469,3.815,470,3.815,471,3.299,472,3.668,486,3.87,487,3.87,488,2.61,493,3.87,500,2.351,501,1.439,508,3.487,726,2.159,881,2.61,931,3.919,950,3.201,1014,2.159,1015,4.451,1016,3.002,1017,3.002,1018,3.002,1019,3.002,1020,4.451,1021,3.002,1022,3.002,1023,3.002,1024,3.87,1025,3.002,1026,3.002,1027,4.451,1028,3.002,1029,3.002,1030,3.87,1031,3.002,1032,4.612,1033,3.002,1034,2.351,1035,2.159,1036,2.61]],["title/classes/UserDto.html",[17,0.007,55,1.743]],["body/classes/UserDto.html",[3,0.135,4,0.135,5,0.12,9,1.102,11,0.311,12,0.014,16,0.135,17,0.009,21,0.009,22,0.009,26,0.265,35,0.584,36,1.19,55,2.352,69,2.034,82,2.092,84,0.871,152,1.156,154,0.779,170,1.264,175,2.644,176,1.115,242,3.083,257,3.053,262,2.294,264,3.637,265,3.583,267,2.986,268,3.584,270,3.518,271,1.508,435,2.436,444,3.354,445,3.158,446,2.834,452,2.986,456,4.098,461,3.354,466,4.098,467,4.412,468,4.412,469,4.412,470,4.412,471,3.322,472,3.354,473,3.388,475,2.603,492,3.858,931,4.098,1032,3.388,1037,3.388,1038,3.897,1039,3.897,1040,3.897,1041,3.897,1042,3.897,1043,3.897,1044,3.897,1045,3.897,1046,3.897,1047,3.897]],["title/controllers/UsersController.html",[76,1.743,1048,2.859]],["body/controllers/UsersController.html",[3,0.071,4,0.071,5,0.063,8,0.737,9,0.894,11,0.313,12,0.014,13,0.474,14,1.288,15,1.036,16,0.071,17,0.003,21,0.006,22,0.006,26,0.14,27,1.19,28,2.617,31,1.957,33,2.202,34,1.175,35,0.572,36,1.313,42,2.204,43,1.842,45,0.903,53,1.147,55,2.595,57,0.612,60,1.615,61,0.988,62,0.831,69,1.386,70,2.51,71,2.483,73,1.756,74,1.523,75,2.121,76,0.903,78,0.866,82,1.699,84,0.838,86,1.213,170,1.376,176,0.589,183,3.622,189,1.482,195,4.431,196,4.431,197,3.45,198,3.45,199,4.44,205,3.45,210,3.007,211,2.392,213,1.482,214,4.575,215,3.785,216,4.575,217,4.575,218,1.482,219,4.575,220,4.431,226,3.977,227,3.977,228,3.977,229,3.291,230,1.482,231,1.482,234,0.658,237,0.944,239,1.482,245,4.258,309,1.062,373,1.213,398,1.851,463,2.972,471,2.411,490,2.411,501,2.004,529,1.652,530,1.237,531,1.44,534,2.792,535,1.615,543,1.615,545,1.089,546,1.615,548,1.089,549,1.615,551,1.615,552,1.615,553,1.615,554,2.605,565,1.792,570,1.615,571,1.615,572,1.615,573,1.288,574,1.792,576,1.615,577,1.615,578,1.615,679,2.392,681,2.079,682,2.079,683,2.079,684,2.614,685,1.482,726,1.482,1048,2.392,1049,1.792,1050,1.615,1051,2.061,1052,2.061,1053,1.615,1054,2.061,1055,2.061,1056,1.615,1057,2.061,1058,2.061,1059,2.061,1060,1.615,1061,2.061,1062,2.061,1063,2.061,1064,2.061,1065,1.615,1066,3.326,1067,2.061,1068,2.061,1069,1.615,1070,2.061,1071,2.061,1072,2.061,1073,2.061,1074,2.061,1075,2.061,1076,2.061,1077,1.792,1078,2.061,1079,2.061,1080,2.061,1081,2.061,1082,2.061,1083,2.061,1084,2.061,1085,2.061]],["title/modules/UsersModule.html",[100,1.602,117,2.485]],["body/modules/UsersModule.html",[3,0.172,4,0.172,5,0.153,11,0.4,12,0.014,13,1.142,16,0.172,17,0.008,21,0.011,22,0.011,34,0.986,37,3.707,53,3.85,70,1.777,78,2.646,100,2.538,102,2.496,107,2.764,108,2.764,117,3.937,122,2.923,123,3.105,124,1.71,173,2.177,297,3.317,305,4.529,306,4.529,685,3.572,689,4.619,1035,4.529,1048,4.974,1069,3.891,1086,4.966,1087,4.966,1088,4.966,1089,3.891,1090,4.529,1091,4.966,1092,4.966]],["title/injectables/UsersRepository.html",[0,0.819,1090,2.859]],["body/injectables/UsersRepository.html",[0,0.878,2,1.054,3,0.098,4,0.098,5,0.087,8,1.526,9,1.038,11,0.326,12,0.014,13,0.652,16,0.098,17,0.005,21,0.007,22,0.007,26,0.192,27,1.526,28,2.756,33,2.611,34,1.393,35,0.54,36,1.556,42,2.511,43,1.983,55,2.5,57,0.522,62,1.142,68,1.358,69,1.7,70,2.299,71,2.829,75,1.964,84,0.874,124,0.976,161,1.298,170,1.496,178,1.298,234,0.905,237,1.298,309,1.362,313,2.038,314,4.621,324,2.038,329,2.464,330,4.101,332,3.205,414,1.893,463,3.012,466,2.848,471,2.866,490,2.866,529,1.964,530,1.586,531,1.468,545,2.252,548,2.252,598,2.464,599,2.464,601,3.599,648,2.848,681,2.666,682,2.666,683,2.666,684,2.666,685,2.038,687,2.848,818,2.22,934,2.22,935,2.22,936,2.22,937,2.22,1034,2.22,1050,3.34,1053,3.34,1056,3.34,1060,3.34,1065,3.34,1089,2.22,1090,3.067,1093,2.464,1094,2.834,1095,2.834,1096,3.707,1097,2.834,1098,2.834,1099,2.834,1100,2.834,1101,2.834,1102,2.834,1103,2.834,1104,2.834,1105,2.834,1106,2.834,1107,2.834,1108,2.464,1109,2.464,1110,2.464,1111,2.834]],["title/injectables/UsersService.html",[0,0.819,37,2.34]],["body/injectables/UsersService.html",[0,0.603,2,0.656,3,0.061,4,0.061,5,0.054,8,1.048,9,0.963,11,0.281,12,0.014,13,0.406,16,0.061,17,0.005,21,0.005,22,0.005,26,0.12,27,1.048,28,2.624,29,1.103,31,1.724,33,2.367,34,1.263,35,0.49,36,1.411,37,1.724,42,2.277,43,1.849,45,0.774,55,2.292,57,1.29,61,2.095,62,1.761,68,0.846,69,1.607,70,2.618,71,2.824,73,3.56,74,3.243,75,2.24,84,0.835,154,0.425,161,1.341,170,1.497,172,1.983,234,0.564,237,0.808,242,0.887,265,1.179,271,0.683,309,0.935,332,3.031,334,3.143,344,1.269,347,2.106,365,1.179,366,1.179,372,2.7,373,1.039,378,4.169,382,1.382,384,1.382,390,4.169,391,4.142,392,4.326,394,1.63,398,2.09,414,1.956,463,2.308,471,2.196,490,2.628,501,2.655,529,1.505,530,1.09,531,1.009,545,1.547,548,1.547,573,1.103,616,1.534,622,2.294,623,2.941,627,2.294,628,1.382,630,1.382,631,1.382,632,1.382,634,1.382,635,3.424,648,1.956,681,1.831,682,1.831,683,1.831,684,1.831,687,2.919,689,1.179,1050,2.294,1053,2.294,1056,2.294,1060,2.294,1065,2.294,1069,1.382,1077,1.534,1089,1.382,1096,2.546,1108,1.534,1109,1.534,1110,1.534,1112,1.534,1113,2.929,1114,2.929,1115,2.929,1116,1.765,1117,1.765,1118,1.765,1119,1.765,1120,1.765,1121,1.765,1122,1.765,1123,2.929,1124,1.765,1125,2.929,1126,1.765,1127,2.929,1128,1.765,1129,1.765,1130,2.929,1131,1.765,1132,1.534,1133,1.382,1134,1.765,1135,1.765,1136,2.929,1137,2.929,1138,1.765,1139,1.765,1140,1.765,1141,1.765,1142,1.765,1143,2.929,1144,1.765,1145,1.765,1146,1.765,1147,1.765,1148,1.765,1149,1.765,1150,1.765,1151,1.765,1152,1.765,1153,1.765,1154,2.929,1155,1.765,1156,1.765,1157,1.765,1158,1.765,1159,1.765,1160,1.765,1161,1.765,1162,1.765,1163,1.765,1164,1.765,1165,1.765,1166,2.929,1167,1.765,1168,1.765,1169,1.765,1170,1.765,1171,1.765,1172,1.765,1173,1.765,1174,1.765,1175,1.765,1176,3.754,1177,1.765,1178,1.765,1179,1.765,1180,1.765,1181,1.765,1182,1.765,1183,1.765,1184,1.765,1185,1.765]],["title/coverage.html",[1186,4.261]],["body/coverage.html",[0,1.474,1,1.59,5,0.062,6,1.764,7,2.573,12,0.014,17,0.013,21,0.006,22,0.006,23,1.459,24,2.573,25,3.419,31,1.194,35,0.156,37,1.194,39,1.194,53,1.129,55,0.889,58,1.459,70,0.726,74,0.929,76,2.449,77,1.459,79,1.764,86,3.462,92,1.268,106,1.194,147,1.764,151,1.194,153,2.362,156,0.929,168,1.459,185,1.459,187,1.459,188,1.764,193,1.355,199,1.268,221,1.194,222,1.355,224,1.459,226,1.268,227,1.268,228,1.268,229,1.268,233,1.072,254,1.764,259,1.459,280,1.268,282,1.459,284,1.355,291,1.459,292,1.459,294,1.459,295,1.459,308,1.764,325,1.355,333,1.764,374,1.59,394,4.634,428,1.072,429,1.764,430,1.764,448,1.072,449,1.764,450,2.573,451,0.929,463,1.072,464,1.764,465,1.764,490,1.02,496,0.889,497,2.362,516,1.459,518,1.02,519,1.764,526,1.459,527,1.764,534,1.355,538,0.785,555,1.268,556,1.355,558,1.459,580,1.355,583,1.355,585,1.459,588,1.764,595,1.355,602,1.764,610,1.59,612,1.459,636,1.667,638,2.573,640,0.852,641,1.59,642,2.573,643,2.573,646,1.59,647,1.764,652,2.573,654,1.59,655,2.573,656,2.573,657,1.459,658,2.573,661,1.072,663,1.02,664,0.973,666,1.59,669,1.355,670,2.573,673,1.355,675,1.355,676,2.573,677,1.355,679,1.459,680,2.573,686,1.59,687,1.355,688,2.573,689,1.355,690,2.573,691,1.764,692,1.764,696,2.573,708,1.764,711,1.764,715,2.362,728,1.268,733,1.459,735,1.764,742,1.459,743,1.764,779,1.459,781,1.459,787,1.764,804,1.59,823,1.764,839,1.59,882,2.362,883,2.362,891,1.764,892,1.764,895,1.59,896,1.764,897,2.573,905,1.59,906,2.362,917,1.59,919,1.459,920,1.764,924,1.355,928,1.59,929,1.764,930,1.764,931,1.355,932,2.362,933,2.362,950,1.459,952,1.764,953,1.764,964,2.362,982,1.764,994,1.459,995,1.59,996,1.764,1006,1.59,1007,1.764,1014,2.362,1035,1.459,1037,1.764,1048,1.459,1049,1.764,1090,1.459,1093,1.764,1112,1.764,1133,1.59,1186,1.59,1187,2.029,1188,2.029,1189,2.029,1190,6.125,1191,4.137,1192,1.764,1193,7.976,1194,3.284,1195,5.588,1196,7.913,1197,6.327,1198,3.284,1199,1.764,1200,5.882,1201,5.882,1202,1.764,1203,4.137,1204,1.764,1205,1.764,1206,4.754,1207,1.764,1208,1.764,1209,1.764,1210,5.114,1211,5.114,1212,1.764,1213,1.764,1214,1.764,1215,4.754,1216,1.764,1217,2.029,1218,2.029]],["title/dependencies.html",[103,2.816,1219,2.881]],["body/dependencies.html",[12,0.014,13,1.204,15,2.632,17,0.009,21,0.011,22,0.011,49,5.096,50,3.766,91,3.082,103,3.082,124,1.803,127,3.497,176,1.498,178,2.398,271,2.027,276,4.553,278,4.102,701,4.553,1132,4.553,1220,7.086,1221,5.236,1222,5.236,1223,5.236,1224,5.236,1225,5.236,1226,5.236,1227,5.236,1228,5.236,1229,5.236,1230,5.236,1231,5.236,1232,5.236,1233,5.236,1234,5.236,1235,5.236,1236,5.236,1237,5.236,1238,5.236,1239,5.236,1240,5.236,1241,5.236,1242,5.236,1243,5.236,1244,5.236,1245,5.236,1246,5.236]],["title/miscellaneous/functions.html",[1247,2.071,1248,4.16]],["body/miscellaneous/functions.html",[12,0.012,21,0.012,22,0.012,26,0.428,106,4.515,1192,5.478,1247,3.939,1248,5.478,1249,6.301]],["title/index.html",[26,0.225,1250,3.313,1251,3.313]],["body/index.html",[12,0.014,21,0.01,22,0.01,69,1.374,178,1.898,1186,3.247,1252,4.144,1253,4.144,1254,5.595,1255,5.507,1256,5.507,1257,4.864,1258,4.144,1259,4.144,1260,4.144,1261,4.144,1262,7.77,1263,4.144,1264,4.144,1265,4.144,1266,4.144,1267,3.603,1268,4.144,1269,3.603,1270,4.144,1271,4.144,1272,4.144,1273,4.144,1274,4.144,1275,4.144,1276,4.144,1277,6.781,1278,4.864,1279,3.603,1280,4.864,1281,4.864,1282,4.864,1283,4.144,1284,4.144,1285,6.334,1286,6.334,1287,5.595,1288,5.595,1289,5.595,1290,4.144,1291,5.595,1292,7.082,1293,5.595,1294,5.595,1295,4.144,1296,4.144,1297,5.595,1298,4.144,1299,5.595,1300,4.144,1301,4.144,1302,4.144,1303,4.144,1304,3.603,1305,4.144,1306,4.144,1307,3.603,1308,4.144,1309,4.144,1310,3.603,1311,4.144,1312,4.144,1313,4.144,1314,4.144,1315,4.144,1316,7.459,1317,4.144,1318,4.144,1319,4.144,1320,4.144,1321,7.297,1322,4.144,1323,4.144,1324,5.595,1325,4.144,1326,4.144,1327,4.144,1328,4.144,1329,5.595,1330,5.595,1331,4.144,1332,4.144,1333,4.144,1334,4.144,1335,3.603,1336,3.603,1337,3.603,1338,4.144,1339,4.144,1340,4.144,1341,4.144,1342,4.144,1343,4.144]],["title/modules.html",[102,2.733]],["body/modules.html",[12,0.012,21,0.012,22,0.012,101,4.172,102,2.916,112,3.874,113,3.627,114,3.874,115,3.874,116,3.627,117,3.627,1344,7.678,1345,7.678,1346,7.678,1347,8.05,1348,7.412,1349,7.412]],["title/overview.html",[1350,4.728]],["body/overview.html",[2,1.833,12,0.014,21,0.011,22,0.011,78,2.069,92,4.308,100,1.985,101,5.913,102,2.476,103,2.899,104,3.29,105,3.29,106,2.899,107,2.742,108,2.742,109,4.283,110,4.283,111,4.283,112,5.001,113,4.534,114,5.194,115,5.001,116,4.534,117,4.534,118,4.185,119,3.29,120,3.29,152,1.461,637,1.985,922,4.283,923,4.283,924,4.602,1030,4.283,1350,4.283,1351,4.926,1352,4.926,1353,4.926,1354,4.926]],["title/properties.html",[154,0.695,1219,2.881]],["body/properties.html",[12,0.014,21,0.012,22,0.012,154,0.856,183,2.7,1255,5.125,1256,5.125,1257,5.125,1269,5.125,1278,5.125,1279,5.125,1280,5.125,1281,5.125,1282,5.125,1304,5.125,1307,5.125,1310,5.125,1335,5.125,1336,5.125,1337,5.125,1355,5.895,1356,5.895,1357,5.895,1358,5.895,1359,5.895,1360,5.895,1361,5.895]],["title/miscellaneous/typealiases.html",[1247,2.071,1362,4.785]],["body/miscellaneous/typealiases.html",[12,0.012,21,0.012,22,0.012,26,0.385,35,0.437,153,4.081,180,4.919,497,4.081,514,5.359,715,4.081,730,5.359,882,4.081,883,4.919,889,5.947,906,4.081,915,5.947,932,4.081,933,4.919,948,5.947,964,4.081,979,5.947,1014,4.081,1034,5.359,1247,3.548,1363,5.675,1364,4.934,1365,4.934,1366,4.934,1367,4.934,1368,4.934,1369,4.934,1370,4.934,1371,4.934]],["title/miscellaneous/variables.html",[1247,2.071,1372,4.16]],["body/miscellaneous/variables.html",[12,0.014,21,0.005,22,0.005,24,1.45,25,3.236,26,0.126,28,0.637,34,1.123,35,0.568,43,0.475,53,2.161,55,0.811,57,0.341,58,2.792,69,0.614,70,1.09,71,0.746,74,0.847,75,1.842,84,0.841,86,3.478,153,1.331,157,1.99,168,2.191,170,0.927,185,2.191,186,1.609,199,1.904,203,1.157,221,2.285,226,1.904,227,1.904,228,1.904,229,1.904,242,0.93,284,2.593,291,2.792,294,2.792,303,0.977,365,5.232,366,5.244,374,2.386,382,1.45,384,1.45,387,1.609,391,1.236,394,1.695,398,1.03,431,2.843,432,1.236,433,2.161,434,1.236,451,2.804,466,1.236,467,1.331,468,1.331,469,1.331,470,1.331,471,0.93,496,1.335,497,1.331,515,1.157,516,2.191,517,1.609,518,0.93,534,2.034,538,0.716,541,1.972,555,2.427,583,2.593,587,1.609,601,2.928,610,2.386,612,2.191,638,1.45,641,3.041,642,1.45,643,1.45,650,2.386,651,2.648,652,1.45,654,3.041,655,1.45,656,1.45,658,1.45,661,0.977,663,0.93,664,1.46,666,3.041,668,1.695,670,1.45,673,2.593,674,1.331,676,1.45,677,2.593,680,1.45,686,3.041,688,1.45,689,2.593,690,1.45,696,1.45,715,1.331,724,1.609,728,1.904,733,2.191,734,1.609,766,2.648,768,1.609,786,1.609,804,2.386,818,2.386,839,2.386,855,1.609,861,2.648,862,5.138,864,1.609,865,2.034,866,2.648,867,2.034,868,2.648,869,2.034,870,2.648,871,2.648,872,2.034,873,2.648,882,1.331,883,2.191,890,1.609,897,1.45,906,1.331,917,2.386,918,1.609,932,1.331,933,2.191,950,2.191,951,1.609,964,1.331,981,1.609,1014,1.331,1024,3.375,1035,2.191,1036,1.609,1133,2.386,1199,1.609,1202,1.609,1204,1.609,1205,2.648,1207,1.609,1208,1.609,1209,2.648,1210,1.609,1211,5.138,1212,2.648,1213,1.609,1214,2.648,1216,1.609,1247,1.157,1267,1.609,1364,1.609,1365,1.609,1366,1.609,1367,2.648,1368,1.609,1369,1.609,1370,1.609,1371,1.609,1372,1.609,1373,1.85,1374,1.85,1375,1.85,1376,1.85,1377,5.656,1378,1.85,1379,1.85,1380,1.85,1381,1.85,1382,1.85,1383,1.85,1384,1.85,1385,1.85,1386,1.85,1387,1.85,1388,1.85,1389,1.85,1390,1.85,1391,1.85,1392,1.85,1393,1.85,1394,1.85,1395,1.85,1396,1.85,1397,1.85,1398,1.85,1399,1.85,1400,1.85,1401,3.046,1402,3.882,1403,3.046,1404,1.85,1405,1.85,1406,1.85,1407,1.85,1408,1.85,1409,1.85,1410,3.046,1411,1.85,1412,1.85,1413,1.85,1414,3.046,1415,1.85,1416,1.85,1417,1.85,1418,4.974,1419,3.046,1420,1.85,1421,1.85,1422,1.85,1423,1.85,1424,1.85,1425,1.85,1426,1.85,1427,1.85,1428,1.85,1429,1.85,1430,1.85,1431,1.85,1432,1.85,1433,1.85,1434,1.85,1435,1.85,1436,1.85,1437,1.85,1438,3.046,1439,1.85,1440,1.85,1441,1.85,1442,1.85,1443,1.85,1444,1.85,1445,1.85,1446,1.85,1447,1.85,1448,1.85,1449,1.85,1450,1.85,1451,1.85,1452,1.85,1453,1.85,1454,1.85,1455,1.85,1456,1.85,1457,1.85,1458,3.046]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1356,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1191,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1190,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1203,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":862,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["10.0.3",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1354,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1352,"title":{},"body":{"overview.html":{}}}],["16.1.0",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["2.3.2",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":1353,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["30d",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["6",{"_index":1030,"title":{},"body":{"classes/User.html":{},"overview.html":{}}}],["6.3.0",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1351,"title":{},"body":{"overview.html":{}}}],["7.1.1",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{}}}],["9.0.0",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["9.4.0",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":601,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["academia",{"_index":1270,"title":{},"body":{"index.html":{}}}],["access_token_strategy",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":155,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":23,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["according",{"_index":940,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["acesse",{"_index":1287,"title":{},"body":{"index.html":{}}}],["activation",{"_index":1015,"title":{},"body":{"classes/User.html":{}}}],["active",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["addexercise",{"_index":788,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addexercise(planid",{"_index":790,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addorupdatetraining",{"_index":659,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["addorupdatetraining(id",{"_index":744,"title":{},"body":{"controllers/PlansController.html":{}}}],["addorupdatetraining(planid",{"_index":826,"title":{},"body":{"injectables/PlansService.html":{}}}],["age",{"_index":934,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["age'})@prop({type",{"_index":938,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["aggregate(pipeline",{"_index":811,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["aliases",{"_index":1363,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowdiskuse(false",{"_index":812,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["already",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["alteredtraining",{"_index":857,"title":{},"body":{"injectables/PlansService.html":{}}}],["alteredtraining.push",{"_index":874,"title":{},"body":{"injectables/PlansService.html":{}}}],["além",{"_index":1271,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":707,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["api",{"_index":1310,"title":{},"body":{"index.html":{},"properties.html":{}}}],["api.onrender.com/swagger",{"_index":1301,"title":{},"body":{"index.html":{}}}],["api/back",{"_index":1253,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":554,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":175,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isarray()@isoptional",{"_index":458,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["apiproperty()@isdate()@isdefined()@isnotempty",{"_index":954,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isdate()@isnotempty()@isdefined",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isdefined()@isarray()@arraynotempty",{"_index":435,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isboolean",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isdate",{"_index":1040,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isjwt()@isstring",{"_index":255,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@ismongoid()@isstring",{"_index":262,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring",{"_index":456,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring()@isemail",{"_index":257,"title":{},"body":{"classes/AuthDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isstring()@isnotempty()@isdefined",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isboolean",{"_index":983,"title":{},"body":{"classes/TrainingDto.html":{}}}],["apiproperty()@isnumber()@isdefined()@isnotempty",{"_index":956,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isobject",{"_index":260,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isoptional()@isarray",{"_index":1009,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isboolean",{"_index":997,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["apiproperty()@isoptional()@isdate",{"_index":453,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@ismongoid()@isstring",{"_index":999,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined",{"_index":439,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined()@minlength(6",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":441,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{}}}],["apiproperty()@isstring()@isurl()@isoptional",{"_index":437,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty({description",{"_index":158,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["apitags",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exercises",{"_index":563,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["apitags('plans",{"_index":762,"title":{},"body":{"controllers/PlansController.html":{}}}],["apitags('users",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["aplicação",{"_index":1256,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app.controller",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":77,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":101,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":92,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["arr.foreach((obj",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["arrayelemat",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraynotempty",{"_index":444,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["async",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["atlasconnection",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["atlasconnection}/${configservice.get('mongo_db",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":151,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["auth.controller",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.model",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["auth.name",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.repository",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["auth/auth.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_controller",{"_index":641,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_repository",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_service",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/IAuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":187,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdocument",{"_index":180,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["authdocument.accesstoken",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.email",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.refreshtoken",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.userid",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto",{"_index":233,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{}}}],["authguard('jwt",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authmodule",{"_index":112,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1335,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authrepository",{"_index":282,"title":{"injectables/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"coverage.html":{}}}],["authschema",{"_index":185,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":280,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["available",{"_index":1349,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["avatar'})@prop({type",{"_index":1018,"title":{},"body":{"classes/User.html":{}}}],["await",{"_index":71,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["back",{"_index":1305,"title":{},"body":{"index.html":{}}}],["bad",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request_400",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bad_request_400})@apinotfoundresponse({description",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`delete",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`disable",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`enable",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`invalid",{"_index":622,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`update",{"_index":634,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(error.message",{"_index":631,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(errors",{"_index":628,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["banco",{"_index":1285,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(passwordlogin",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(password",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["belongs",{"_index":850,"title":{},"body":{"injectables/PlansService.html":{}}}],["birth",{"_index":1020,"title":{},"body":{"classes/User.html":{}}}],["birthdate",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["bmi",{"_index":935,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["body",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["body('exerciseid",{"_index":773,"title":{},"body":{"controllers/PlansController.html":{}}}],["boolean",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1347,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1344,"title":{},"body":{"modules.html":{}}}],["buildparams",{"_index":612,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildparams(params",{"_index":617,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["calculation",{"_index":949,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["calculation'})@prop({type",{"_index":942,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["catch",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["characters",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["class",{"_index":17,"title":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":152,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_imports",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_plansmodule",{"_index":775,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_plansmodule_imports",{"_index":776,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_routinesmodule",{"_index":922,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_routinesmodule_providers",{"_index":923,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["collection",{"_index":181,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{}}}],["com",{"_index":1277,"title":{},"body":{"index.html":{}}}],["comparepasswords",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepasswords(password",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc",{"_index":1297,"title":{},"body":{"index.html":{}}}],["concat",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cond",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('environment_local",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":901,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('mongo_atlas",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mongo_local",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(auth_service",{"_index":702,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(authservice",{"_index":697,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(model",{"_index":313,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["constructor(private",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["constructor(repository",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["construída",{"_index":1357,"title":{},"body":{"properties.html":{}}}],["content",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":965,"title":{},"body":{"classes/Training.html":{}}}],["controle",{"_index":1261,"title":{},"body":{"index.html":{}}}],["controller",{"_index":76,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exercises",{"_index":562,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["controller('plans",{"_index":761,"title":{},"body":{"controllers/PlansController.html":{}}}],["controller('users",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1186,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":309,"title":{},"body":{"injectables/AuthRepository.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":574,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["create(auth",{"_index":316,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["create(exercise",{"_index":532,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["create(plan",{"_index":747,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["create(user",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":724,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["created_201",{"_index":534,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createexercisedto",{"_index":428,"title":{"classes/CreateExerciseDto.html":{}},"body":{"classes/CreateExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["createplandto",{"_index":448,"title":{"classes/CreatePlanDto.html":{}},"body":{"classes/CreatePlanDto.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":463,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["current",{"_index":878,"title":{},"body":{"injectables/PlansService.html":{}}}],["da",{"_index":1255,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dados",{"_index":1286,"title":{},"body":{"index.html":{}}}],["data",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{}}}],["data.email",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.pipeline",{"_index":806,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["data.pipeline.ts",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data.refreshtoken",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.sub",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":452,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["date'})@prop({type",{"_index":1021,"title":{},"body":{"classes/User.html":{}}}],["date(shape.age",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["de",{"_index":1262,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["decodedrefreshtoken",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedrefreshtoken.exp",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken(token",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":648,"title":{},"body":{"interfaces/IDefaultController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete(id",{"_index":1096,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["demonstração",{"_index":1272,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":103,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":183,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["descrição",{"_index":1252,"title":{},"body":{"index.html":{}}}],["desenho",{"_index":1313,"title":{},"body":{"index.html":{}}}],["desenvolvida",{"_index":1276,"title":{},"body":{"index.html":{}}}],["development",{"_index":1320,"title":{},"body":{"index.html":{}}}],["diagramação",{"_index":1312,"title":{},"body":{"index.html":{}}}],["disable",{"_index":681,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disable(@param('id",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["disable(id",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disabled",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IDefaultController.html":{}}}],["document",{"_index":177,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["documentation",{"_index":1187,"title":{},"body":{"coverage.html":{}}}],["documentation/index.html",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["documentação",{"_index":1292,"title":{},"body":{"index.html":{}}}],["done",{"_index":872,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["done'})@prop({type",{"_index":966,"title":{},"body":{"classes/Training.html":{}}}],["dotenv",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["draw",{"_index":1288,"title":{},"body":{"index.html":{}}}],["dtos/auth.dto",{"_index":326,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{}}}],["dtos/dtos",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":1267,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["e._id",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1331,"title":{},"body":{"index.html":{}}}],["elemmatch",{"_index":875,"title":{},"body":{"injectables/PlansService.html":{}}}],["em",{"_index":1279,"title":{},"body":{"index.html":{},"properties.html":{}}}],["email",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email'})@prop({type",{"_index":163,"title":{},"body":{"classes/Auth.html":{},"classes/User.html":{}}}],["enable",{"_index":682,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enable(@param('id",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["enable(id",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enabled",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["end",{"_index":1254,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1298,"title":{},"body":{"index.html":{}}}],["eq",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["error.constraints",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors",{"_index":625,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["errors.length",{"_index":627,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["errors.map((error",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["estrutura",{"_index":1295,"title":{},"body":{"index.html":{}}}],["estática",{"_index":1294,"title":{},"body":{"index.html":{}}}],["evolução",{"_index":1265,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1318,"title":{},"body":{"index.html":{}}}],["execução",{"_index":1273,"title":{},"body":{"index.html":{}}}],["exercise",{"_index":496,"title":{"classes/Exercise.html":{}},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercise'})@prop({type",{"_index":510,"title":{},"body":{"classes/Exercise.html":{}}}],["exercise.focusmuscle",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.id",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.image",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.length",{"_index":569,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["exercise.model",{"_index":560,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"interfaces/IExercisesController.html":{}}}],["exercise.name",{"_index":587,"title":{},"body":{"modules/ExercisesModule.html":{},"miscellaneous/variables.html":{}}}],["exercise.notes",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.video",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedatapipeline",{"_index":804,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisedatapipeline('_id",{"_index":813,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedatapipeline('userid",{"_index":809,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedetails",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails._id",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.focusmuscle",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.image",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.name",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.notes",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.video",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedocument",{"_index":514,"title":{},"body":{"classes/Exercise.html":{},"injectables/ExercisesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["exercisedto",{"_index":518,"title":{"classes/ExerciseDto.html":{}},"body":{"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseexists",{"_index":876,"title":{},"body":{"injectables/PlansService.html":{}}}],["exercisefocusmuscle",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exerciseid",{"_index":668,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["exerciseimage",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisename",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercises",{"_index":515,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["exercises.controller",{"_index":582,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["exercises.dto.ts:17",{"_index":440,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:23",{"_index":436,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:29",{"_index":438,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:35",{"_index":443,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:40",{"_index":442,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.length",{"_index":619,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.map((exe",{"_index":620,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.repository",{"_index":586,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.service",{"_index":581,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises/exercises.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["exercises/exercises.service",{"_index":784,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises/interfaces/exercises.service.interface",{"_index":785,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises_controller",{"_index":654,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_repository",{"_index":583,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_service",{"_index":555,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"interfaces/IExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseschema",{"_index":516,"title":{},"body":{"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisescontroller",{"_index":526,"title":{"controllers/ExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"coverage.html":{}}}],["exercisesmodule",{"_index":113,"title":{"modules/ExercisesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["exercisesrepository",{"_index":585,"title":{"injectables/ExercisesRepository.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["exercisesservice",{"_index":580,"title":{"injectables/ExercisesService.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["exercisevideo",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercícios",{"_index":1274,"title":{},"body":{"index.html":{}}}],["existing",{"_index":722,"title":{},"body":{"classes/Plan.html":{}}}],["existingtraining",{"_index":837,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining.findindex",{"_index":859,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining[existingtrainingindex",{"_index":863,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtrainingindex",{"_index":858,"title":{},"body":{"injectables/PlansService.html":{}}}],["existis",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["exp",{"_index":693,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expires",{"_index":884,"title":{},"body":{"classes/RefreshToken.html":{}}}],["expiresin",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["external",{"_index":504,"title":{},"body":{"classes/Exercise.html":{}}}],["extractjwt",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["failed",{"_index":635,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["field",{"_index":651,"title":{},"body":{"interfaces/IDefaultController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":674,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["findbyparams",{"_index":528,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(@query",{"_index":567,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["findbyparams(params",{"_index":537,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(request",{"_index":749,"title":{},"body":{"controllers/PlansController.html":{}}}],["first",{"_index":1024,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["flavsoliver@gmail.com",{"_index":1343,"title":{},"body":{"index.html":{}}}],["fluxos",{"_index":1314,"title":{},"body":{"index.html":{}}}],["flávio",{"_index":1336,"title":{},"body":{"index.html":{},"properties.html":{}}}],["focus",{"_index":498,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["focusmuscle",{"_index":431,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["foreignfield",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":1282,"title":{},"body":{"index.html":{},"properties.html":{}}}],["frequency",{"_index":907,"title":{},"body":{"classes/Routine.html":{}}}],["funcionalidades",{"_index":1290,"title":{},"body":{"index.html":{}}}],["function",{"_index":640,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1248,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["física",{"_index":1266,"title":{},"body":{"index.html":{}}}],["físicos",{"_index":1275,"title":{},"body":{"index.html":{}}}],["generateaccesstoken",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(userid",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["gerada",{"_index":1296,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":570,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":546,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["get('documentation",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["get('email",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('email')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('search",{"_index":566,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get('search')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":539,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get()@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":543,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["getaccesstoken",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["getaccesstoken.accesstoken",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["getaccesstoken.refreshtoken.expiresin",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["getaccesstoken.refreshtoken.refreshtoken",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["getall",{"_index":529,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getall(@req",{"_index":764,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(request",{"_index":751,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(userid",{"_index":794,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["getbyaccesstoken",{"_index":310,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["getbyaccesstoken(token",{"_index":318,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["getbyemail",{"_index":683,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyemail(@query('email",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbyemail(email",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyfield",{"_index":649,"title":{},"body":{"interfaces/IDefaultController.html":{}}}],["getbyid",{"_index":530,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param('id",{"_index":571,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["getbyid(id",{"_index":545,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyrefreshtoken",{"_index":311,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["getbyrefreshtoken(token",{"_index":320,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["gethello",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getplanbyexerciseid",{"_index":671,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["getplanbyexerciseid(filter",{"_index":797,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["getting",{"_index":1250,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1348,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gym",{"_index":1257,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hashedpassword",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword(password",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["height",{"_index":936,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["height'})@prop({type",{"_index":944,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["hello",{"_index":149,"title":{},"body":{"injectables/AppService.html":{}}}],["history",{"_index":1032,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{}}}],["history.dto",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["history.dto.ts",{"_index":953,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["history.dto.ts:15",{"_index":958,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:21",{"_index":959,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:27",{"_index":957,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:9",{"_index":955,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.ts",{"_index":933,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["history.ts:11",{"_index":939,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:15",{"_index":945,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:19",{"_index":947,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:25",{"_index":943,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["https://docs.nestjs.com/controllers#controllers",{"_index":921,"title":{},"body":{"controllers/RoutinesController.html":{}}}],["https://flaviosoliver",{"_index":1339,"title":{},"body":{"index.html":{}}}],["https://github.com/flaviosoliver",{"_index":1361,"title":{},"body":{"properties.html":{}}}],["https://todo",{"_index":1300,"title":{},"body":{"index.html":{}}}],["https://www.linkedin.com/in/flaviosoliver",{"_index":1342,"title":{},"body":{"index.html":{}}}],["iat",{"_index":694,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["iauthcontroller",{"_index":224,"title":{"interfaces/IAuthController.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"coverage.html":{}}}],["iauthrepository",{"_index":325,"title":{"interfaces/IAuthRepository.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["iauthservice",{"_index":222,"title":{"interfaces/IAuthService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["id",{"_index":170,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id'})@prop({type",{"_index":968,"title":{},"body":{"classes/Training.html":{}}}],["idefaultcontroller",{"_index":646,"title":{"interfaces/IDefaultController.html":{}},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["identifier",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["iexercisescontroller",{"_index":558,"title":{"interfaces/IExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"interfaces/IExercisesController.html":{},"coverage.html":{}}}],["iexercisesrepository",{"_index":595,"title":{"interfaces/IExercisesRepository.html":{}},"body":{"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{}}}],["iexercisesservice",{"_index":556,"title":{"interfaces/IExercisesService.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["image",{"_index":432,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["image'})@prop({type",{"_index":506,"title":{},"body":{"classes/Exercise.html":{}}}],["implements",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["in'})@prop({type",{"_index":885,"title":{},"body":{"classes/RefreshToken.html":{}}}],["incorrect",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(auth_repository",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(auth_service",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["inject(exercises_repository",{"_index":615,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["inject(exercises_service",{"_index":564,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["inject(plans_repository",{"_index":841,"title":{},"body":{"injectables/PlansService.html":{}}}],["inject(plans_service",{"_index":763,"title":{},"body":{"controllers/PlansController.html":{}}}],["inject(users_repository",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":60,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":324,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(auth.name",{"_index":327,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["injectmodel(exercise.name",{"_index":596,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["injectmodel(plan.name",{"_index":807,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["injectmodel(user.name",{"_index":1105,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["input",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instalação",{"_index":1315,"title":{},"body":{"index.html":{}}}],["installpara",{"_index":1317,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":630,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":636,"title":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":637,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["interfaces/auth.controller.interface",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces/auth.repository.interface",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["interfaces/auth.service.interface",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["interfaces/exercises.controller.interface",{"_index":559,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["interfaces/exercises.repository.interface",{"_index":584,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/exercises.service.interface",{"_index":557,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/jwt",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["interfaces/plans.controller.interface",{"_index":760,"title":{},"body":{"controllers/PlansController.html":{}}}],["interfaces/plans.repository.interface",{"_index":783,"title":{},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["interfaces/plans.service.interface",{"_index":758,"title":{},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{}}}],["interfaces/users.controller.interface",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["interfaces/users.repository.interface",{"_index":1089,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.service.interface",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["internal",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["io",{"_index":1289,"title":{},"body":{"index.html":{}}}],["iplanscontroller",{"_index":657,"title":{"interfaces/IPlansController.html":{}},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"coverage.html":{}}}],["iplansrepository",{"_index":669,"title":{"interfaces/IPlansRepository.html":{}},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["iplansservice",{"_index":675,"title":{"interfaces/IPlansService.html":{}},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["isarray",{"_index":445,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isboolean",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isdate",{"_index":461,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isdefined",{"_index":264,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":265,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["isemail(email",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["isjwt",{"_index":266,"title":{},"body":{"classes/AuthDto.html":{}}}],["islocal",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["ismongoid",{"_index":267,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":268,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isnumber",{"_index":960,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["isobject",{"_index":269,"title":{},"body":{"classes/AuthDto.html":{}}}],["isoptional",{"_index":446,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["ispasswordvalid",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":270,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isurl",{"_index":447,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["iuserscontroller",{"_index":679,"title":{"interfaces/IUsersController.html":{}},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["iusersrepository",{"_index":687,"title":{"interfaces/IUsersRepository.html":{}},"body":{"interfaces/IUsersRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":31,"title":{"interfaces/IUsersService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jsonwebtoken",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":65,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":39,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["lastname",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["license",{"_index":1359,"title":{},"body":{"properties.html":{}}}],["linguagem",{"_index":1304,"title":{},"body":{"index.html":{},"properties.html":{}}}],["linkedin",{"_index":1341,"title":{},"body":{"index.html":{}}}],["load",{"_index":869,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["load/weight",{"_index":980,"title":{},"body":{"classes/Training.html":{}}}],["load/weight'})@prop({type",{"_index":971,"title":{},"body":{"classes/Training.html":{}}}],["local",{"_index":701,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local_strategy",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["localconnection",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["localconnection}/${configservice.get('mongo_db",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["localfield",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":295,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["logger",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('exercises",{"_index":609,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["logger('plansservice",{"_index":838,"title":{},"body":{"injectables/PlansService.html":{}}}],["logger('usersservice",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["login(@body",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(doc",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":193,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["logout(@req",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(request",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{}}}],["logout(userid",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["lookup",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapexercise",{"_index":610,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapexercise(exe",{"_index":621,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapexercise(exercise",{"_index":624,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapplan",{"_index":839,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapplan(item",{"_index":846,"title":{},"body":{"injectables/PlansService.html":{}}}],["mapplan(plan",{"_index":843,"title":{},"body":{"injectables/PlansService.html":{}}}],["maptrainings",{"_index":1214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser(user",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mergedprops",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop].push(obj[prop",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergeobjects",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["messages",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["messages.join",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["mim",{"_index":1334,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["minlength(6",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miro",{"_index":1291,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1247,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1324,"title":{},"body":{"index.html":{}}}],["model",{"_index":314,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["modelagem",{"_index":1284,"title":{},"body":{"index.html":{}}}],["models/training.model",{"_index":962,"title":{},"body":{"modules/SharedModule.html":{}}}],["modular",{"_index":1293,"title":{},"body":{"index.html":{}}}],["module",{"_index":100,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":102,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":1308,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":178,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{},"index.html":{}}}],["mongoose.schema.types.objectid",{"_index":732,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["mongoose.types.objectid(value",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["more'})@prop({type",{"_index":1029,"title":{},"body":{"classes/User.html":{}}}],["muscle",{"_index":499,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["musculação",{"_index":1268,"title":{},"body":{"index.html":{}}}],["n",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["na",{"_index":1269,"title":{},"body":{"index.html":{},"properties.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"injectables/LocalStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/TrainingDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["name'})@prop({type",{"_index":508,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["nest",{"_index":1283,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1307,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":176,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtoken",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["no_content_204",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":1306,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1280,"title":{},"body":{"index.html":{},"properties.html":{}}}],["not_found_404",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["not_found_404})@apiinternalservererrorresponse({description",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["not_found_404})@apiokresponse({description",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["notes",{"_index":433,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["notes'})@prop({type",{"_index":973,"title":{},"body":{"classes/Training.html":{}}}],["notfoundexception",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`email",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`exercise",{"_index":633,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["notfoundexception(`id",{"_index":573,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`token",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`user",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1316,"title":{},"body":{"index.html":{}}}],["null",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":695,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{}}}],["o",{"_index":1281,"title":{},"body":{"index.html":{},"properties.html":{}}}],["obj",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["obj[prop",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["object",{"_index":184,"title":{},"body":{"classes/Auth.html":{}}}],["object'})@prop({type",{"_index":167,"title":{},"body":{"classes/Auth.html":{}}}],["object.entries(mergedprops).map",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["odm",{"_index":1309,"title":{},"body":{"index.html":{}}}],["ok",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok_200",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oliveira",{"_index":1337,"title":{},"body":{"index.html":{},"properties.html":{}}}],["opt",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.focusmuscle",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.push",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"injectables/LocalStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["overview",{"_index":1350,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1219,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":1260,"title":{},"body":{"index.html":{}}}],["param",{"_index":551,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":577,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":541,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["params.focusmuscle",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.focusmuscle?.length",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.name",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.userid",{"_index":766,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["params.utils",{"_index":614,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["params.utils.ts",{"_index":1209,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["paramsdto",{"_index":538,"title":{"classes/ParamsDto.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":902,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":704,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordlogin",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passworduser",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":552,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/disable",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/disable')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/doneexercise",{"_index":772,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/doneexercise')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":756,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/enable",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/enable')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/shape",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/update",{"_index":576,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/update')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":549,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/updatetraining",{"_index":770,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/updatetraining')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":745,"title":{},"body":{"controllers/PlansController.html":{}}}],["path",{"_index":94,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface.ts",{"_index":692,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pipeline",{"_index":808,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["pipelines/exercise",{"_index":805,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["plan",{"_index":664,"title":{"classes/Plan.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plan'})@prop({type",{"_index":717,"title":{},"body":{"classes/Plan.html":{}}}],["plan.dto.ts",{"_index":450,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["plan.dto.ts:16",{"_index":1011,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:19",{"_index":457,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:21",{"_index":1012,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:25",{"_index":455,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:26",{"_index":1010,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:30",{"_index":454,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:31",{"_index":1008,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:37",{"_index":460,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:42",{"_index":459,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.expiresin",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.focusmuscle",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.id",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.length",{"_index":767,"title":{},"body":{"controllers/PlansController.html":{}}}],["plan.model",{"_index":665,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{}}}],["plan.name",{"_index":786,"title":{},"body":{"modules/PlansModule.html":{},"miscellaneous/variables.html":{}}}],["plan.training",{"_index":855,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["plan.userid",{"_index":768,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["plan.userid.tostring",{"_index":852,"title":{},"body":{"injectables/PlansService.html":{}}}],["plandocument",{"_index":730,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansRepository.html":{},"miscellaneous/typealiases.html":{}}}],["plandto",{"_index":663,"title":{"classes/PlanDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planid",{"_index":678,"title":{},"body":{"interfaces/IPlansService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["plans",{"_index":731,"title":{},"body":{"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["plans.controller",{"_index":778,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.length",{"_index":844,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.map((item",{"_index":845,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.repository",{"_index":782,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.service",{"_index":780,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans/plans.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["plans_controller",{"_index":666,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_repository",{"_index":673,"title":{},"body":{"interfaces/IPlansRepository.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_service",{"_index":677,"title":{},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planschema",{"_index":733,"title":{},"body":{"classes/Plan.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planscontroller",{"_index":742,"title":{"controllers/PlansController.html":{}},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["plansmodule",{"_index":114,"title":{"modules/PlansModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["plansrepository",{"_index":781,"title":{"injectables/PlansRepository.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"coverage.html":{}}}],["plansservice",{"_index":779,"title":{"injectables/PlansService.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["portfolio.vercel.app",{"_index":1340,"title":{},"body":{"index.html":{}}}],["portfólio",{"_index":1338,"title":{},"body":{"index.html":{}}}],["post",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["post('logout",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apiunauthorizedresponse({description",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":533,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["post()@useguards(undefined)@apiunauthorizedresponse({description",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":61,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":64,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["production",{"_index":1326,"title":{},"body":{"index.html":{}}}],["project",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projeto",{"_index":1319,"title":{},"body":{"index.html":{}}}],["promise",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["prop",{"_index":172,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["prop({type",{"_index":908,"title":{},"body":{"classes/Routine.html":{}}}],["properties",{"_index":154,"title":{"properties.html":{}},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["provide",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["push",{"_index":818,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":553,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["readonly",{"_index":62,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["ref",{"_index":725,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["reflect",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":165,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refresh_token_strategy",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":156,"title":{"classes/RefreshToken.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["refreshtoken(@req",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(request",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken.refreshtoken",{"_index":331,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["refreshtokendocument",{"_index":889,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":259,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/AuthDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenguard",{"_index":895,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["refreshtokens(data",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenschema",{"_index":168,"title":{},"body":{"classes/Auth.html":{},"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenstrategy",{"_index":292,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["regex",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":941,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["removeexercise",{"_index":822,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["repetitions",{"_index":867,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["repetitions'})@prop({type",{"_index":975,"title":{},"body":{"classes/Training.html":{}}}],["repository",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["req.get('authorization').replace('bearer",{"_index":903,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["request",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user?.id",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PlansController.html":{}}}],["require",{"_index":886,"title":{},"body":{"classes/RefreshToken.html":{}}}],["required",{"_index":160,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["res",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["res.sendfile(path.join(__dirname",{"_index":98,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["response",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":1311,"title":{},"body":{"index.html":{}}}],["result",{"_index":332,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["result.join('\\n",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.userid.tostring",{"_index":849,"title":{},"body":{"injectables/PlansService.html":{}}}],["result[0",{"_index":814,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["results",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":75,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["rotinas",{"_index":1264,"title":{},"body":{"index.html":{}}}],["routine",{"_index":905,"title":{"classes/Routine.html":{}},"body":{"classes/Routine.html":{},"coverage.html":{}}}],["routinedocument",{"_index":915,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/typealiases.html":{}}}],["routines",{"_index":916,"title":{},"body":{"classes/Routine.html":{}}}],["routines.controller",{"_index":927,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines.service",{"_index":926,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines/routines.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["routineschema",{"_index":917,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routinescontroller",{"_index":919,"title":{"controllers/RoutinesController.html":{}},"body":{"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"coverage.html":{}}}],["routinesmodule",{"_index":115,"title":{"modules/RoutinesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoutinesModule.html":{},"modules.html":{},"overview.html":{}}}],["routinesrepository",{"_index":928,"title":{"injectables/RoutinesRepository.html":{}},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["routinesservice",{"_index":924,"title":{"injectables/RoutinesService.html":{}},"body":{"modules/RoutinesModule.html":{},"injectables/RoutinesService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1321,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["savenewaccesstoken",{"_index":312,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["savenewaccesstoken(refreshtoken",{"_index":322,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["saveplan",{"_index":672,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["saveplan(plan",{"_index":799,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["schema",{"_index":173,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":174,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(auth",{"_index":186,"title":{},"body":{"classes/Auth.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exercise",{"_index":517,"title":{},"body":{"classes/Exercise.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(plan",{"_index":734,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":890,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(routine",{"_index":918,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shapehistory",{"_index":951,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(training",{"_index":981,"title":{},"body":{"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1036,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccess",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":63,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secretrefresh",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["series",{"_index":865,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["series'})@prop({type",{"_index":977,"title":{},"body":{"classes/Training.html":{}}}],["servedocs",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(@res",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(res",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["server",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server_error_500",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_error_500})@apiokresponse({description",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["service",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":820,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["shape",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["shape.age",{"_index":1107,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["shape.bmi",{"_index":1110,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.height",{"_index":1108,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.weight",{"_index":1109,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shapehistory",{"_index":931,"title":{"classes/ShapeHistory.html":{}},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["shapehistorydocument",{"_index":948,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/typealiases.html":{}}}],["shapehistorydto",{"_index":490,"title":{"classes/ShapeHistoryDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/ShapeHistoryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["shapehistorydto.age",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.bmi",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.height",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.weight",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistoryschema",{"_index":950,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/dtos/params.dto",{"_index":561,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/dtos/training.dto",{"_index":759,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/models/training.model",{"_index":729,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{}}}],["shared/shared.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["shared/utils/build",{"_index":613,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["shared/utils/http",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["sharedmodule",{"_index":116,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["short",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["signoptions",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["src/.../access",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.interface.ts",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.model.ts",{"_index":1364,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth.repository.interface.ts",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.interface.ts",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../build",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../credentials.utils.ts",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.mapper.ts",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.model.ts",{"_index":1365,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exercises.controller.interface.ts",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.repository.interface.ts",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.service.interface.ts",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../local.strategy.ts",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.mapper.ts",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plan.model.ts",{"_index":1366,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../plans.controller.interface.ts",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.repository.interface.ts",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.service.interface.ts",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1367,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../routine.model.ts",{"_index":1368,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../shape",{"_index":1369,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../training.mapper.ts",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../training.model.ts",{"_index":1370,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.mapper.ts",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1371,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.controller.interface.ts",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.repository.interface.ts",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.interface.ts",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:16",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.service.ts",{"_index":147,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":148,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app.module.ts",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:43",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:55",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:67",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":153,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.model.ts:11",{"_index":171,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:15",{"_index":164,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:19",{"_index":162,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:23",{"_index":169,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.repository.ts",{"_index":308,"title":{},"body":{"injectables/AuthRepository.html":{},"coverage.html":{}}}],["src/modules/auth/auth.repository.ts:15",{"_index":317,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:19",{"_index":319,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:23",{"_index":323,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:30",{"_index":321,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:9",{"_index":315,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:105",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:142",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:150",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:167",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:172",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:189",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:219",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:27",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:38",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:39",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:42",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:80",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dtos/auth.dto.ts",{"_index":254,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:19",{"_index":263,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:26",{"_index":256,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:33",{"_index":258,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:37",{"_index":261,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":708,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:10",{"_index":709,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts:16",{"_index":710,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/refresh",{"_index":891,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/guard/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guard/refresh",{"_index":896,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/auth.controller.interface.ts",{"_index":638,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.controller.interface.ts:8",{"_index":639,"title":{},"body":{"interfaces/IAuthController.html":{}}}],["src/modules/auth/interfaces/auth.repository.interface.ts",{"_index":642,"title":{},"body":{"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.service.interface.ts",{"_index":643,"title":{},"body":{"interfaces/IAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/jwt",{"_index":691,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/refresh",{"_index":882,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/access",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/local.strategy.ts",{"_index":696,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:10",{"_index":698,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:18",{"_index":700,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/refresh",{"_index":897,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/utils/credentials.utils.ts",{"_index":1199,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/dtos/create",{"_index":429,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts",{"_index":519,"title":{},"body":{"classes/ExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:19",{"_index":521,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:25",{"_index":523,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:31",{"_index":520,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:37",{"_index":522,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:43",{"_index":525,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:48",{"_index":524,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/exercise.model.ts",{"_index":497,"title":{},"body":{"classes/Exercise.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/exercise.model.ts:13",{"_index":509,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:17",{"_index":502,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:21",{"_index":507,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:25",{"_index":513,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:29",{"_index":511,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:9",{"_index":503,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercises.controller.ts",{"_index":527,"title":{},"body":{"controllers/ExercisesController.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.controller.ts:102",{"_index":536,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:113",{"_index":550,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:57",{"_index":544,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:69",{"_index":540,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:85",{"_index":547,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.module.ts",{"_index":579,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["src/modules/exercises/exercises.repository.ts",{"_index":588,"title":{},"body":{"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.repository.ts:10",{"_index":589,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:16",{"_index":590,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:20",{"_index":592,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:24",{"_index":593,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:28",{"_index":591,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:32",{"_index":594,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.service.ts",{"_index":602,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.service.ts:21",{"_index":603,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:28",{"_index":606,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:36",{"_index":605,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:51",{"_index":607,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:65",{"_index":604,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:80",{"_index":608,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/interfaces/exercises.controller.interface.ts",{"_index":652,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.repository.interface.ts",{"_index":655,"title":{},"body":{"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.service.interface.ts",{"_index":656,"title":{},"body":{"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/utils/exercise.mapper.ts",{"_index":1202,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/dtos/create",{"_index":449,"title":{},"body":{"classes/CreatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts",{"_index":735,"title":{},"body":{"classes/PlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:20",{"_index":738,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:26",{"_index":739,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:32",{"_index":737,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:37",{"_index":736,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:44",{"_index":741,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:49",{"_index":740,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/update",{"_index":1007,"title":{},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/interfaces/plans.controller.interface.ts",{"_index":658,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.repository.interface.ts",{"_index":670,"title":{},"body":{"interfaces/IPlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.service.interface.ts",{"_index":676,"title":{},"body":{"interfaces/IPlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/pipelines/exercise",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts",{"_index":715,"title":{},"body":{"classes/Plan.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts:11",{"_index":720,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:15",{"_index":721,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:19",{"_index":719,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:23",{"_index":718,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:31",{"_index":727,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:38",{"_index":723,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plans.controller.ts",{"_index":743,"title":{},"body":{"controllers/PlansController.html":{},"coverage.html":{}}}],["src/modules/plans/plans.controller.ts:111",{"_index":748,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:127",{"_index":754,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:143",{"_index":746,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:159",{"_index":757,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:60",{"_index":752,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:73",{"_index":750,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:94",{"_index":753,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.module.ts",{"_index":777,"title":{},"body":{"modules/PlansModule.html":{}}}],["src/modules/plans/plans.repository.ts",{"_index":787,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{}}}],["src/modules/plans/plans.repository.ts:12",{"_index":789,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:18",{"_index":795,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:26",{"_index":796,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:34",{"_index":793,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:38",{"_index":792,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:42",{"_index":801,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:46",{"_index":800,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:50",{"_index":798,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:54",{"_index":791,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:72",{"_index":803,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.service.ts",{"_index":823,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{}}}],["src/modules/plans/plans.service.ts:121",{"_index":836,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:158",{"_index":834,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:23",{"_index":825,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:30",{"_index":830,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:38",{"_index":831,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:52",{"_index":829,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:67",{"_index":828,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:82",{"_index":832,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:98",{"_index":827,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/utils/plan.mapper.ts",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts",{"_index":906,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts:12",{"_index":912,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:15",{"_index":909,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:18",{"_index":910,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:25",{"_index":914,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:28",{"_index":913,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:9",{"_index":911,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routines.controller.ts",{"_index":920,"title":{},"body":{"controllers/RoutinesController.html":{},"coverage.html":{}}}],["src/modules/routines/routines.module.ts",{"_index":925,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["src/modules/routines/routines.repository.ts",{"_index":929,"title":{},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["src/modules/routines/routines.service.ts",{"_index":930,"title":{},"body":{"injectables/RoutinesService.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto",{"_index":653,"title":{},"body":{"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/params.dto.ts",{"_index":711,"title":{},"body":{"classes/ParamsDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto.ts:2",{"_index":713,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:3",{"_index":712,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:4",{"_index":714,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/training.dto",{"_index":662,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/training.dto.ts",{"_index":982,"title":{},"body":{"classes/TrainingDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/training.dto.ts:17",{"_index":986,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:24",{"_index":985,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:30",{"_index":992,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:36",{"_index":991,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:42",{"_index":988,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:47",{"_index":990,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:52",{"_index":984,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:58",{"_index":989,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:64",{"_index":987,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:70",{"_index":993,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/update",{"_index":995,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/shared/interfaces/default.controller.interface.ts",{"_index":647,"title":{},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["src/modules/shared/models/training.model",{"_index":462,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["src/modules/shared/models/training.model.ts",{"_index":964,"title":{},"body":{"classes/Training.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/models/training.model.ts:10",{"_index":970,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:18",{"_index":969,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:22",{"_index":978,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:26",{"_index":976,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:30",{"_index":972,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:34",{"_index":974,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:38",{"_index":967,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/shared.module.ts",{"_index":961,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/modules/shared/utils/build",{"_index":1208,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/http",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/training.mapper.ts",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/dtos/create",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/dtos",{"_index":644,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["src/modules/users/dtos/shape",{"_index":952,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/modules/users/dtos/user.dto.ts",{"_index":1037,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto.ts:22",{"_index":1044,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:29",{"_index":1042,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:35",{"_index":1046,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:41",{"_index":1043,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:47",{"_index":1045,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:53",{"_index":1041,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:59",{"_index":1038,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:65",{"_index":1047,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:70",{"_index":1039,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/interfaces/users.controller.interface.ts",{"_index":680,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.repository.interface.ts",{"_index":688,"title":{},"body":{"interfaces/IUsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.service.interface",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/modules/users/interfaces/users.service.interface.ts",{"_index":690,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/shape",{"_index":932,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts",{"_index":1014,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts:11",{"_index":1026,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:15",{"_index":1023,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:21",{"_index":1031,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:25",{"_index":1025,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:29",{"_index":1028,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:33",{"_index":1022,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:37",{"_index":1017,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:41",{"_index":1033,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:45",{"_index":1019,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:110",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:121",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:135",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:146",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:56",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:67",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:79",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:95",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1086,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.repository.ts",{"_index":1093,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/modules/users/users.repository.ts:15",{"_index":1095,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:19",{"_index":1100,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:23",{"_index":1102,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:27",{"_index":1101,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:32",{"_index":1103,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:36",{"_index":1104,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:52",{"_index":1097,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:56",{"_index":1099,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:60",{"_index":1098,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:9",{"_index":1094,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.service.ts",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:129",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:162",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:174",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:187",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:20",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:27",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:35",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:50",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:67",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:71",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:95",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/utils/user.mapper.ts",{"_index":1216,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1322,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1325,"title":{},"body":{"index.html":{}}}],["start:prodtestes",{"_index":1327,"title":{},"body":{"index.html":{}}}],["started",{"_index":1251,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1189,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":881,"title":{},"body":{"injectables/PlansService.html":{},"classes/User.html":{}}}],["status'})@prop({type",{"_index":1016,"title":{},"body":{"classes/User.html":{}}}],["status.utils",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["status.utils.ts",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["str",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["strategy",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["strategy/access",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/refresh",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{}}}],["super",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["support",{"_index":1345,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":1027,"title":{},"body":{"classes/User.html":{}}}],["svg",{"_index":1346,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1299,"title":{},"body":{"index.html":{}}}],["t",{"_index":650,"title":{},"body":{"interfaces/IDefaultController.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["t.exerciseid",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t.exerciseid.tostring",{"_index":860,"title":{},"body":{"injectables/PlansService.html":{}}}],["table",{"_index":1218,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["tecnologias",{"_index":1302,"title":{},"body":{"index.html":{}}}],["test",{"_index":1330,"title":{},"body":{"index.html":{}}}],["test:covsobre",{"_index":1333,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1332,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1329,"title":{},"body":{"index.html":{}}}],["then((errors",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(email",{"_index":705,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.decodetoken(newaccesstoken",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(user.id",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(user.id",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyemail(user.email",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(id",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashedpassword(user.password",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.decode(token",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(error",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.logger.error(str",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model",{"_index":810,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(auth",{"_index":328,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["this.model.create(exercise",{"_index":597,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["this.model.create(plan",{"_index":815,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(user",{"_index":1106,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.deleteone",{"_index":1111,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.find",{"_index":598,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.find(params",{"_index":600,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{}}}],["this.model.findbyid(id",{"_index":599,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findbyidandupdate(plan.id",{"_index":816,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.findone",{"_index":329,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findone(filter",{"_index":817,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.updateone",{"_index":330,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.updateone(filter",{"_index":819,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.repository.create(doc",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.create(exercise",{"_index":629,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["this.repository.create(plan",{"_index":848,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.create(user",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.delete(id",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.disable(id",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.enable(id",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findbyparams(parameters",{"_index":618,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["this.repository.getall",{"_index":616,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getall(userid",{"_index":842,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyaccesstoken(accesstoken",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.getbyemail(email",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.getbyid(id",{"_index":623,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getbyid(planid",{"_index":851,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyrefreshtoken(data.refreshtoken",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.getplanbyexerciseid(filter",{"_index":877,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.savenewaccesstoken(data.refreshtoken",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.saveplan(plan",{"_index":856,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.update(id",{"_index":632,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.updateexercisedonestatus(filter",{"_index":880,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.updateshape(id",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.secretrefresh",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.service.addorupdatetraining(id",{"_index":771,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(exercise",{"_index":575,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["this.service.create(plan",{"_index":769,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(user",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.disable(id",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.enable(id",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.findbyparams(params",{"_index":568,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["this.service.getall",{"_index":565,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["this.service.getall(userid",{"_index":765,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.getbyemail(email",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.getbyid(id",{"_index":572,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.login(email",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.logout(userid",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.refreshtokens(data",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.update(id",{"_index":578,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.updateexercisedonestatus(id",{"_index":774,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.updateshape(id",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.transformstring(arr",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.unixtimestamp",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatetraining(plan.training",{"_index":854,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":73,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":182,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["token",{"_index":166,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"classes/RefreshToken.html":{}}}],["token'})@prop({type",{"_index":159,"title":{},"body":{"classes/Auth.html":{},"classes/RefreshToken.html":{}}}],["token.dto",{"_index":272,"title":{},"body":{"classes/AuthDto.html":{}}}],["token.dto.ts",{"_index":892,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:2",{"_index":894,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:3",{"_index":893,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["token.model",{"_index":179,"title":{},"body":{"classes/Auth.html":{}}}],["token.model.ts",{"_index":883,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.model.ts:12",{"_index":887,"title":{},"body":{"classes/RefreshToken.html":{}}}],["token.model.ts:8",{"_index":888,"title":{},"body":{"classes/RefreshToken.html":{}}}],["token.strategy",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":25,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.strategy.ts:14",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:17",{"_index":898,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:25",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":900,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["training",{"_index":451,"title":{"classes/Training.html":{}},"body":{"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["training.$.done",{"_index":821,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["training.createdat",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["training.done",{"_index":873,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.dto",{"_index":1013,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["training.dto.ts",{"_index":996,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"coverage.html":{}}}],["training.dto.ts:17",{"_index":1001,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:23",{"_index":1000,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:28",{"_index":1005,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:33",{"_index":1004,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:38",{"_index":1002,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:43",{"_index":1003,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:48",{"_index":998,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.exerciseid",{"_index":861,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.exerciseid.tostring",{"_index":879,"title":{},"body":{"injectables/PlansService.html":{}}}],["training.id",{"_index":864,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.load",{"_index":870,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.name",{"_index":963,"title":{},"body":{"modules/SharedModule.html":{}}}],["training.notes",{"_index":871,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.repetitions",{"_index":868,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.series",{"_index":866,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.updatedat",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trainingdata",{"_index":667,"title":{},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{}}}],["trainingdocument",{"_index":979,"title":{},"body":{"classes/Training.html":{},"miscellaneous/typealiases.html":{}}}],["trainingdto",{"_index":661,"title":{"classes/TrainingDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/TrainingDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingschema",{"_index":728,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingupdatedto",{"_index":994,"title":{"classes/TrainingUpdateDto.html":{}},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["transformstring",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["transformstring(arr",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["treinos",{"_index":1263,"title":{},"body":{"index.html":{}}}],["trim",{"_index":904,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":161,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1362,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":1278,"title":{},"body":{"index.html":{},"properties.html":{}}}],["uma",{"_index":1258,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_401",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorized_401})@apibadrequestresponse({description",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('unregistered",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(`invalid",{"_index":706,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(`user",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":501,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["undefined})@apibody({type",{"_index":535,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["undefined})@prop({type",{"_index":500,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["unit",{"_index":1328,"title":{},"body":{"index.html":{}}}],["unixtimestamp",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["unknown",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["unlicensed",{"_index":1360,"title":{},"body":{"properties.html":{}}}],["unwind",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":531,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["update')@useguards(undefined)@apibearerauth()@apiunauthorizedresponse({description",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":548,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatedtraining",{"_index":853,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateexercisedonestatus",{"_index":660,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["updateexercisedonestatus(filter",{"_index":802,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["updateexercisedonestatus(id",{"_index":755,"title":{},"body":{"controllers/PlansController.html":{}}}],["updateexercisedonestatus(planid",{"_index":833,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateplandto",{"_index":1006,"title":{"classes/UpdatePlanDto.html":{}},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["updateshape",{"_index":684,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updateshape(id",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatetraining",{"_index":824,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatetraining(existingtraining",{"_index":835,"title":{},"body":{"injectables/PlansService.html":{}}}],["uri",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":505,"title":{},"body":{"classes/Exercise.html":{}}}],["useclass",{"_index":305,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('jwt",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":70,"title":{"classes/User.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"classes/Auth.html":{},"injectables/AuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.active",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.avatar",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.birthdate",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.dto.ts",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.id",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.lastname",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.model",{"_index":685,"title":{},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["user.name",{"_index":1092,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.shape",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":1034,"title":{},"body":{"classes/User.html":{},"injectables/UsersRepository.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":55,"title":{"classes/UserDto.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":157,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":703,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":726,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1088,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":1091,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1087,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dtos/dtos",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/interfaces/users.service.interface",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["users/user.model",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["users_controller",{"_index":686,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_repository",{"_index":689,"title":{},"body":{"interfaces/IUsersRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema",{"_index":1035,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1048,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":117,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1090,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"coverage.html":{}}}],["usersservice",{"_index":37,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["utilizadas",{"_index":1303,"title":{},"body":{"index.html":{}}}],["utilizando",{"_index":1358,"title":{},"body":{"properties.html":{}}}],["utils/credentials.utils",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/exercise.mapper",{"_index":611,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["utils/plan.mapper",{"_index":840,"title":{},"body":{"injectables/PlansService.html":{}}}],["utils/user.mapper",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["valid",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["validate(email",{"_index":699,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(exercise",{"_index":626,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["validate(payload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(plan",{"_index":847,"title":{},"body":{"injectables/PlansService.html":{}}}],["validate(req",{"_index":899,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validate(shapehistorydto",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate(user).then((errors",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatetoken",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["validatetoken(accesstoken",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["validateuser(email",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":271,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["validdate",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["validity",{"_index":716,"title":{},"body":{"classes/Plan.html":{}}}],["validobj",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["value",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1372,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1355,"title":{},"body":{"properties.html":{}}}],["video",{"_index":434,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["video'})@prop({type",{"_index":512,"title":{},"body":{"classes/Exercise.html":{}}}],["void",{"_index":645,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["watch",{"_index":1323,"title":{},"body":{"index.html":{}}}],["web",{"_index":1259,"title":{},"body":{"index.html":{}}}],["weight",{"_index":937,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["weight'})@prop({type",{"_index":946,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["world",{"_index":150,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":542,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["zoom",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/access-token.guard.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guard/access-token.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: IUsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/access-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/access-token.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from 'src/modules/users/interfaces/users.service.interface';\nimport { UserDto } from 'src/modules/users/dtos/user.dto';\n\nexport const ACCESS_TOKEN_STRATEGY = 'ACCESS_TOKEN_STRATEGY';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService\n  ) {\n    super({\n      secretOrKey: process.env.JWT_SECRET,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n    });\n  }\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload;\n    const user = await this.usersService.getByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    Async\n                                serveDocs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        serveDocs\n                        \n                    \n                \n            \n            \n                \n                    \n                    serveDocs(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('documentation')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AppService } from './app.service';\nimport * as path from 'path';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('documentation')\n  async serveDocs(@Res() res: Response) {\n    return res.sendFile(path.join(__dirname, '../documentation/index.html'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\n\n\nPlansModule\n\nPlansModule\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExercisesModule\n                        \n                        \n                            PlansModule\n                        \n                        \n                            RoutinesModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { RoutinesModule } from './routines/routines.module';\nimport { ExercisesModule } from './exercises/exercises.module';\nimport { UsersModule } from './users/users.module';\nimport { PlansModule } from './plans/plans.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AppController } from '../app.controller';\nimport { AppService } from '../app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        const localConnection = configService.get('MONGO_LOCAL');\n        const atlasConnection = configService.get('MONGO_ATLAS');\n        const isLocal = configService.get('ENVIRONMENT_LOCAL') ?? false;\n        return {\n          uri: isLocal\n            ? `${localConnection}/${configService.get('MONGO_DB')}`\n            : `${atlasConnection}/${configService.get('MONGO_DB')}`,\n        };\n      },\n      inject: [ConfigService],\n    }),\n    AuthModule,\n    UsersModule,\n    ExercisesModule,\n    PlansModule,\n    RoutinesModule,\n    SharedModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User token'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshToken\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User refresh token object'})@Prop({type: RefreshTokenSchema, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refresh-token.model';\n\nexport type AuthDocument = Auth & Document;\n\n@Schema({ collection: 'auth', timestamps: true })\nexport class Auth {\n  @ApiProperty({ description: 'User Id}' })\n  userId: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({ description: 'User token' })\n  @Prop({ type: String, required: true })\n  accessToken: string;\n\n  @ApiProperty({ description: 'User refresh token object' })\n  @Prop({ type: RefreshTokenSchema, required: true })\n  refreshToken: RefreshToken;\n}\n\nexport const AuthSchema = SchemaFactory.createForClass(Auth);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(doc: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: UserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refreshtoken')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Inject, Post, Req, UseGuards } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  AUTH_SERVICE,\n  IAuthService,\n} from './interfaces/auth.service.interface';\nimport { IAuthController } from './interfaces/auth.controller.interface';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n} from '../shared/utils/http-response-status.utils';\nimport { UserDto } from '../users/dtos/dtos';\nimport { AuthDto, LoginDto } from './dtos/dtos';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController implements IAuthController {\n  constructor(\n    @Inject(AUTH_SERVICE)\n    private readonly service: IAuthService\n  ) {}\n\n  @Post()\n  @UseGuards(AuthGuard('local'))\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: UserDto })\n  async login(@Body() doc: LoginDto): Promise {\n    const { email, password } = doc;\n    return await this.service.login(email, password);\n  }\n\n  @Post('logout')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async logout(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return this.service.logout(userId);\n  }\n\n  @Post('refreshtoken')\n  @UseGuards(AuthGuard('jwt-refresh'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async refreshToken(@Req() request: Request): Promise {\n    const data = request.user;\n    return await this.service.refreshTokens(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsJWT()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsEmail,\n  IsJWT,\n  IsMongoId,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\nimport { RefreshTokenDto } from './refresh-token.dto';\n\nexport class AuthDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsJWT()\n  @IsString()\n  accessToken: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsObject()\n  refreshToken: RefreshTokenDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './interfaces/auth.service.interface';\nimport { AuthRepository } from './auth.repository';\nimport { AUTH_REPOSITORY } from './interfaces/auth.repository.interface';\nimport { Auth, AuthSchema } from './auth.model';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { USERS_SERVICE } from '../users/interfaces/users.service.interface';\nimport { UsersService } from '../users/users.service';\nimport {\n  ACCESS_TOKEN_STRATEGY,\n  AccessTokenStrategy,\n} from './strategy/access-token.strategy';\nimport {\n  REFRESH_TOKEN_STRATEGY,\n  RefreshTokenStrategy,\n} from './strategy/refresh-token.strategy';\nimport { LOCAL_STRATEGY, LocalStrategy } from './strategy/local.strategy';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Auth.name,\n        schema: AuthSchema,\n      },\n    ]),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '7d' },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    ConfigModule,\n  ],\n  providers: [\n    { useClass: AuthService, provide: AUTH_SERVICE },\n    { useClass: AuthRepository, provide: AUTH_REPOSITORY },\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: LocalStrategy, provide: LOCAL_STRATEGY },\n    { useClass: AccessTokenStrategy, provide: ACCESS_TOKEN_STRATEGY },\n    {\n      useClass: RefreshTokenStrategy,\n      provide: REFRESH_TOKEN_STRATEGY,\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AUTH_SERVICE, AUTH_REPOSITORY],\n})\nexport class AuthModule {\n  constructor() {\n    dotenv.config();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthRepository.html":{"url":"injectables/AuthRepository.html","title":"injectable - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByAccessToken\n                            \n                            \n                                    Async\n                                getByRefreshToken\n                            \n                            \n                                    Async\n                                saveNewAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(auth: Auth)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    auth\n                                    \n                                                Auth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByAccessToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewAccessToken(refreshToken: string, auth: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    auth\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Auth, AuthDocument } from './auth.model';\nimport { IAuthRepository } from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthRepository implements IAuthRepository {\n  constructor(\n    @InjectModel(Auth.name)\n    readonly model: Model\n  ) {}\n\n  async create(auth: Auth): Promise {\n    return await this.model.create(auth);\n  }\n\n  async getByAccessToken(token: string): Promise {\n    return await this.model.findOne({ accessToken: token });\n  }\n\n  async saveNewAccessToken(refreshToken: string, auth: AuthDto): Promise {\n    await this.model.updateOne(\n      { 'refreshToken.refreshToken': refreshToken },\n      auth\n    );\n  }\n\n  async getByRefreshToken(token: string): Promise {\n    const result = await this.model.findOne({\n      'refreshToken.refreshToken': token,\n    });\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretAccess\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretRefresh\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decodeToken\n                            \n                            \n                                    Private\n                                generateAccessToken\n                            \n                            \n                                    Private\n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                unixTimestamp\n                            \n                            \n                                    Async\n                                validateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IAuthRepository, usersService: IUsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IAuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unixTimestamp\n                        \n                    \n                \n            \n            \n                \nunixTimestamp()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateToken(accessToken: string, refreshToken: string, payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AuthService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretAccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('JWT_SECRET')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretRefresh\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('JWT_REFRESH_SECRET')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:39\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from '../users/interfaces/users.service.interface';\nimport {\n  AUTH_REPOSITORY,\n  IAuthRepository,\n} from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/dtos';\nimport { IAuthService } from './interfaces/auth.service.interface';\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\nimport { comparePasswords } from './utils/credentials.utils';\nimport { User } from '../users/user.model';\n\n@Injectable()\nexport class AuthService implements IAuthService {\n  private readonly logger = new Logger('AuthService');\n\n  constructor(\n    @Inject(AUTH_REPOSITORY)\n    private readonly repository: IAuthRepository,\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) {}\n\n  private readonly secretAccess = this.configService.get('JWT_SECRET');\n  private readonly secretRefresh =\n    this.configService.get('JWT_REFRESH_SECRET');\n\n  async login(email: string, password: string): Promise {\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      if (!user) {\n        throw new UnauthorizedException(`User email ${email}`);\n      }\n\n      const isPasswordValid = await comparePasswords(password, user.password);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException(\n          `Password is incorrect to user ${user.email}`\n        );\n      }\n\n      const accessToken = this.generateAccessToken(user.id, user.email);\n      const refreshToken = await this.generateRefreshToken(user.id, user.email);\n\n      const doc: AuthDto = {\n        userId: user.id,\n        email: user.email,\n        accessToken: accessToken,\n        refreshToken: {\n          refreshToken: refreshToken,\n          expiresIn: this.unixTimestamp(),\n        },\n      };\n\n      await this.repository.create(doc);\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async logout(userId: string) {\n    try {\n      const user = await this.usersService.getById(userId);\n\n      if (!user) {\n        throw new UnauthorizedException(`User id ${userId}`);\n      }\n\n      const doc: AuthDto = {\n        userId: '',\n        email: '',\n        accessToken: '',\n        refreshToken: {\n          refreshToken: '',\n          expiresIn: 0,\n        },\n      };\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async refreshTokens(data: any): Promise {\n    try {\n      const doc = await this.repository.getByRefreshToken(data.refreshToken);\n\n      if (!doc) {\n        throw new NotFoundException(`Token ${data.refreshToken} not found`);\n      }\n\n      const newAccessToken = await this.generateAccessToken(\n        data.sub,\n        data.email\n      );\n\n      const newRefreshToken = await this.generateRefreshToken(\n        data.sub,\n        data.email\n      );\n\n      const decodedRefreshToken = await this.decodeToken(newAccessToken);\n\n      const authDocument = new AuthDto();\n      authDocument.userId = data.sub;\n      authDocument.email = data.email;\n      authDocument.accessToken = newAccessToken;\n      authDocument.refreshToken = {\n        refreshToken: newRefreshToken,\n        expiresIn: decodedRefreshToken.exp,\n      };\n\n      await this.repository.saveNewAccessToken(data.refreshToken, authDocument);\n      return authDocument;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async decodeToken(token: string): Promise {\n    try {\n      return this.jwtService.decode(token);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async validateUser(email: string, password: string) {\n    let user: User;\n    try {\n      user = await this.usersService.getByEmail(email);\n\n      if (!user) return null;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n    const isPasswordValid = comparePasswords(password, user.password);\n\n    if (!isPasswordValid) return null;\n\n    return user;\n  }\n\n  private generateAccessToken(userId: string, email: string): string {\n    const payload = { sub: userId, email: email };\n    return this.jwtService.sign(payload);\n  }\n\n  private async generateRefreshToken(\n    userId: string,\n    email: string\n  ): Promise {\n    const refreshToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        email: email,\n      },\n      {\n        secret: this.secretRefresh,\n        expiresIn: '30d',\n      }\n    );\n    return refreshToken;\n  }\n\n  async validateToken(\n    accessToken: string,\n    refreshToken: string,\n    payload: JwtPayload\n  ) {\n    const getAccessToken = await this.repository.getByAccessToken(accessToken);\n\n    if (!getAccessToken.accessToken) {\n      throw new UnauthorizedException('Unregistered AccessToken');\n    }\n\n    const isMatch = getAccessToken.refreshToken.refreshToken === refreshToken;\n\n    if (!isMatch) {\n      throw new UnauthorizedException('Unregistered AccessToken');\n    }\n\n    const validDate =\n      getAccessToken.refreshToken.expiresIn \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExerciseDto.html":{"url":"classes/CreateExerciseDto.html","title":"class - CreateExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/create-exercises.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateExerciseDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlanDto.html":{"url":"classes/CreatePlanDto.html","title":"class - CreatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/create-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         [Training]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsNotEmpty,\n  IsString,\n  IsArray,\n  ArrayNotEmpty,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class CreatePlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: [Training];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()@MinLength(6, {message: 'Your password is too short! It must be 5 characters or more!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShapeHistoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ShapeHistoryDto } from './shape-history.dto';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  @MinLength(6, {\n    message: 'Your password is too short! It must be 5 characters or more!',\n  })\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDate()\n  @IsNotEmpty()\n  @IsDefined()\n  birthDate: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistoryDto[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exercise.html":{"url":"classes/Exercise.html","title":"class - Exercise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exercise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercise.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Exercise', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Image'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Info notes to exercise'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Video'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type ExerciseDocument = Exercise & Document;\n\n@Schema({ collection: 'exercises', timestamps: true })\nexport class Exercise {\n  @ApiProperty({ description: 'Exercise Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Exercise', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'External URL for Exercise Image' })\n  @Prop({ type: String, required: false })\n  image?: string;\n\n  @ApiProperty({ description: 'External URL for Exercise Video' })\n  @Prop({ type: String, required: false })\n  video?: string;\n\n  @ApiProperty({ description: 'Info notes to exercise' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n}\n\nexport const ExerciseSchema = SchemaFactory.createForClass(Exercise);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExerciseDto.html":{"url":"classes/ExerciseDto.html","title":"class - ExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/exercise.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class ExerciseDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExercisesController.html":{"url":"controllers/ExercisesController.html","title":"controller - ExercisesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exercises\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateExerciseDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  Get,\n  UseGuards,\n  Param,\n  NotFoundException,\n  Body,\n  Post,\n  Patch,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  EXERCISES_SERVICE,\n  IExercisesService,\n} from './interfaces/exercises.service.interface';\nimport { IExercisesController } from './interfaces/exercises.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { Exercise } from './exercise.model';\nimport { ExerciseDto, CreateExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\n\n@Controller('exercises')\n@ApiTags('exercises')\nexport class ExercisesController implements IExercisesController {\n  constructor(\n    @Inject(EXERCISES_SERVICE)\n    private readonly service: IExercisesService\n  ) {}\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Exercise] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Get('search')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async findByParams(@Query() params?: ParamsDto): Promise {\n    const exercise = await this.service.findByParams(params);\n    if (!exercise || exercise.length === 0) {\n      return;\n    }\n    return exercise;\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async getById(@Param('id') id: string): Promise {\n    const exercise = await this.service.getById(id);\n    if (!exercise) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return exercise;\n  }\n\n  @Post()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [ExerciseDto] })\n  @ApiBody({ type: CreateExerciseDto })\n  async create(@Body() exercise: CreateExerciseDto): Promise {\n    return await this.service.create(exercise);\n  }\n\n  @Patch(':id/update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() exercise: ExerciseDto\n  ): Promise {\n    return await this.service.update(id, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExercisesModule.html":{"url":"modules/ExercisesModule.html","title":"module - ExercisesModule","body":"\n                   \n\n\n\n\n    Modules\n    ExercisesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/exercises/exercises.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ExercisesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExercisesService } from './exercises.service';\nimport { ExercisesController } from './exercises.controller';\nimport { Exercise, ExerciseSchema } from './exercise.model';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { EXERCISES_SERVICE } from './interfaces/exercises.service.interface';\nimport { EXERCISES_REPOSITORY } from './interfaces/exercises.repository.interface';\nimport { ExercisesRepository } from './exercises.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Exercise.name,\n        schema: ExerciseSchema,\n      },\n    ]),\n  ],\n  controllers: [ExercisesController],\n  providers: [\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n    { useClass: ExercisesRepository, provide: EXERCISES_REPOSITORY },\n  ],\n  exports: [EXERCISES_SERVICE, EXERCISES_REPOSITORY],\n})\nexport class ExercisesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesRepository.html":{"url":"injectables/ExercisesRepository.html","title":"injectable - ExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IExercisesRepository } from './interfaces/exercises.repository.interface';\nimport { Exercise, ExerciseDocument } from './exercise.model';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\n\n@Injectable()\nexport class ExercisesRepository implements IExercisesRepository {\n  constructor(\n    @InjectModel(Exercise.name)\n    readonly model: Model\n  ) {}\n\n  async create(exercise: CreateExerciseDto): Promise {\n    return await this.model.create(exercise);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    await this.model.updateOne({ _id: id }, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesService.html":{"url":"injectables/ExercisesService.html","title":"injectable - ExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IExercisesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IExercisesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('exercises')\n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  EXERCISES_REPOSITORY,\n  IExercisesRepository,\n} from './interfaces/exercises.repository.interface';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { mapExercise } from './utils/exercise.mapper';\nimport { IExercisesService } from './interfaces/exercises.service.interface';\nimport { validate } from 'class-validator';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\n\n@Injectable()\nexport class ExercisesService implements IExercisesService {\n  private readonly logger = new Logger('exercises');\n\n  constructor(\n    @Inject(EXERCISES_REPOSITORY)\n    private readonly repository: IExercisesRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let exercises = await this.repository.findByParams(parameters);\n      if (exercises && exercises.length > 0) {\n        return exercises.map((exe) => mapExercise(exe));\n      } else {\n        return (exercises = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid exercise params`);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const exercise = await this.repository.getById(id);\n      if (exercise != null || exercise != undefined) {\n        return mapExercise(exercise);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async create(exercise: CreateExerciseDto): Promise {\n    try {\n      const errors = await validate(exercise);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(exercise);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, exercise);\n      } else {\n        throw new NotFoundException(`Exercise id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update exercise id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthController.html":{"url":"interfaces/IAuthController.html","title":"interface - IAuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        logout\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/interfaces/auth.controller.interface.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { AuthDto, LoginDto } from '../dtos/dtos';\n\nexport const AUTH_CONTROLLER = 'AUTH_CONTROLLER';\n\nexport interface IAuthController {\n  login: (doc: LoginDto) => Promise;\n  logout(request: Request): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthRepository.html":{"url":"interfaces/IAuthRepository.html","title":"interface - IAuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            getByAccessToken\n                                        \n                                \n                                \n                                        \n                                            getByRefreshToken\n                                        \n                                \n                                \n                                        \n                                            saveNewAccessToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByAccessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByAccessToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByRefreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByRefreshToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        saveNewAccessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        saveNewAccessToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Auth } from '../auth.model';\nimport { AuthDto } from '../dtos/auth.dto';\n\nexport const AUTH_REPOSITORY = 'AUTH_REPOSITORY';\n\nexport interface IAuthRepository {\n  create: (auth: Auth) => Promise;\n  getByAccessToken: (token: string) => Promise;\n  getByRefreshToken: (token: string) => Promise;\n  saveNewAccessToken: (refreshToken: string, auth: AuthDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthService.html":{"url":"interfaces/IAuthService.html","title":"interface - IAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            logout\n                                        \n                                \n                                \n                                        \n                                            refreshTokens\n                                        \n                                \n                                \n                                        \n                                            validateToken\n                                        \n                                \n                                \n                                        \n                                            validateUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logout:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokens:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validateToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validateToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validateUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validateUser:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDto } from 'src/modules/users/dtos/dtos';\nimport { AuthDto } from '../dtos/auth.dto';\nimport { JwtPayload } from './jwt-payload.interface';\n\nexport const AUTH_SERVICE = 'AUTH_SERVICE';\n\nexport interface IAuthService {\n  login: (email: string, password: string) => Promise;\n  logout: (userId: string) => void;\n  refreshTokens: (data: any) => Promise;\n  validateToken: (\n    accessToken: string,\n    refreshToken: string,\n    payload: JwtPayload\n  ) => void;\n  validateUser: (email: string, password: string) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDefaultController.html":{"url":"interfaces/IDefaultController.html","title":"interface - IDefaultController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDefaultController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/interfaces/default.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByField\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByField\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByField:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDefaultController {\n  create: (doc: T) => Promise;\n  getAll: () => Promise;\n  getByField: (field: any) => Promise;\n  update: (id: string, doc: T) => Promise;\n  delete: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesController.html":{"url":"interfaces/IExercisesController.html","title":"interface - IExercisesController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\nimport { Exercise } from '../exercise.model';\n\nexport const EXERCISES_CONTROLLER = 'EXERCISES_CONTROLLER';\n\nexport interface IExercisesController {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesRepository.html":{"url":"interfaces/IExercisesRepository.html","title":"interface - IExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_REPOSITORY = 'EXERCISES_REPOSITORY';\n\nexport interface IExercisesRepository {\n  create: (exercise: CreateExerciseDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesService.html":{"url":"interfaces/IExercisesService.html","title":"interface - IExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_SERVICE = 'EXERCISES_SERVICE';\n\nexport interface IExercisesService {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansController.html":{"url":"interfaces/IPlansController.html","title":"interface - IPlansController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\nimport { CreatePlanDto, PlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\nimport { ParamsDto } from 'src/modules/shared/dtos/params.dto';\n\nexport const PLANS_CONTROLLER = 'PLANS_CONTROLLER';\n\nexport interface IPlansController {\n  getAll: (request: Request) => Promise;\n  findByParams: (request: Request, params?: ParamsDto) => Promise;\n  getById: (id: string) => Promise;\n  create: (plan: CreatePlanDto, request: Request) => Promise;\n  update: (id: string, plan: PlanDto, request: Request) => Promise;\n  addOrUpdateTraining: (\n    id: string,\n    request: Request,\n    trainingData: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    id: string,\n    request: Request,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansRepository.html":{"url":"interfaces/IPlansRepository.html","title":"interface - IPlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            getPlanByExerciseId\n                                        \n                                \n                                \n                                        \n                                            savePlan\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getPlanByExerciseId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getPlanByExerciseId:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savePlan\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        savePlan:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\n\nexport const PLANS_REPOSITORY = 'PLANS_REPOSITORY';\n\nexport interface IPlansRepository {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto) => Promise;\n  getPlanByExerciseId: (filter: any) => Promise;\n  savePlan: (plan: Plan) => Promise;\n  updateExerciseDoneStatus: (filter: any) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansService.html":{"url":"interfaces/IPlansService.html","title":"interface - IPlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\n\nexport const PLANS_SERVICE = 'PLANS_SERVICE';\n\nexport interface IPlansService {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto, userId: string) => Promise;\n  addOrUpdateTraining: (\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersController.html":{"url":"interfaces/IUsersController.html","title":"interface - IUsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\nimport { User } from '../user.model';\n\nexport const USERS_CONTROLLER = 'USERS_CONTROLLER';\n\nexport interface IUsersController {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersRepository.html":{"url":"interfaces/IUsersRepository.html","title":"interface - IUsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_REPOSITORY = 'USERS_REPOSITORY';\n\nexport interface IUsersRepository {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\nexport interface IUsersService {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  getById: (id: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  email: string;\n  sub: string;\n  iat: number;\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/local.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { AUTH_SERVICE } from '../interfaces/auth.service.interface';\n\nexport const LOCAL_STRATEGY = 'LOCAL_STRATEGY';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(@Inject(AUTH_SERVICE) private authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(email: string, password: string) {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(`Invalid Email and/or Password`);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamsDto.html":{"url":"classes/ParamsDto.html","title":"class - ParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParamsDto {\n  name?: string;\n  focusMuscle?: string[];\n  userId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Plan.html":{"url":"classes/Plan.html","title":"class - Plan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plan.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Validity of plan'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Plan', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Existing Exercises in the Plan', type: undefined})@Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id who created the plan'})@Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type PlanDocument = Plan & Document;\n\n@Schema({ collection: 'plans', timestamps: true })\nexport class Plan {\n  @ApiProperty({ description: 'Plan Id}' })\n  id: string;\n\n  @ApiProperty({ description: 'Plan Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Plan', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'Validity of plan' })\n  @Prop({ type: Date, required: true })\n  expiresIn?: Date;\n\n  @ApiProperty({ description: 'User Id who created the plan' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @ApiProperty({\n    description: 'Existing Exercises in the Plan',\n    type: [Training],\n  })\n  @Prop({ type: [TrainingSchema], required: false })\n  training?: Training[];\n}\n\nexport const PlanSchema = SchemaFactory.createForClass(Plan);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDate,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class PlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: Training[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlansController.html":{"url":"controllers/PlansController.html","title":"controller - PlansController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plans\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(id: string, request: Request, trainingData: TrainingDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/updatetraining')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingData\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreatePlanDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(request: Request, params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(id: string, request: Request, exerciseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/doneexercise')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Query,\n  UseGuards,\n  Patch,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  IPlansService,\n  PLANS_SERVICE,\n} from './interfaces/plans.service.interface';\nimport { Plan } from './plan.model';\nimport { CreatePlanDto, PlanDto } from './dtos/dtos';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n  CREATED_201,\n} from '../shared/utils/http-response-status.utils';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { IPlansController } from './interfaces/plans.controller.interface';\n\n@Controller('plans')\n@ApiTags('plans')\nexport class PlansController implements IPlansController {\n  constructor(\n    @Inject(PLANS_SERVICE)\n    private readonly service: IPlansService\n  ) {}\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Plan] })\n  async getAll(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return await this.service.getAll(userId);\n  }\n\n  @Get('search')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async findByParams(\n    @Req() request: Request,\n    @Query() params?: ParamsDto\n  ): Promise {\n    const userId = request.user?.id;\n    params.userId = userId;\n    const plan = await this.service.findByParams(params);\n    if (!plan || plan.length === 0) {\n      return;\n    }\n    return plan;\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async getById(@Param('id') id: string): Promise {\n    const plan = await this.service.getById(id);\n    if (!plan) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return plan;\n  }\n\n  @Post()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [PlanDto] })\n  @ApiBody({ type: CreatePlanDto })\n  async create(\n    @Body() plan: CreatePlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    plan.userId = userId;\n    return await this.service.create(plan);\n  }\n\n  @Patch(':id/update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() plan: PlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.update(id, plan, userId);\n  }\n\n  @Patch(':id/updatetraining')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async addOrUpdateTraining(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body() trainingData: TrainingDto[]\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.addOrUpdateTraining(id, userId, trainingData);\n  }\n\n  @Patch(':id/doneexercise')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateExerciseDoneStatus(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body('exerciseId') exerciseId: string\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.updateExerciseDoneStatus(id, userId, exerciseId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlansModule.html":{"url":"modules/PlansModule.html","title":"module - PlansModule","body":"\n                   \n\n\n\n\n    Modules\n    PlansModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlansModule\n\n\n\ncluster_PlansModule_imports\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/plans/plans.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            PlansController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExercisesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Plan, PlanSchema } from './plan.model';\nimport { PlansController } from './plans.controller';\nimport { PlansService } from './plans.service';\nimport { PlansRepository } from './plans.repository';\nimport { PLANS_SERVICE } from './interfaces/plans.service.interface';\nimport { PLANS_REPOSITORY } from './interfaces/plans.repository.interface';\nimport { ExercisesModule } from '../exercises/exercises.module';\nimport { ExercisesService } from '../exercises/exercises.service';\nimport { EXERCISES_SERVICE } from '../exercises/interfaces/exercises.service.interface';\nimport { SharedModule } from '../shared/shared.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Plan.name,\n        schema: PlanSchema,\n      },\n    ]),\n    ExercisesModule,\n    SharedModule,\n  ],\n  controllers: [PlansController],\n  providers: [\n    { useClass: PlansService, provide: PLANS_SERVICE },\n    { useClass: PlansRepository, provide: PLANS_REPOSITORY },\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n  ],\n})\nexport class PlansModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansRepository.html":{"url":"injectables/PlansRepository.html","title":"injectable - PlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addExercise\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPlanByExerciseId\n                            \n                            \n                                    Async\n                                savePlan\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    addExercise(planId: string, training: TrainingDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    training\n                                    \n                                                TrainingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlanByExerciseId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanByExerciseId(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        savePlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    savePlan(plan: Plan)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                Plan\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Plan, PlanDocument } from './plan.model';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { IPlansRepository } from './interfaces/plans.repository.interface';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { exerciseDataPipeline } from './pipelines/exercise-data.pipeline';\n\n@Injectable()\nexport class PlansRepository implements IPlansRepository {\n  constructor(\n    @InjectModel(Plan.name)\n    readonly model: Model\n  ) {}\n\n  async getAll(userId: string): Promise {\n    const pipeline = exerciseDataPipeline('userId', userId);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result;\n  }\n\n  async getById(id: string): Promise {\n    const pipeline = exerciseDataPipeline('_id', id);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result[0];\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    return await this.model.create(plan);\n  }\n\n  async update(id: string, plan: PlanDto): Promise {\n    await this.model.updateOne({ _id: id }, plan);\n  }\n\n  async savePlan(plan: Plan): Promise {\n    return this.model.findByIdAndUpdate(plan.id, plan, { new: true });\n  }\n\n  async getPlanByExerciseId(filter: any): Promise {\n    return await this.model.findOne(filter);\n  }\n\n  async addExercise(\n    planId: string,\n    training: TrainingDto,\n    userId: string\n  ): Promise {\n    await this.model.updateOne({\n      $and: [\n        {\n          _id: planId,\n          userId: userId,\n        },\n      ],\n      $push: {\n        training: training,\n      },\n    });\n  }\n\n  async updateExerciseDoneStatus(filter: any): Promise {\n    await this.model.updateOne(filter, {\n      $set: {\n        'training.$.done': true,\n      },\n    });\n  }\n\n  //removeExercise()\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansService.html":{"url":"injectables/PlansService.html","title":"injectable - PlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                            \n                                    Private\n                                updateTraining\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IPlansRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IPlansRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(planId: string, userId: string, trainingDto: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingDto\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(planId: string, userId: string, exerciseId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTraining(existingTraining: TrainingDto[], updateTraining: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    existingTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Training[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('PlansService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plans.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { IPlansService } from './interfaces/plans.service.interface';\nimport {\n  IPlansRepository,\n  PLANS_REPOSITORY,\n} from './interfaces/plans.repository.interface';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { mapPlan } from './utils/plan.mapper';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\nimport { Training } from '../shared/models/training.model';\nimport { TrainingDto } from '../shared/dtos/training.dto';\n\n@Injectable()\nexport class PlansService implements IPlansService {\n  private readonly logger = new Logger('PlansService');\n\n  constructor(\n    @Inject(PLANS_REPOSITORY)\n    private readonly repository: IPlansRepository\n  ) {}\n\n  async getAll(userId: string): Promise {\n    try {\n      return await this.repository.getAll(userId);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const plan = await this.repository.getById(id);\n      if (plan != null || plan !== undefined) {\n        return mapPlan(plan);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let plans = await this.repository.findByParams(parameters);\n      if (plans && plans.length > 0) {\n        return plans.map((item) => mapPlan(item));\n      } else {\n        return (plans = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid plan params`);\n    }\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    try {\n      const errors = await validate(plan);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(plan);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, plan: PlanDto, userId: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined && result.userId.toString() === userId) {\n        return await this.repository.update(id, plan);\n      } else {\n        throw new NotFoundException(\n          `Plan id ${id} not found or does not belongs to the user ${userId}`\n        );\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${id} failed`);\n    }\n  }\n\n  async addOrUpdateTraining(\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ): Promise {\n    try {\n      const plan = await this.repository.getById(planId);\n      if (!plan || plan.userId.toString() !== userId) {\n        throw new NotFoundException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const updatedTraining = this.updateTraining(plan.training, trainingDto);\n      plan.training = updatedTraining;\n\n      return this.repository.savePlan(plan);\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${planId} failed`);\n    }\n  }\n\n  private updateTraining(\n    existingTraining: TrainingDto[],\n    updateTraining: TrainingDto[]\n  ): Training[] {\n    const alteredTraining: TrainingDto[] = [];\n\n    for (const training of updateTraining) {\n      const existingTrainingIndex = existingTraining.findIndex(\n        (t) => t.exerciseId.toString() === training.exerciseId\n      );\n\n      if (existingTrainingIndex !== -1) {\n        existingTraining[existingTrainingIndex] = {\n          id: training.id,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        };\n      } else {\n        alteredTraining.push({\n          id: undefined,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        });\n      }\n    }\n\n    return [...existingTraining, ...alteredTraining];\n  }\n\n  async updateExerciseDoneStatus(\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ): Promise {\n    try {\n      const filter = {\n        _id: planId,\n        userId: userId,\n        training: {\n          $elemMatch: {\n            exerciseId: exerciseId,\n          },\n        },\n      };\n\n      const plan = await this.repository.getById(planId);\n\n      if (!plan) {\n        throw new BadRequestException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const exerciseExists = await this.repository.getPlanByExerciseId(filter);\n\n      if (!exerciseExists) {\n        throw new BadRequestException(\n          `Exercise id ${exerciseId} not found or plan does not belongs to the current user`\n        );\n      }\n\n      for (const training of plan.training) {\n        if (training.exerciseId.toString() === exerciseId) {\n          await this.repository.updateExerciseDoneStatus(filter);\n        }\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(\n        `Update status exercise in plan ${planId} failed`\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/refresh-token.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token expires in'})@Prop({type: Number, require: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/refresh-token.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token'})@Prop({type: String, require: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/refresh-token.model.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Schema({ _id: false })\nexport class RefreshToken {\n  @ApiProperty({ description: 'Refresh token' })\n  @Prop({ type: String, require: true })\n  refreshToken: string;\n\n  @ApiProperty({ description: 'Refresh token expires in' })\n  @Prop({ type: Number, require: true })\n  expiresIn: number;\n}\n\nexport type RefreshTokenDocument = RefreshToken & Document;\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresIn\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/refresh-token.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/refresh-token.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RefreshTokenDto {\n  refreshToken: string;\n  expiresIn: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/refresh-token.guard.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guard/refresh-token.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/refresh-token.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../auth.service';\nimport { AUTH_SERVICE } from '../interfaces/auth.service.interface';\n\nexport const REFRESH_TOKEN_STRATEGY = 'REFRESH_TOKEN_STRATEGY';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    private readonly configService: ConfigService\n  ) {\n    super({\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      passReqToCallback: true,\n    });\n  }\n  async validate(req: Request, payload: JwtPayload) {\n    const refreshToken = req.get('Authorization').replace('Bearer', '').trim();\n    return { ...payload, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Routine.html":{"url":"classes/Routine.html","title":"class - Routine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Routine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routine.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                frequency\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                training\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\n\nexport type RoutineDocument = Routine & Document;\n\n@Schema({ collection: 'routines', timestamps: true })\nexport class Routine {\n  id: string;\n\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @Prop({ type: String, required: true })\n  frequency: string;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @Prop({ type: [TrainingSchema], required: true })\n  training: Training[];\n}\n\nexport const RoutineSchema = SchemaFactory.createForClass(Routine);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoutinesController.html":{"url":"controllers/RoutinesController.html","title":"controller - RoutinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoutinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        /*\nhttps://docs.nestjs.com/controllers#controllers\n*/\n\nimport { Controller } from '@nestjs/common';\n\n@Controller()\nexport class RoutinesController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoutinesModule.html":{"url":"modules/RoutinesModule.html","title":"module - RoutinesModule","body":"\n                   \n\n\n\n\n    Modules\n    RoutinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nRoutinesService\n\nRoutinesService\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/routines/routines.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoutinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoutinesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoutinesService } from './routines.service';\nimport { RoutinesController } from './routines.controller';\n\n@Module({\n  imports: [],\n  controllers: [RoutinesController],\n  providers: [RoutinesService],\n})\nexport class RoutinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesRepository.html":{"url":"injectables/RoutinesRepository.html","title":"injectable - RoutinesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.repository.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesRepository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesService.html":{"url":"injectables/RoutinesService.html","title":"injectable - RoutinesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistory.html":{"url":"classes/ShapeHistory.html","title":"class - ShapeHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/shape-history.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User age'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'According to registered User data, BMI calculation'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User height'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User weight'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ShapeHistoryDocument = ShapeHistory & Document;\n\n@Schema({ _id: false, timestamps: true })\nexport class ShapeHistory {\n  @ApiProperty({ description: 'User age' })\n  @Prop({ type: Date, required: true })\n  age: Date;\n\n  @ApiProperty({ description: 'User height' })\n  @Prop({ type: Number, required: true })\n  height: number;\n\n  @ApiProperty({ description: 'User weight' })\n  @Prop({ type: Number, required: true })\n  weight: number;\n\n  @ApiProperty({\n    description: 'According to registered User data, BMI calculation',\n  })\n  @Prop({ type: Number, required: true })\n  bmi: number;\n}\n\nexport const ShapeHistorySchema = SchemaFactory.createForClass(ShapeHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistoryDto.html":{"url":"classes/ShapeHistoryDto.html","title":"class - ShapeHistoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/shape-history.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsDefined, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class ShapeHistoryDto {\n  @ApiProperty()\n  @IsDate()\n  @IsDefined()\n  @IsNotEmpty()\n  age: Date;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  height: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  weight: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  bmi: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Training, TrainingSchema } from './models/training.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Training.name,\n        schema: TrainingSchema,\n      },\n    ]),\n  ],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Training.html":{"url":"classes/Training.html","title":"class - Training","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Training\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/models/training.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Control Done'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})@Prop({type: undefined, required: true, ref: 'Exercises'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Training Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise load/weight'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Notes'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Repetitions'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Series'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport mongoose from 'mongoose';\n\nexport type TrainingDocument = Training & Document;\n\n@Schema({ timestamps: true })\nexport class Training {\n  @ApiProperty({ description: 'Training Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Id' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Exercises',\n  })\n  exerciseId: string;\n\n  @ApiProperty({ description: 'Exercise Series' })\n  @Prop({ type: String, required: true })\n  series: string;\n\n  @ApiProperty({ description: 'Exercise Repetitions' })\n  @Prop({ type: String, required: true })\n  repetitions: string;\n\n  @ApiProperty({ description: 'Exercise load/weight' })\n  @Prop({ type: String, required: true })\n  load: string;\n\n  @ApiProperty({ description: 'Exercise Notes' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n\n  @ApiProperty({ description: 'Exercise Control Done' })\n  @Prop({ type: Boolean, required: true })\n  done: boolean;\n}\n\nexport const TrainingSchema = SchemaFactory.createForClass(Training);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingDto.html":{"url":"classes/TrainingDto.html","title":"class - TrainingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                series\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nexport class TrainingDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  exerciseId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  series: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  repetitions: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  load: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsBoolean()\n  done: boolean;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingUpdateDto.html":{"url":"classes/TrainingUpdateDto.html","title":"class - TrainingUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/update-training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class TrainingUpdateDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  exerciseId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  series?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  repetitions?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  load?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  done?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlanDto.html":{"url":"classes/UpdatePlanDto.html","title":"class - UpdatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/update-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [TrainingUpdateDto]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsArray,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { TrainingUpdateDto } from 'src/modules/shared/dtos/update-training.dto';\n\nexport class UpdatePlanDto {\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  id?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  focusMuscle?: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  userId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  training?: [TrainingUpdateDto];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User activation status'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User avatar'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User birth date'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User sur name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password, it must be 5 characters or more'})@Prop({type: String, required: true, minlength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User shape history data', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { ShapeHistory, ShapeHistorySchema } from './shape-history';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({ collection: 'users', timestamps: true })\nexport class User {\n  @ApiProperty({ description: 'User Id' })\n  id: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({\n    description: 'User password, it must be 5 characters or more',\n  })\n  @Prop({ type: String, required: true, minlength: 6 })\n  password: string;\n\n  @ApiProperty({ description: 'User first name' })\n  @Prop({ type: String, required: true })\n  firstName: string;\n\n  @ApiProperty({ description: 'User sur name' })\n  @Prop({ type: String, required: true })\n  lastName: string;\n\n  @ApiProperty({ description: 'User birth date' })\n  @Prop({ type: Date, required: true })\n  birthDate: Date;\n\n  @ApiProperty({ description: 'User activation status' })\n  @Prop({ type: Boolean, required: true })\n  active: boolean;\n\n  @ApiProperty({ description: 'User shape history data', type: [ShapeHistory] })\n  @Prop({ type: [ShapeHistorySchema], required: true })\n  shape: ShapeHistory[];\n\n  @ApiProperty({ description: 'User avatar' })\n  @Prop({ type: String, required: false })\n  avatar?: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ShapeHistory } from '../shape-history';\n\nexport class UserDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsDate()\n  birthDate: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistory[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                disable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                enable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/disable')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/enable')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/shape-update')@UseGuards(undefined)@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from './interfaces/users.service.interface';\nimport { IUsersController } from './interfaces/users.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { User } from './user.model';\nimport { ShapeHistoryDto, UserDto, CreateUserDto } from './dtos/dtos';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController implements IUsersController {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly service: IUsersService\n  ) {}\n\n  @Get()\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [User] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Post()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [UserDto] })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise {\n    return await this.service.create(user);\n  }\n\n  @Get('email')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getByEmail(@Query('email') email: string): Promise {\n    const user = await this.service.getByEmail(email);\n    if (!user) {\n      throw new NotFoundException(`Email ${email} not found`);\n    }\n    return user;\n  }\n\n  @Get(':id')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getById(@Param('id') id: string): Promise {\n    const user = await this.service.getById(id);\n    if (!user) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return user;\n  }\n\n  @Patch(':id/update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(@Param('id') id: string, @Body() user: UserDto): Promise {\n    return await this.service.update(id, user);\n  }\n\n  @Patch(':id/shape-update')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateShape(\n    @Param('id') id: string,\n    @Body() shape: ShapeHistoryDto\n  ): Promise {\n    return await this.service.updateShape(id, shape);\n  }\n\n  @Patch(':id/enable')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async enable(@Param('id') id: string): Promise {\n    return await this.service.enable(id);\n  }\n\n  @Patch(':id/disable')\n  @UseGuards(AuthGuard('jwt'))\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async disable(@Param('id') id: string): Promise {\n    return await this.service.disable(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './user.model';\nimport { USERS_SERVICE } from './interfaces/users.service.interface';\nimport { USERS_REPOSITORY } from './interfaces/users.repository.interface';\nimport { UsersRepository } from './users.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: UsersRepository, provide: USERS_REPOSITORY },\n  ],\n  exports: [USERS_SERVICE, USERS_REPOSITORY],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './user.model';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { IUsersRepository } from './interfaces/users.repository.interface';\n\n@Injectable()\nexport class UsersRepository implements IUsersRepository {\n  constructor(\n    @InjectModel(User.name)\n    readonly model: Model\n  ) {}\n\n  async create(user: CreateUserDto): Promise {\n    return await this.model.create(user);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async getByEmail(email: string): Promise {\n    const result = await this.model.findOne({ email: email });\n    return result ? result : null;\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    await this.model.updateOne({ _id: id }, user);\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    await this.model.updateOne(\n      { _id: id },\n      {\n        $push: {\n          shape: {\n            age: shape.age,\n            height: shape.height,\n            weight: shape.weight,\n            bmi: shape.bmi,\n          },\n        },\n      }\n    );\n  }\n\n  async delete(id: string): Promise {\n    await this.model.deleteOne({ _id: id });\n  }\n\n  async enable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: true });\n  }\n\n  async disable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: false });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                hashedPassword\n                            \n                            \n                                transformString\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IUsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IUsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashedPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashedPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transformString\n                        \n                    \n                \n            \n            \n                \ntransformString(arr: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('UsersService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport {\n  IUsersRepository,\n  USERS_REPOSITORY,\n} from './interfaces/users.repository.interface';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { isEmail, validate } from 'class-validator';\nimport { IUsersService } from './interfaces/users.service.interface';\nimport { mapUser } from './utils/user.mapper';\n\n@Injectable()\nexport class UsersService implements IUsersService {\n  private readonly logger = new Logger('UsersService');\n\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly repository: IUsersRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const user = await this.repository.getById(id);\n      if (user != null || user != undefined) {\n        const userDto = mapUser(user);\n        return userDto;\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async getByEmail(email: string): Promise {\n    try {\n      const valid = isEmail(email);\n      if (valid) {\n        const user = await this.repository.getByEmail(email);\n        if (user != null || user != undefined) {\n          return mapUser(user);\n        }\n      } else {\n        throw new NotFoundException(`Email ${email} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid email ${email}`);\n    }\n  }\n\n  async hashedPassword(password: string): Promise {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async create(user: CreateUserDto): Promise {\n    try {\n      validate(user).then((errors) => {\n        if (errors.length > 0) {\n          throw new BadRequestException(errors);\n        }\n      });\n      const existis = await this.getByEmail(user.email);\n      if (!existis) {\n        user.password = await this.hashedPassword(user.password);\n        return await this.repository.create(user);\n      } else {\n        throw new BadRequestException(\n          `User with email ${user.email} already exists`\n        );\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, user);\n      } else {\n        throw new NotFoundException(`User id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update user id ${id} failed`);\n    }\n  }\n\n  transformString(arr: any): string {\n    const mergedProps: Record = {};\n\n    arr.forEach((obj) => {\n      for (const prop in obj) {\n        if (mergedProps[prop]) {\n          mergedProps[prop].push(obj[prop]);\n        } else {\n          mergedProps[prop] = [obj[prop]];\n        }\n      }\n    });\n\n    const result = Object.entries(mergedProps).map(\n      ([prop, messages]) => `${prop}: ${messages.join(', ')}`\n    );\n\n    return result.join('\\n');\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    const shapeHistoryDto = new ShapeHistoryDto();\n    shapeHistoryDto.age = new Date(shape.age);\n    shapeHistoryDto.height = shape.height;\n    shapeHistoryDto.weight = shape.weight;\n    shapeHistoryDto.bmi = shape.bmi;\n\n    const validObj = validate(shapeHistoryDto)\n      .then((errors) => {\n        if (errors.length > 0) {\n          const arr = errors.map((error) => error.constraints);\n          const str = this.transformString(arr);\n          this.logger.error(str);\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .catch((error) => {\n        this.logger.error(error);\n        throw new BadRequestException(error);\n      });\n\n    if ((await validObj) === true) {\n      const user = this.getById(id);\n      if (user !== undefined) {\n        await this.repository.updateShape(id, shape);\n      }\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async delete(id: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.delete(id);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Delete user id ${id} failed`);\n    }\n  }\n\n  async enable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.enable(id);\n        return `${id} enabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Enable user id ${id} failed`);\n    }\n  }\n\n  async disable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.disable(id);\n        return `${id} disabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Disable user id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            variable\n            AuthSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.repository.ts\n            \n            injectable\n            AuthRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/access-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/refresh-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            interface\n            IAuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            variable\n            AUTH_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            interface\n            IAuthRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            variable\n            AUTH_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            interface\n            IAuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            variable\n            AUTH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/refresh-token.model.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/refresh-token.model.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/access-token.strategy.ts\n            \n            variable\n            ACCESS_TOKEN_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            variable\n            LOCAL_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/refresh-token.strategy.ts\n            \n            variable\n            REFRESH_TOKEN_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/utils/credentials.utils.ts\n            \n            variable\n            comparePasswords\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/create-exercises.dto.ts\n            \n            class\n            CreateExerciseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/exercise.dto.ts\n            \n            class\n            ExerciseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            class\n            Exercise\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            variable\n            ExerciseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.controller.ts\n            \n            controller\n            ExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.repository.ts\n            \n            injectable\n            ExercisesRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.service.ts\n            \n            injectable\n            ExercisesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            interface\n            IExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            variable\n            EXERCISES_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            interface\n            IExercisesRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            variable\n            EXERCISES_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            interface\n            IExercisesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            variable\n            EXERCISES_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/utils/exercise.mapper.ts\n            \n            variable\n            mapExercise\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/create-plan.dto.ts\n            \n            class\n            CreatePlanDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/plan.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/update-plan.dto.ts\n            \n            class\n            UpdatePlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            interface\n            IPlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            variable\n            PLANS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            interface\n            IPlansRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            variable\n            PLANS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            interface\n            IPlansService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            variable\n            PLANS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/pipelines/exercise-data.pipeline.ts\n            \n            variable\n            exerciseDataPipeline\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            class\n            Plan\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            variable\n            PlanSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.controller.ts\n            \n            controller\n            PlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.repository.ts\n            \n            injectable\n            PlansRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.service.ts\n            \n            injectable\n            PlansService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/utils/plan.mapper.ts\n            \n            variable\n            mapPlan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            class\n            Routine\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            variable\n            RoutineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.controller.ts\n            \n            controller\n            RoutinesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.repository.ts\n            \n            injectable\n            RoutinesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.service.ts\n            \n            injectable\n            RoutinesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/params.dto.ts\n            \n            class\n            ParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/training.dto.ts\n            \n            class\n            TrainingDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/update-training.dto.ts\n            \n            class\n            TrainingUpdateDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/interfaces/default.controller.interface.ts\n            \n            interface\n            IDefaultController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            class\n            Training\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            variable\n            TrainingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/build-params.utils.ts\n            \n            variable\n            buildParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            BAD_REQUEST_400\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            CREATED_201\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NO_CONTENT_204\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NOT_FOUND_404\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            OK_200\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            SERVER_ERROR_500\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            UNAUTHORIZED_401\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/training.mapper.ts\n            \n            variable\n            mapTrainings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/shape-history.dto.ts\n            \n            class\n            ShapeHistoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            interface\n            IUsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            variable\n            USERS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            interface\n            IUsersRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            variable\n            USERS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            interface\n            IUsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            class\n            ShapeHistory\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            variable\n            ShapeHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/utils/user.mapper.ts\n            \n            variable\n            mapUser\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.4.0\n        \n            @nestjs/config : ^2.3.2\n        \n            @nestjs/core : ^9.4.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.4.0\n        \n            @nestjs/serve-static : ^4.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.1.0\n        \n            jsonwebtoken : ^9.0.0\n        \n            mongoose : ^7.1.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescrição\nAPI/Back-end da aplicação To-do Gym.\nUma aplicação web para controle de treinos, rotinas, evolução física e musculação na academia, além de demonstração da execução de exercícios físicos.\nDesenvolvida com TypeScript em NodeJS com o framework Nest.\nModelagem de Banco de Dados\n\n  \n\n\nAcesse Draw IO\nFuncionalidades\n\n  \n\n\nAcesse Miro\nDocumentação Modular Estática\nDocumentação de estrutura da aplicação gerada com Compodoc\nDocumentação de Endpoints com Swagger\nhttps://todo-gym-api.onrender.com/swagger/\nTecnologias Utilizadas\nLinguagem: TypeScript\nBack-end: NodeJS\nFramework Node: NestJS\nBanco de Dados: MongoDB\nODM Mongoose\nDocumentação API Rest: Swagger\nDocumentação Modular Estática: Compodoc\nDiagramação Banco de Dados: Draw IO\nDesenho de Fluxos: Miro\nInstalação\nnpm installPara executar o projeto\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTestes\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSobre mim\n\nAuthor - Flávio Oliveira\nPortfólio - https://flaviosoliver-portfolio.vercel.app/\nLinkedIn - https://www.linkedin.com/in/flaviosoliver/\nEmail - flavsoliver@gmail.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExercisesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlansModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoutinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRoutinesService\n\nRoutinesService\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : API da aplicação To-do Gym, construída em NodeJS, utilizando o framework NestJS na linguagem TypeScript\n        \n            License : UNLICENSED\n        \n            Author : Flávio Oliveira - https://github.com/flaviosoliver\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthDocument   (src/.../auth.model.ts)\n                        \n                        \n                            ExerciseDocument   (src/.../exercise.model.ts)\n                        \n                        \n                            PlanDocument   (src/.../plan.model.ts)\n                        \n                        \n                            RefreshTokenDocument   (src/.../refresh-token.model.ts)\n                        \n                        \n                            RoutineDocument   (src/.../routine.model.ts)\n                        \n                        \n                            ShapeHistoryDocument   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingDocument   (src/.../training.model.ts)\n                        \n                        \n                            UserDocument   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/auth.model.ts\n    \n    \n        \n            \n                \n                    \n                    AuthDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/exercises/exercise.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExerciseDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/plans/plan.model.ts\n    \n    \n        \n            \n                \n                    \n                    PlanDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/auth/refresh-token.model.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/routines/routine.model.ts\n    \n    \n        \n            \n                \n                    \n                    RoutineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/shape-history.ts\n    \n    \n        \n            \n                \n                    \n                    ShapeHistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/shared/models/training.model.ts\n    \n    \n        \n            \n                \n                    \n                    TrainingDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ACCESS_TOKEN_STRATEGY   (src/.../access-token.strategy.ts)\n                        \n                        \n                            AUTH_CONTROLLER   (src/.../auth.controller.interface.ts)\n                        \n                        \n                            AUTH_REPOSITORY   (src/.../auth.repository.interface.ts)\n                        \n                        \n                            AUTH_SERVICE   (src/.../auth.service.interface.ts)\n                        \n                        \n                            AuthSchema   (src/.../auth.model.ts)\n                        \n                        \n                            BAD_REQUEST_400   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            buildParams   (src/.../build-params.utils.ts)\n                        \n                        \n                            comparePasswords   (src/.../credentials.utils.ts)\n                        \n                        \n                            CREATED_201   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            exerciseDataPipeline   (src/.../exercise-data.pipeline.ts)\n                        \n                        \n                            EXERCISES_CONTROLLER   (src/.../exercises.controller.interface.ts)\n                        \n                        \n                            EXERCISES_REPOSITORY   (src/.../exercises.repository.interface.ts)\n                        \n                        \n                            EXERCISES_SERVICE   (src/.../exercises.service.interface.ts)\n                        \n                        \n                            ExerciseSchema   (src/.../exercise.model.ts)\n                        \n                        \n                            LOCAL_STRATEGY   (src/.../local.strategy.ts)\n                        \n                        \n                            mapExercise   (src/.../exercise.mapper.ts)\n                        \n                        \n                            mapPlan   (src/.../plan.mapper.ts)\n                        \n                        \n                            mapTrainings   (src/.../training.mapper.ts)\n                        \n                        \n                            mapUser   (src/.../user.mapper.ts)\n                        \n                        \n                            NO_CONTENT_204   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            NOT_FOUND_404   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            OK_200   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            PLANS_CONTROLLER   (src/.../plans.controller.interface.ts)\n                        \n                        \n                            PLANS_REPOSITORY   (src/.../plans.repository.interface.ts)\n                        \n                        \n                            PLANS_SERVICE   (src/.../plans.service.interface.ts)\n                        \n                        \n                            PlanSchema   (src/.../plan.model.ts)\n                        \n                        \n                            REFRESH_TOKEN_STRATEGY   (src/.../refresh-token.strategy.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refresh-token.model.ts)\n                        \n                        \n                            RoutineSchema   (src/.../routine.model.ts)\n                        \n                        \n                            SERVER_ERROR_500   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            ShapeHistorySchema   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingSchema   (src/.../training.model.ts)\n                        \n                        \n                            UNAUTHORIZED_401   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            USERS_CONTROLLER   (src/.../users.controller.interface.ts)\n                        \n                        \n                            USERS_REPOSITORY   (src/.../users.repository.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.service.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/strategy/access-token.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ACCESS_TOKEN_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ACCESS_TOKEN_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/auth.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Auth)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/http-response-status.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BAD_REQUEST_400\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BAD REQUEST'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CREATED_201\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CREATED'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NO_CONTENT_204\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NO CONTENT'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NOT_FOUND_404\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NOT FOUND'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OK_200\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'OK'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER_ERROR_500\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'INTERNAL SERVER ERROR'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UNAUTHORIZED_401\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UNAUTHORIZED'\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/build-params.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (params?: ParamsDto): any => {\n  const opt: any = { $or: [] };\n\n  if (params && params.userId) {\n    opt.$or.push({ userId: params.userId });\n  }\n\n  if (params && params.name) {\n    opt.$or.push({ name: { $regex: params.name, $options: 'i' } });\n  }\n\n  if (params && params.focusMuscle?.length > 0) {\n    opt.$or.push({ focusMuscle: { $in: params.focusMuscle } });\n  } else {\n    opt.$or.focusMuscle = [];\n  }\n\n  return opt;\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/utils/credentials.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  passwordLogin: string,\n  passwordUser: string\n): Promise => {\n  return await bcrypt.compare(passwordLogin, passwordUser);\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/pipelines/exercise-data.pipeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exerciseDataPipeline\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (field: string, value: string): any => [\n  {\n    $match: {\n      [field]: new mongoose.Types.ObjectId(value),\n    },\n  },\n  {\n    $unwind: '$training',\n  },\n  {\n    $lookup: {\n      from: 'exercises',\n      localField: 'training.exerciseId',\n      foreignField: '_id',\n      as: 'exerciseDetails',\n    },\n  },\n  {\n    $unwind: '$exerciseDetails',\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        exerciseId: '$exerciseDetails._id',\n        series: '$training.series',\n        repetitions: '$training.repetitions',\n        load: '$training.load',\n        done: '$training.done',\n        createdAt: '$training.createdAt',\n        updatedAt: '$training.updatedAt',\n        exerciseName: '$exerciseDetails.name',\n        exerciseFocusMuscle: '$exerciseDetails.focusMuscle',\n        exerciseImage: '$exerciseDetails.image',\n        exerciseVideo: '$exerciseDetails.video',\n        notes: {\n          $concat: ['$training.notes', '\\n', '$exerciseDetails.notes'],\n        },\n      },\n    },\n  },\n  {\n    $group: {\n      _id: '$_id',\n      name: {\n        $first: '$name',\n      },\n      focusMuscle: {\n        $first: '$focusMuscle',\n      },\n      userId: {\n        $first: '$userId',\n      },\n      training: {\n        $push: '$training',\n      },\n      exerciseDetails: {\n        $push: '$exerciseDetails',\n      },\n    },\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        $map: {\n          input: '$training',\n          as: 't',\n          in: {\n            $mergeObjects: [\n              '$$t',\n              {\n                $arrayElemAt: [\n                  {\n                    $filter: {\n                      input: '$exerciseDetails',\n                      as: 'e',\n                      cond: {\n                        $eq: ['$$e._id', '$$t.exerciseId'],\n                      },\n                    },\n                  },\n                  0,\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/exercise.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExerciseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Exercise)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/strategy/local.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOCAL_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOCAL_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/utils/exercise.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapExercise\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (exercise: Exercise): ExerciseDto => {\n  return {\n    id: exercise.id,\n    name: exercise.name,\n    focusMuscle: exercise.focusMuscle,\n    image: exercise.image,\n    video: exercise.video,\n    notes: exercise.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/utils/plan.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapPlan\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (plan: Plan): PlanDto => {\n  return {\n    id: plan.id,\n    name: plan.name,\n    focusMuscle: plan.focusMuscle,\n    expiresIn: plan.expiresIn,\n    userId: plan.userId,\n    training: plan.training,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/training.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapTrainings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (training: Training): TrainingDto => {\n  return {\n    id: training.id,\n    exerciseId: training.exerciseId,\n    series: training.series,\n    repetitions: training.repetitions,\n    load: training.load,\n    done: training.done,\n    notes: training.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/users/utils/user.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (user: User): UserDto => {\n  return {\n    id: user.id,\n    email: user.email,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    birthDate: user.birthDate,\n    active: user.active,\n    shape: user.shape,\n    avatar: user.avatar ? user.avatar : '',\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/plan.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PlanSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Plan)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/strategy/refresh-token.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REFRESH_TOKEN_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'REFRESH_TOKEN_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/refresh-token.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/modules/routines/routine.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoutineSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Routine)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/shape-history.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShapeHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShapeHistory)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/models/training.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TrainingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Training)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
