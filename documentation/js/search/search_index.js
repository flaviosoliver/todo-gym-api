var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.773,1,2.353]],["body/injectables/AccessTokenGuard.html",[0,1.1,1,3.347,2,1.521,3,0.25,4,0.144,5,0.128,6,5.957,7,3.313,8,0.282,9,2.042,10,5.674,11,5.674,12,1.521,13,4.225,14,7.356,15,0.987,16,4.225,17,2.397,18,0.014,19,1.289,20,0.429,21,1.437,22,5.674,23,6.848,24,4.225,25,4.225,26,2.042,27,5.674,28,2.476,29,4.225,30,6.406,31,0.341,32,4.086,33,0.948,34,3.675,35,2.492,36,2.032,37,3.313,38,3.675,39,0.144,40,0.007,41,2.646,42,3.675,43,3.675,44,2.826,45,0.76,46,4.935,47,4.225,48,4.225,49,4.225,50,2.138,51,1.783,52,4.225,53,5.674,54,2.826,55,5.674,56,3.082,57,2.704,58,4.225,59,4.225,60,4.225,61,4.225,62,2.492,63,0.01,64,0.01]],["title/injectables/AccessTokenStrategy.html",[0,0.773,65,2.872]],["body/injectables/AccessTokenStrategy.html",[0,1.132,2,1.586,3,0.15,4,0.15,5,0.133,8,0.294,9,2.101,12,2.101,15,0.9,17,2.183,18,0.014,19,1.174,20,0.441,21,1.309,26,1.586,28,2.268,31,0.371,32,4.203,33,0.989,36,2.12,39,0.199,40,0.007,41,2.761,44,2.948,45,1.178,50,1.471,54,3.904,56,2.12,57,1.86,63,0.01,64,0.01,65,4.203,66,5.131,67,3.174,68,2.268,69,3.656,70,4.407,71,4.109,72,4.407,73,3.443,74,5.836,75,4.363,76,4.407,77,4.576,78,1.511,79,3.456,80,1.94,81,3.834,82,3.456,83,3.174,84,3.834,85,3.456,86,2.46,87,4.407,88,1.94,89,4.407,90,4.203,91,3.834,92,3.456,93,2.12,94,1.785,95,3.834,96,4.407,97,3.834,98,3.834,99,3.834,100,2.12,101,1.471,102,1.785,103,3.834]],["title/controllers/AppController.html",[104,1.756,105,2.872]],["body/controllers/AppController.html",[3,0.169,4,0.169,5,0.15,8,0.331,9,2.271,15,0.972,17,1.859,18,0.014,19,1,20,0.375,21,1.115,26,2.271,31,0.363,33,1.115,39,0.169,40,0.008,43,4.322,50,2.106,63,0.011,64,0.011,68,2.402,94,2.013,104,2.777,105,4.542,106,2.097,107,4.322,108,6.342,109,6.308,110,1.755,111,4.969,112,0.722,113,4.969,114,4.301,115,6.308,116,4.969,117,6.931,118,3.578,119,2.931,120,4.342,121,4.322,122,6.308,123,4.969,124,4.969,125,4.969,126,4.969]],["title/modules/AppModule.html",[127,1.615,128,2.872]],["body/modules/AppModule.html",[3,0.133,4,0.133,5,0.118,18,0.014,31,0.388,33,0.877,39,0.133,40,0.006,45,1.108,50,1.305,63,0.009,64,0.009,68,1.355,80,1.721,100,1.881,105,4.432,106,2.271,120,4.502,121,3.401,127,2.493,128,5.827,129,1.971,130,2.306,131,2.615,132,2.615,133,2.306,134,3.435,135,2.182,136,3.401,137,3.401,138,3.401,139,4.808,140,4.502,141,4.808,142,4.808,143,4.502,144,4.502,145,3.601,146,2.615,147,2.615,148,3.909,149,3.631,150,2.449,151,1.355,152,4.682,153,4.775,154,2.615,155,3.909,156,3.909,157,3.401,158,3.401,159,3.909,160,3.401,161,3.909,162,3.909,163,3.909,164,3.401,165,3.909,166,3.909,167,3.909,168,3.909,169,5.382,170,3.909,171,3.909,172,3.909,173,3.909]],["title/injectables/AppService.html",[0,0.773,120,2.498]],["body/injectables/AppService.html",[0,1.343,2,2.082,3,0.197,4,0.197,5,0.175,8,0.386,9,2.494,15,0.891,18,0.014,26,2.082,31,0.288,33,1.298,39,0.197,40,0.01,50,1.931,63,0.012,64,0.012,108,6.687,112,0.793,120,4.34,174,5.031,175,5.784,176,5.784,177,5.784]],["title/classes/Auth.html",[40,0.007,178,2.353]],["body/classes/Auth.html",[3,0.14,4,0.14,5,0.124,8,0.275,15,1.045,18,0.014,20,0.574,28,2.632,31,0.338,39,0.215,40,0.007,45,0.741,51,3.151,62,3.732,63,0.009,64,0.009,101,2.263,110,1.886,112,0.891,151,1.428,178,3.999,179,1.232,180,2.967,181,0.826,182,4.555,183,3.358,184,2.366,185,3.999,186,3.584,187,4.308,188,4.12,189,3.584,190,4.12,191,4.231,192,4.12,193,4.555,194,4.12,195,1.164,196,4.12,197,3.591,198,2.456,199,2.299,200,2.455,201,1.188,202,3.113,203,1.895,204,4.12,205,2.967,206,2.756,207,2.431,208,3.117,209,4.12,210,2.967,211,3.584]],["title/controllers/AuthController.html",[104,1.756,212,2.872]],["body/controllers/AuthController.html",[1,1.868,3,0.108,4,0.108,5,0.096,8,0.211,9,1.668,12,1.14,15,0.845,17,2.05,18,0.014,19,1.103,20,0.485,21,1.23,26,1.973,31,0.38,33,0.711,35,1.868,36,1.523,38,2.755,39,0.108,40,0.005,45,0.834,50,1.829,63,0.008,64,0.008,68,2.511,78,1.737,80,1.394,88,2.413,93,1.523,94,1.283,101,1.057,102,1.877,104,1.394,106,1.336,110,1.525,114,1.868,119,1.868,178,1.868,183,2.131,184,1.185,201,0.913,208,3.505,212,3.337,213,2.755,214,2.28,215,3.337,216,3.337,217,3.167,218,4.035,219,3.167,220,3.947,221,3.947,222,2.28,223,2.28,224,4.339,225,3.167,226,3.947,227,3.167,228,4.201,229,3.167,230,3.337,231,3.167,232,3.167,233,3.195,234,3.167,235,3.167,236,2.903,237,2.28,238,2.28,239,2.483,240,2.28,241,4.343,242,3.337,243,4.343,244,4.343,245,2.28,246,4.343,247,3.947,248,1.868,249,3.1,250,2.118,251,3.337,252,3.167,253,3.778,254,3.778,255,3.778,256,2.903,257,2.28,258,2.28,259,3.167,260,1.019,261,3.634,262,3.167,263,3.337,264,2.28,265,3.167,266,2.28,267,3.167,268,3.167,269,3.167,270,3.167,271,1.456,272,2.755,273,2.28,274,3.167,275,3.167,276,3.167,277,2.337,278,3.167,279,2.28,280,3.167,281,3.167,282,2.755,283,3.167,284,3.167,285,3.167,286,3.167,287,3.167]],["title/classes/AuthDto.html",[40,0.007,233,2.113]],["body/classes/AuthDto.html",[3,0.162,4,0.162,5,0.144,8,0.318,15,1.107,18,0.014,20,0.543,31,0.339,39,0.162,40,0.01,63,0.01,64,0.01,101,2.271,110,1.998,112,0.871,179,1.428,181,0.911,182,4.898,183,3.128,184,2.545,191,3.194,200,2.576,201,1.377,233,3.258,288,4.153,289,4.775,290,4.775,291,3.744,292,4.775,293,4.898,294,4.775,295,4.775,296,2.817,297,4.775,298,3.456,299,4.114,300,6.149,301,3.432,302,3.456,303,6.149,304,3.456,305,1.858,306,4.775]],["title/modules/AuthModule.html",[127,1.615,139,2.668]],["body/modules/AuthModule.html",[3,0.127,4,0.127,5,0.113,12,1.341,18,0.014,19,0.75,31,0.399,33,0.836,39,0.127,40,0.006,63,0.009,64,0.009,65,3.749,68,1.291,73,3.072,80,1.641,86,2.906,90,3.749,106,2.197,127,2.431,129,1.879,130,2.199,131,2.493,132,2.493,133,2.199,134,2.906,135,2.906,139,4.737,144,4.436,145,3.483,146,2.493,147,2.493,149,3.54,150,2.334,151,1.291,152,5.22,153,4.678,154,2.493,158,3.242,164,3.242,178,2.199,198,1.641,210,3.749,212,4.321,248,3.54,250,2.493,307,3.727,308,3.727,309,3.727,310,4.529,311,3.727,312,2.922,313,3.727,314,3.261,315,2.922,316,3.749,317,3.727,318,4.014,319,2.922,320,2.922,321,3.242,322,3.727,323,3.727,324,5.206,325,3.749,326,3.749,327,3.727,328,3.749,329,3.749,330,3.727,331,2.493,332,3.727,333,3.727,334,3.242,335,3.727,336,3.727,337,1.974,338,3.727,339,5.099,340,5.099,341,3.727]],["title/injectables/AuthRepository.html",[0,0.773,316,2.872]],["body/injectables/AuthRepository.html",[0,1.03,2,1.381,3,0.13,4,0.13,5,0.116,8,0.256,9,1.912,12,1.912,15,1.065,17,2.584,18,0.014,19,1.39,20,0.522,21,1.55,26,2.368,31,0.356,33,0.861,39,0.13,40,0.006,45,0.69,50,2.034,62,3.881,63,0.009,64,0.009,68,2.71,78,1.934,94,1.554,102,2.664,112,0.868,151,1.329,178,4.473,182,2.762,183,2.443,203,1.764,205,2.762,233,3.485,271,1.764,316,3.825,319,3.008,320,3.008,342,3.337,343,1.709,344,4.621,345,4.621,346,4.621,347,2.762,348,5.145,349,3.836,350,5.312,351,3.836,352,5.312,353,3.836,354,5.312,355,3.836,356,5.312,357,3.836,358,2.762,359,3.554,360,3.008,361,3.836,362,3.836,363,4.621,364,2.762,365,5.312,366,3.328]],["title/injectables/AuthService.html",[0,0.773,314,2.498]],["body/injectables/AuthService.html",[0,0.61,2,0.693,3,0.065,4,0.065,5,0.058,8,0.128,9,1.133,12,1.133,15,1.031,17,2.25,18,0.014,19,1.21,20,0.454,21,1.349,26,2.165,28,2.272,31,0.31,32,2.266,33,0.432,39,0.065,40,0.003,45,1.302,50,2.137,56,2.893,57,2.873,62,1.857,63,0.005,64,0.005,68,2.507,71,2.721,73,2.356,77,1.509,78,1.557,80,0.847,86,1.074,92,1.509,93,3.51,94,2.656,101,2.367,102,2.71,103,2.737,112,0.891,118,2.266,153,4.15,154,1.287,181,0.466,182,3.322,183,2.862,184,2.328,195,0.402,205,2.875,215,2.266,216,2.266,226,3.932,233,3.053,236,1.205,249,2.105,250,1.287,260,0.619,271,0.885,277,2.906,312,1.509,314,1.971,318,1.287,319,1.509,321,1.674,334,1.674,337,2.444,359,3.086,367,1.674,368,3.322,369,3.993,370,3.993,371,3.147,372,3.147,373,3.993,374,2.737,375,4.613,376,2.737,377,1.385,378,5.763,379,3.147,380,2.266,381,3.147,382,1.924,383,3.147,384,1.924,385,1.924,386,1.924,387,3.147,388,1.924,389,3.147,390,1.924,391,3.147,392,1.924,393,1.924,394,3.147,395,1.924,396,2.671,397,2.671,398,3.147,399,3.147,400,1.924,401,3.147,402,1.924,403,3.663,404,1.857,405,1.509,406,1.924,407,1.924,408,1.924,409,3.663,410,3.147,411,4.613,412,3.147,413,2.468,414,1.924,415,3.617,416,1.924,417,1.924,418,1.674,419,1.924,420,1.924,421,3.663,422,3.403,423,3.663,424,1.924,425,1.074,426,1.924,427,3.993,428,1.074,429,3.147,430,1.924,431,3.993,432,3.993,433,3.147,434,1.924,435,1.924,436,1.924,437,1.924,438,1.924,439,1.924,440,1.924,441,1.924,442,1.924,443,1.924,444,2.105,445,2.737,446,1.924,447,1.924,448,1.924,449,1.924,450,1.924,451,1.667,452,1.924,453,1.924,454,1.924,455,1.924,456,3.147,457,3.147,458,3.147,459,1.924]],["title/classes/CreateExerciseDto.html",[40,0.007,460,2.113]],["body/classes/CreateExerciseDto.html",[3,0.154,4,0.154,5,0.137,8,0.303,15,1.127,18,0.014,19,1.336,20,0.553,21,1.684,31,0.296,39,0.154,40,0.01,63,0.01,64,0.01,110,2.035,112,0.906,179,1.357,181,0.881,200,2.601,201,1.309,298,3.193,302,2.862,304,3.519,305,1.766,460,3.152,461,6.529,462,3.948,463,3.347,464,4.441,465,3.705,466,4.441,467,2.843,468,4.538,469,4.665,470,4.538,471,3.268,472,4.538,473,3.948,474,4.538,475,4.538,476,3.727,477,3.51,478,3.732,479,5.205]],["title/classes/CreatePlanDto.html",[40,0.007,480,2.113]],["body/classes/CreatePlanDto.html",[3,0.153,4,0.153,5,0.136,8,0.3,15,1.124,18,0.014,19,1.329,20,0.551,21,1.575,31,0.329,39,0.153,40,0.01,63,0.01,64,0.01,110,2.029,112,0.857,179,1.344,181,0.875,184,2.471,200,2.594,201,1.296,296,2.651,298,3.376,301,3.299,302,3.178,304,3.178,305,1.749,337,3.5,451,3.132,463,3.331,467,2.815,476,3.703,477,3.897,478,3.5,480,3.132,481,6.512,482,3.524,483,3.442,484,3.524,485,4.494,486,4.494,487,3.006,488,4.494,489,3.909,490,3.909,491,3.909,492,3.703,493,3.909]],["title/classes/CreateUserDto.html",[40,0.007,494,2.113]],["body/classes/CreateUserDto.html",[3,0.131,4,0.131,5,0.116,8,0.257,15,1.152,18,0.014,20,0.565,21,1.195,31,0.304,39,0.131,40,0.009,63,0.009,64,0.009,101,2.039,110,2.08,112,0.895,179,1.152,181,0.789,200,2.63,201,1.111,277,3.488,298,3.596,299,3.564,302,3.528,304,3.442,305,1.499,467,2.413,471,3.836,476,3.337,477,3.143,478,2.822,492,3.337,494,2.822,495,6.601,496,3.351,497,4.086,498,4.398,499,4.398,500,4.398,501,4.398,502,3.323,503,3.337,504,3.351,505,3.852,506,2.577,507,3.852,508,3.852,509,3.852,510,3.852,511,3.852,512,3.852,513,3.852,514,3.852,515,5.327,516,5.327,517,4.634,518,4.634,519,4.634,520,3.852,521,3.08,522,3.852,523,3.836,524,3.351,525,3.852,526,3.852]],["title/classes/Exercise.html",[40,0.007,527,1.756]],["body/classes/Exercise.html",[3,0.201,4,0.123,5,0.109,8,0.241,15,1.081,18,0.014,19,1.29,20,0.593,21,1.574,31,0.254,39,0.201,40,0.006,45,0.651,51,2.853,63,0.009,64,0.009,100,3.374,110,1.951,112,0.93,151,1.253,179,1.081,181,0.755,185,4.138,187,4.474,195,1.411,197,3.715,198,2.244,199,2.018,200,2.498,201,1.043,202,2.018,206,2.419,207,2.134,208,3.225,463,2.977,464,4.289,465,3.772,466,4.289,527,3.459,528,2.604,529,4.434,530,4.434,531,2.836,532,1.74,533,3.616,534,3.616,535,6.411,536,6.411,537,3.616,538,3.616,539,2.836,540,3.616,541,3.616,542,3.616,543,3.616,544,3.616,545,2.836,546,2.265,547,2.604,548,3.146]],["title/classes/ExerciseDto.html",[40,0.007,549,2.011]],["body/classes/ExerciseDto.html",[3,0.15,4,0.15,5,0.133,8,0.294,15,1.148,18,0.014,19,1.317,20,0.562,21,1.671,31,0.291,39,0.15,40,0.01,63,0.01,64,0.01,110,2.071,112,0.915,179,1.318,181,0.864,195,1.366,200,2.632,201,1.271,296,2.6,298,3.351,301,3.257,302,3.148,304,3.582,305,1.715,463,3.299,464,4.377,465,3.652,466,4.377,467,2.761,469,4.576,471,3.174,473,3.834,476,3.656,477,3.443,478,3.69,479,5.131,549,2.943,550,3.834,551,4.407,552,4.407,553,4.407,554,4.407,555,4.407,556,4.407]],["title/controllers/ExercisesController.html",[104,1.756,557,2.872]],["body/controllers/ExercisesController.html",[1,1.511,3,0.087,4,0.087,5,0.077,8,0.171,9,1.422,12,0.922,15,0.903,17,2.028,18,0.014,19,1.091,20,0.552,21,1.216,26,2.108,31,0.348,33,0.575,35,1.511,36,1.232,39,0.087,40,0.004,45,0.711,50,2.066,56,1.232,57,1.081,63,0.007,64,0.007,68,2.584,78,1.808,80,1.127,93,1.232,94,1.037,102,2.372,104,1.127,106,1.081,110,1.629,112,0.708,114,1.511,195,1.222,201,0.739,208,3.614,214,1.844,220,4.218,221,4.218,222,3.904,223,3.904,224,4.281,230,1.844,237,2.845,238,2.845,240,1.844,241,4.457,242,4.218,243,4.457,244,4.457,245,1.844,246,4.457,247,4.457,253,3.877,254,3.877,255,3.877,256,3.669,257,1.844,258,1.844,260,0.824,263,1.844,271,1.178,273,1.844,279,1.844,343,1.271,404,1.511,425,1.429,428,1.429,460,3.279,527,3.251,532,2.32,546,1.604,549,3.252,557,2.845,558,2.228,559,1.816,560,1.879,561,1.478,562,1.671,563,2.008,564,2.228,565,3.226,566,2.008,567,2.561,568,1.713,569,2.109,570,2.228,571,2.561,572,1.739,573,1.844,574,2.228,575,2.561,576,1.357,577,2.228,578,2.561,579,1.357,580,2.228,581,2.561,582,2.008,583,2.008,584,2.008,585,3.097,586,1.604,587,2.643,588,2.008,589,2.845,590,2.561,591,1.844,592,1.604,593,2.008,594,2.561,595,2.561,596,2.561,597,2.228,598,2.228,599,2.561,600,2.228,601,2.561,602,2.008,603,2.008,604,2.008,605,1.604,606,2.228,607,2.561,608,2.008,609,2.008,610,2.008]],["title/modules/ExercisesModule.html",[127,1.615,140,2.498]],["body/modules/ExercisesModule.html",[3,0.169,4,0.169,5,0.151,18,0.014,19,1.002,31,0.394,33,1.118,39,0.169,40,0.008,63,0.011,64,0.011,106,2.667,127,2.559,129,2.512,134,2.781,135,2.781,140,3.958,149,2.939,150,3.121,151,1.727,198,2.193,331,3.333,339,4.55,340,4.55,527,2.193,547,4.55,557,4.997,586,4.347,588,3.907,591,3.588,611,4.982,612,4.227,613,4.982,614,4.982,615,4.642,616,3.907,617,4.55,618,4.982,619,4.334]],["title/injectables/ExercisesRepository.html",[0,0.773,617,2.872]],["body/injectables/ExercisesRepository.html",[0,1.013,2,1.347,3,0.127,4,0.127,5,0.113,8,0.249,9,1.879,12,1.879,15,1.093,17,2.561,18,0.014,19,1.377,20,0.517,21,1.536,26,2.464,31,0.363,33,0.84,39,0.127,40,0.006,50,2.172,63,0.009,64,0.009,68,2.753,78,1.978,94,1.516,102,2.773,112,0.811,151,1.297,195,1.255,203,1.721,260,1.204,271,1.721,343,1.68,347,2.695,348,5.106,358,2.695,364,2.695,460,3.448,527,3.121,545,2.934,549,3.282,559,2.401,560,2.255,561,1.953,562,1.809,563,4.094,568,3.493,569,2.532,572,1.647,576,2.766,579,2.766,591,2.695,592,2.344,616,2.934,617,3.76,620,3.255,621,3.742,622,3.742,623,3.742,624,3.742,625,3.742,626,3.742,627,3.493,628,3.742,629,3.742,630,3.255,631,3.255,632,3.255,633,2.208]],["title/injectables/ExercisesService.html",[0,0.773,612,2.668]],["body/injectables/ExercisesService.html",[0,0.815,2,1,3,0.095,4,0.095,5,0.084,8,0.185,9,1.513,12,1.513,15,1.023,17,2.391,18,0.014,19,1.222,20,0.459,21,1.363,26,2.186,31,0.341,33,0.623,39,0.095,40,0.007,45,1.018,50,2.133,56,3.193,57,2.953,63,0.007,64,0.007,68,2.624,69,1.74,78,1.847,80,1.223,93,2.72,94,2.29,102,2.688,112,0.731,181,0.622,195,1.46,260,0.894,271,1.277,305,1.081,343,1.352,366,2.633,368,4.072,377,2.001,380,3.027,396,1.858,397,1.858,403,2.001,404,1.639,409,4.374,421,4.374,422,4.44,423,4.374,425,2.346,428,2.346,444,1.858,460,2.996,527,3.14,532,2.022,546,3.177,549,2.851,559,1.933,560,1.96,561,1.573,562,1.457,563,3.296,568,2.812,569,2.2,572,1.851,573,2.001,576,2.227,579,2.227,587,2.812,588,2.178,592,1.74,605,1.74,612,2.812,615,1.858,616,2.178,627,3.783,634,2.416,635,4.204,636,2.778,637,2.778,638,2.778,639,2.778,640,2.778,641,4.204,642,2.178,643,2.778,644,2.001,645,2.416,646,2.416,647,2.778,648,2.416,649,2.416,650,2.416,651,2.778,652,2.778,653,2.778,654,3.296,655,3.296,656,2.778,657,2.416,658,2.778,659,2.178,660,2.178,661,2.778,662,2.178,663,2.178,664,2.178,665,2.778,666,2.178,667,2.178]],["title/interfaces/IAuthController.html",[251,2.872,668,0.961]],["body/interfaces/IAuthController.html",[3,0.179,4,0.179,5,0.159,8,0.351,18,0.014,20,0.538,31,0.326,39,0.223,45,0.948,63,0.011,64,0.011,78,1.844,119,3.108,181,0.969,183,3.424,215,5.362,216,5.362,218,4.378,226,3.794,228,4.46,233,3.467,236,3.3,251,4.713,260,1.695,668,1.27,669,2.134,670,4.131,671,3.294,672,5.132]],["title/interfaces/IAuthRepository.html",[359,2.668,668,0.961]],["body/interfaces/IAuthRepository.html",[3,0.173,4,0.173,5,0.153,8,0.339,18,0.014,20,0.555,31,0.319,39,0.218,45,0.914,62,3.773,63,0.011,64,0.011,78,1.903,112,0.801,178,4.336,181,0.947,183,2.335,233,3.388,318,4.279,320,3.982,343,2.364,344,6.393,345,6.393,346,6.393,359,4.279,360,3.982,668,1.224,669,2.057,671,3.351,673,3.982]],["title/interfaces/IAuthService.html",[249,2.668,668,0.961]],["body/interfaces/IAuthService.html",[3,0.169,4,0.169,5,0.151,8,0.332,18,0.014,20,0.551,31,0.346,39,0.215,45,0.897,54,3.333,63,0.011,64,0.011,75,3.121,78,1.636,85,3.907,88,2.193,101,2.109,112,0.862,181,0.936,184,1.864,215,5.255,216,5.255,233,2.639,236,3.121,248,3.728,249,4.227,277,3.186,360,3.907,374,6.348,376,6.348,668,1.201,669,2.018,671,3.338,674,3.907,675,4.982,676,6.319]],["title/interfaces/IDefaultController.html",[668,0.961,677,3.127]],["body/interfaces/IDefaultController.html",[3,0.175,4,0.175,5,0.156,8,0.343,18,0.014,20,0.575,39,0.175,63,0.011,64,0.011,78,1.97,112,0.738,181,0.955,195,1.347,226,4.646,343,2.376,560,2.56,562,2.56,668,1.242,669,2.086,671,3.413,677,5.059,678,4.48,679,4.941,680,7.386,681,5.059,682,4.48]],["title/interfaces/IExercisesController.html",[589,2.872,668,0.961]],["body/interfaces/IExercisesController.html",[3,0.165,4,0.165,5,0.147,8,0.323,18,0.014,20,0.564,31,0.341,39,0.211,45,0.873,63,0.01,64,0.01,78,1.934,112,0.711,181,0.92,195,1.296,260,1.56,343,2.324,460,3.291,527,3.017,549,3.132,559,3.323,560,2.504,561,2.703,562,2.504,569,2.417,572,2.135,589,4.473,591,3.493,668,1.169,669,1.965,671,3.381,683,3.803,684,3.038,685,4.871]],["title/interfaces/IExercisesRepository.html",[627,2.668,668,0.961]],["body/interfaces/IExercisesRepository.html",[3,0.167,4,0.167,5,0.149,8,0.328,18,0.014,20,0.567,31,0.312,39,0.213,45,0.885,63,0.011,64,0.011,78,1.942,112,0.717,181,0.928,195,1.307,260,1.581,343,2.336,460,3.319,527,2.758,549,3.159,559,3.339,560,2.517,561,2.717,562,2.517,569,2.438,572,2.164,615,4.191,627,4.191,668,1.185,669,1.991,671,3.388,684,3.079,686,3.854]],["title/interfaces/IExercisesService.html",[587,2.668,668,0.961]],["body/interfaces/IExercisesService.html",[3,0.167,4,0.167,5,0.149,8,0.328,18,0.014,20,0.567,31,0.312,39,0.213,45,0.885,63,0.011,64,0.011,78,1.942,112,0.717,181,0.928,195,1.307,260,1.581,343,2.336,460,3.319,527,2.758,549,3.159,559,3.339,560,2.517,561,2.717,562,2.517,569,2.438,572,2.164,586,3.925,587,4.191,668,1.185,669,1.991,671,3.388,684,3.079,687,3.854]],["title/interfaces/IPlansController.html",[668,0.961,688,2.872]],["body/interfaces/IPlansController.html",[3,0.145,4,0.145,5,0.129,8,0.284,18,0.014,20,0.569,31,0.357,39,0.194,45,0.766,63,0.01,64,0.01,78,1.95,112,0.819,119,2.51,181,0.844,195,1.433,228,5.013,260,1.368,343,2.209,480,3.02,559,3.158,560,2.38,561,2.569,562,2.38,569,2.218,572,1.873,668,1.026,669,1.723,671,3.395,684,2.665,688,4.105,689,3.336,690,4.945,691,4.302,692,3.02,693,3.7,694,2.874,695,3.093,696,2.846,697,4.47,698,3.7,699,2.374]],["title/interfaces/IPlansRepository.html",[668,0.961,700,2.668]],["body/interfaces/IPlansRepository.html",[3,0.151,4,0.151,5,0.134,8,0.296,18,0.014,20,0.583,31,0.327,39,0.199,45,0.799,63,0.01,64,0.01,78,2,112,0.751,181,0.868,184,1.661,195,1.224,260,1.428,343,2.247,480,3.107,559,3.212,560,2.421,561,2.613,562,2.421,569,2.282,572,1.954,668,1.07,669,1.798,671,3.441,684,2.781,691,4.376,694,2.957,695,3.494,696,2.97,700,3.923,701,3.481,702,6.076,703,6.076,704,3.923,705,4.223]],["title/interfaces/IPlansService.html",[668,0.961,706,2.668]],["body/interfaces/IPlansService.html",[3,0.15,4,0.15,5,0.133,8,0.293,18,0.014,20,0.573,31,0.326,39,0.198,45,0.791,63,0.01,64,0.01,78,1.966,112,0.893,181,0.863,184,2.603,195,1.216,260,1.414,343,2.238,480,3.087,559,3.2,560,2.411,561,2.603,562,2.411,569,2.267,572,1.936,668,1.06,669,1.781,671,3.41,684,2.754,690,5.011,691,4.359,692,3.462,693,3.825,694,2.938,695,2.803,699,2.454,706,3.898,707,3.448,708,3.898,709,4.569]],["title/interfaces/IUsersController.html",[668,0.961,710,2.872]],["body/interfaces/IUsersController.html",[3,0.156,4,0.156,5,0.138,8,0.306,18,0.014,20,0.579,28,2.312,31,0.298,39,0.204,45,0.825,63,0.01,64,0.01,78,1.986,88,2.636,101,1.53,112,0.84,181,0.887,195,1.476,260,1.474,343,2.275,494,3.173,502,2.311,521,3.02,560,2.451,562,2.451,668,1.105,669,1.857,671,3.428,710,4.313,711,3.594,712,4.43,713,4.43,714,4.43,715,4.43,716,3.301,717,4.696]],["title/interfaces/IUsersRepository.html",[668,0.961,718,2.668]],["body/interfaces/IUsersRepository.html",[3,0.149,4,0.149,5,0.132,8,0.292,18,0.014,20,0.589,28,2.013,31,0.218,39,0.198,45,0.787,63,0.01,64,0.01,78,2.018,88,2.557,101,1.461,112,0.868,181,0.86,195,1.551,260,1.408,343,2.234,494,3.077,502,2.207,521,2.929,560,2.407,561,2.598,562,2.407,668,1.055,669,1.772,671,3.457,679,4.646,712,4.351,713,4.351,714,4.351,715,4.351,718,3.886,719,3.431,720,3.886]],["title/interfaces/IUsersService.html",[71,2.353,668,0.961]],["body/interfaces/IUsersService.html",[3,0.149,4,0.149,5,0.132,8,0.292,18,0.014,20,0.589,28,2.013,31,0.218,39,0.198,45,0.787,63,0.01,64,0.01,71,3.427,78,2.018,86,3.242,88,2.557,101,1.461,112,0.868,181,0.86,195,1.551,260,1.408,343,2.234,494,3.077,502,2.207,521,2.929,560,2.407,561,2.598,562,2.407,668,1.055,669,1.772,671,3.457,679,4.646,712,4.351,713,4.351,714,4.351,715,4.351,721,3.431]],["title/interfaces/JwtPayload.html",[75,2.498,668,0.961]],["body/interfaces/JwtPayload.html",[3,0.187,4,0.187,5,0.166,8,0.367,18,0.014,20,0.571,39,0.187,63,0.011,64,0.011,75,4.212,101,2.524,112,0.903,181,0.996,445,6.577,668,1.327,669,2.23,722,4.789,723,4.789,724,7.561,725,7.561,726,5.277]],["title/injectables/LocalAuthGuard.html",[0,0.773,266,2.872]],["body/injectables/LocalAuthGuard.html",[0,1.372,2,2.157,3,0.204,4,0.204,5,0.181,18,0.014,31,0.352,33,1.344,35,3.535,36,2.882,39,0.204,40,0.01,41,3.753,63,0.012,64,0.012,266,5.095,727,5.212,728,5.212,729,5.992]],["title/injectables/LocalStrategy.html",[0,0.773,329,2.872]],["body/injectables/LocalStrategy.html",[0,1.158,2,1.642,3,0.155,4,0.155,5,0.138,8,0.304,9,2.149,12,1.642,15,0.92,17,2.233,18,0.014,19,1.201,20,0.451,21,1.339,26,1.642,28,2.306,31,0.365,32,3.284,33,1.023,36,2.194,39,0.203,40,0.008,41,2.857,44,3.051,45,1.074,50,1.522,56,2.194,57,1.925,63,0.01,64,0.01,68,2.306,69,3.739,79,3.576,80,2.008,82,3.576,83,3.284,91,3.967,93,2.194,101,2.221,102,1.847,112,0.86,118,3.284,248,2.691,250,3.051,277,3.79,314,4.709,315,3.576,328,4.298,329,4.298,730,3.576,731,3.967,732,4.561,733,5.969,734,4.561,735,3.967,736,4.561,737,4.561,738,4.561,739,4.561,740,4.561,741,4.561]],["title/classes/LoginDto.html",[40,0.007,218,2.668]],["body/classes/LoginDto.html",[3,0.182,4,0.182,5,0.162,8,0.356,15,1.018,18,0.014,20,0.499,31,0.329,39,0.182,40,0.011,63,0.011,64,0.011,101,2.392,110,1.837,112,0.856,179,1.598,181,0.978,200,2.483,201,1.542,218,4.418,277,3.613,291,4.191,298,3.447,299,4.418,302,3.447,304,3.447,305,2.08,487,3.576,742,4.65,743,5.345,744,5.345]],["title/classes/ParamsDto.html",[40,0.007,569,1.552]],["body/classes/ParamsDto.html",[3,0.19,4,0.19,5,0.168,8,0.372,15,1.125,18,0.013,19,1.468,20,0.551,21,1.775,39,0.19,40,0.009,63,0.011,64,0.011,112,0.905,179,1.666,181,1.003,184,2.731,463,3.68,569,2.636,745,4.848,746,5.573,747,5.573,748,5.573]],["title/classes/Plan.html",[40,0.007,695,1.919]],["body/classes/Plan.html",[3,0.12,4,0.12,5,0.107,8,0.236,15,1.073,18,0.014,19,1.278,20,0.598,21,1.425,28,1.74,31,0.316,39,0.199,40,0.006,45,0.637,51,3.142,63,0.008,64,0.008,100,2.416,110,1.938,112,0.882,151,1.227,179,1.058,181,0.743,184,2.183,185,4.109,187,4.454,195,1.495,197,3.689,198,2.21,199,1.975,200,2.482,201,1.021,202,1.975,203,2.309,206,2.368,207,2.088,208,3.203,337,3.091,451,3.364,463,2.942,483,3.294,529,4.368,530,4.368,531,3.937,532,2.807,539,2.775,546,3.145,695,3.74,749,2.549,750,5.021,751,5.021,752,3.54,753,3.54,754,3.54,755,3.54,756,5.021,757,3.54,758,4.368,759,3.937,760,3.616,761,3.54,762,3.145,763,2.775,764,2.775,765,2.775,766,2.775,767,2.549,768,3.079]],["title/classes/PlanDto.html",[40,0.007,694,2.011]],["body/classes/PlanDto.html",[3,0.149,4,0.149,5,0.132,8,0.292,15,1.145,18,0.014,19,1.312,20,0.561,21,1.558,31,0.325,39,0.149,40,0.01,63,0.01,64,0.01,110,2.067,112,0.881,179,1.308,181,0.86,184,2.439,195,1.361,200,2.627,201,1.262,296,3.427,298,3.477,301,3.639,302,3.341,304,3.341,305,1.703,337,3.454,451,3.077,463,3.288,467,2.741,476,3.639,477,3.847,478,3.454,483,3.417,484,3.431,487,2.927,489,3.806,492,3.639,493,3.806,694,2.929,769,3.806,770,4.376,771,4.376,772,4.376,773,4.376,774,4.376,775,4.376]],["title/controllers/PlansController.html",[104,1.756,776,2.872]],["body/controllers/PlansController.html",[1,1.157,3,0.067,4,0.067,5,0.059,8,0.131,9,1.151,12,0.706,15,0.896,17,2.174,18,0.014,19,1.169,20,0.538,21,1.304,26,2.092,31,0.335,33,0.44,35,1.157,36,0.943,39,0.067,40,0.003,45,1.09,50,2.022,56,0.943,57,0.828,63,0.005,64,0.005,68,2.575,78,1.799,80,0.863,93,0.943,94,0.794,102,2.353,104,0.863,106,0.828,110,1.617,112,0.805,114,1.157,119,1.157,184,2.467,195,1.308,201,0.566,208,3.589,214,1.412,220,4.184,221,4.184,222,3.36,223,3.36,224,4.287,228,4.93,230,2.913,237,3.36,238,2.302,239,4.321,240,1.412,241,4.363,242,3.7,243,4.363,244,4.363,245,1.412,246,4.363,247,4.363,253,3.795,254,3.795,255,3.795,256,3.219,257,1.412,258,1.412,260,0.631,263,1.412,271,0.902,273,1.412,279,1.412,282,4.793,343,1.301,404,1.157,425,1.094,428,1.094,480,2.919,532,1.946,559,1.86,560,1.108,561,1.196,562,1.402,564,1.706,565,2.706,566,1.538,569,1.815,570,1.706,572,1.781,573,1.412,574,1.706,576,1.039,577,1.706,579,1.039,580,1.706,582,1.538,583,1.538,584,2.506,585,2.506,592,1.228,593,1.538,598,1.706,600,1.706,602,1.538,603,1.538,604,1.538,605,1.228,608,1.538,609,3.172,610,1.538,688,2.302,690,2.913,691,2.534,692,2.472,694,2.93,695,3.342,696,1.312,698,4.058,699,2.604,706,2.138,708,1.312,765,1.538,776,2.302,777,1.706,778,1.961,779,1.961,780,1.961,781,1.538,782,1.961,783,1.961,784,1.961,785,1.961,786,1.961,787,1.961,788,1.961,789,1.961,790,1.961,791,1.961,792,1.538,793,1.538,794,1.961,795,1.961,796,1.961,797,1.961,798,1.961,799,1.961,800,1.706,801,1.961,802,1.706,803,1.961,804,1.961,805,1.961,806,1.961,807,1.961,808,1.961]],["title/modules/PlansModule.html",[127,1.615,141,2.668]],["body/modules/PlansModule.html",[3,0.147,4,0.147,5,0.131,18,0.014,19,0.872,31,0.397,33,0.973,39,0.147,40,0.007,63,0.01,64,0.01,106,2.436,127,2.628,129,2.186,130,2.557,131,2.9,132,2.9,133,2.557,134,3.221,135,2.419,140,4.642,141,5.14,143,4.642,145,3.861,146,2.9,147,2.9,149,3.405,150,2.715,151,1.502,157,3.77,160,3.77,198,1.908,331,2.9,339,4.673,340,4.673,586,3.616,612,3.861,695,2.085,696,2.9,704,3.861,708,3.861,767,4.156,776,4.673,792,3.399,809,4.334,810,4.334,811,4.334,812,4.334,813,4.156,814,4.334,815,4.156,816,4.334,817,3.399,818,4.334,819,4.334,820,3.77]],["title/injectables/PlansRepository.html",[0,0.773,815,2.872]],["body/injectables/PlansRepository.html",[0,0.804,2,0.982,3,0.093,4,0.093,5,0.082,8,0.182,9,1.493,12,1.493,15,1.094,17,2.656,18,0.014,19,1.428,20,0.536,21,1.593,26,2.506,31,0.347,33,0.612,39,0.093,40,0.005,45,1.008,50,2.118,51,1.75,57,1.151,63,0.007,64,0.007,68,2.771,78,1.996,94,1.105,102,2.753,112,0.864,151,0.946,184,2.468,195,1.169,203,1.255,260,0.878,271,1.255,343,1.334,347,1.965,348,4.57,358,1.965,364,2.986,366,3.142,480,2.968,483,2.771,559,1.907,560,1.437,561,1.551,562,1.437,568,2.774,569,2.18,572,1.201,576,2.197,579,2.197,592,1.709,632,2.373,633,2.446,691,2.598,692,2.968,694,2.825,695,3.471,696,1.825,700,2.774,702,3.607,703,3.607,705,2.986,709,3.933,764,2.139,781,3.252,793,2.139,815,2.986,817,2.139,821,2.373,822,5.016,823,2.728,824,2.728,825,2.728,826,2.728,827,2.728,828,3.607,829,2.728,830,2.728,831,4.147,832,2.728,833,4.147,834,2.728,835,2.728,836,4.147,837,2.728,838,2.139,839,2.728,840,2.728,841,2.728,842,4.147,843,2.728,844,4.147,845,4.147,846,4.147,847,2.728,848,2.728,849,2.728,850,2.728,851,2.728,852,2.139,853,2.728,854,2.728,855,2.728,856,2.728]],["title/injectables/PlansService.html",[0,0.773,813,2.872]],["body/injectables/PlansService.html",[0,0.587,2,0.66,3,0.062,4,0.062,5,0.055,8,0.122,9,1.089,12,1.089,15,0.971,17,2.357,18,0.014,19,1.23,20,0.462,21,1.372,26,2.124,28,1.553,31,0.314,33,0.411,39,0.062,40,0.005,45,1.209,50,1.969,56,3.173,57,2.881,63,0.005,64,0.005,68,2.543,69,1.149,78,1.768,80,0.807,93,2.715,94,1.815,102,2.616,112,0.869,181,0.448,184,2.652,195,1.445,260,0.59,271,0.843,305,0.713,343,0.973,366,1.895,368,3.226,377,1.32,380,2.178,396,1.227,397,1.227,403,3.226,404,2.278,409,4.065,421,4.065,422,4.091,423,4.065,425,1.688,428,2.767,444,1.227,465,1.688,480,2.373,483,2.454,527,1.332,532,1.857,559,1.391,560,1.048,561,1.132,562,1.338,568,2.024,569,1.743,572,1.332,573,1.32,576,1.602,579,1.602,592,1.149,605,1.149,633,1.082,644,1.32,645,1.595,646,1.595,649,1.595,650,1.595,654,2.372,655,2.372,657,1.595,659,1.438,660,1.438,662,1.438,663,1.438,664,1.438,666,2.372,667,3.028,681,1.438,690,2.78,691,2.419,692,3.668,694,2.259,695,3.504,699,3.413,700,2.997,704,1.227,705,1.32,706,2.024,709,4.795,763,1.438,765,3.028,781,2.372,792,1.438,793,1.438,813,2.178,817,1.438,828,2.631,857,1.595,858,5.644,859,3.025,860,1.834,861,1.834,862,1.834,863,1.834,864,1.834,865,1.834,866,1.834,867,1.834,868,1.834,869,1.834,870,1.834,871,3.861,872,3.025,873,1.438,874,1.834,875,1.834,876,1.834,877,1.834,878,1.834,879,1.834,880,1.834,881,1.834,882,1.834,883,1.834,884,4.48,885,3.025,886,1.834,887,3.025,888,1.834,889,2.631,890,1.834,891,3.025,892,3.025,893,1.834,894,1.834,895,3.359,896,1.595,897,1.834,898,1.595,899,2.024,900,2.631,901,2.024,902,2.631,903,2.024,904,2.631,905,2.631,906,2.024,907,2.631,908,1.834,909,1.834,910,3.025,911,1.834,912,1.834,913,1.834,914,1.834,915,1.595]],["title/classes/RefreshToken.html",[40,0.007,183,1.834]],["body/classes/RefreshToken.html",[3,0.162,4,0.162,5,0.144,8,0.317,15,0.945,18,0.014,20,0.561,31,0.305,39,0.231,40,0.008,45,0.855,51,3.026,62,4.003,63,0.01,64,0.01,100,2.285,110,1.705,112,0.82,151,1.646,179,1.42,181,0.908,183,3.495,185,3.616,186,4.132,191,4.796,193,3.42,197,3.595,198,2.698,199,2.651,200,2.351,201,1.37,202,2.651,208,2.818,337,3.595,633,2.802,726,4.796,916,4.886,917,3.42,918,6.129,919,4.75,920,7.169,921,4.75,922,4.75,923,4.132,924,4.132]],["title/classes/RefreshTokenDto.html",[40,0.007,293,2.872]],["body/classes/RefreshTokenDto.html",[3,0.197,4,0.197,5,0.175,8,0.386,15,1.068,18,0.013,20,0.523,39,0.197,40,0.01,63,0.012,64,0.012,112,0.793,179,1.729,181,1.026,183,3.41,293,4.989,337,3.929,726,4.635,925,6.451,926,5.031,927,5.784,928,5.784]],["title/injectables/RefreshTokenGuard.html",[0,0.773,264,2.872]],["body/injectables/RefreshTokenGuard.html",[0,1.343,2,2.082,3,0.197,4,0.197,5,0.175,7,4.535,12,2.67,15,0.891,18,0.014,31,0.345,33,1.298,35,3.412,36,2.782,39,0.197,40,0.01,41,3.623,42,5.031,44,3.869,63,0.012,64,0.012,191,3.869,264,4.989,929,6.026,930,5.784]],["title/injectables/RefreshTokenStrategy.html",[0,0.773,326,2.872]],["body/injectables/RefreshTokenStrategy.html",[0,1.087,2,1.493,3,0.141,4,0.141,5,0.125,8,0.277,9,2.017,12,2.017,15,0.864,17,2.097,18,0.014,19,1.128,20,0.423,21,1.257,26,1.493,31,0.379,33,0.931,36,1.996,39,0.191,40,0.007,41,2.599,44,2.775,45,1.009,50,1.385,51,1.751,54,3.749,56,1.996,57,1.751,62,2.447,63,0.009,64,0.009,67,2.987,68,2.2,69,3.511,75,4.258,77,5.33,79,4.395,80,1.826,81,3.608,82,4.395,83,2.987,84,3.608,85,3.253,93,2.696,94,1.68,95,3.608,97,3.608,98,3.608,99,3.608,100,1.996,118,2.987,119,2.447,153,5.386,154,2.775,183,2.919,191,2.775,228,4.258,239,4.395,248,2.447,250,2.775,272,3.608,314,4.583,315,3.253,325,4.036,326,4.036,731,3.608,931,4.977,932,4.148,933,5.604,934,4.148,935,4.148,936,4.148,937,4.148,938,4.148,939,4.148,940,4.148,941,4.148,942,4.148]],["title/classes/Routine.html",[40,0.007,943,3.127]],["body/classes/Routine.html",[3,0.139,4,0.139,5,0.124,8,0.273,15,1.123,18,0.014,19,1.268,20,0.597,31,0.314,39,0.214,40,0.007,45,0.736,51,3.31,63,0.009,64,0.009,110,1.966,112,0.92,151,1.418,179,1.224,181,0.822,184,2.358,187,4.586,195,1.315,197,3.861,198,2.445,199,2.284,202,2.284,203,2.554,206,2.738,207,2.415,463,3.178,483,3.351,532,3.032,759,4.355,760,3.999,762,3.479,763,3.209,766,3.209,943,4.943,944,2.947,945,6.303,946,7.067,947,4.093,948,4.093,949,4.093,950,4.093,951,4.093,952,4.093,953,3.56,954,4.093,955,3.209,956,3.56]],["title/controllers/RoutinesController.html",[104,1.756,957,2.872]],["body/controllers/RoutinesController.html",[3,0.207,4,0.207,5,0.184,18,0.014,31,0.303,33,1.367,39,0.207,40,0.01,63,0.012,64,0.012,104,3.145,106,2.571,957,5.144,958,5.298,959,6.091]],["title/modules/RoutinesModule.html",[127,1.615,142,2.668]],["body/modules/RoutinesModule.html",[3,0.183,4,0.183,5,0.163,18,0.014,31,0.358,33,1.21,39,0.183,40,0.009,63,0.011,64,0.011,106,2.802,127,2.914,129,2.719,130,3.181,131,3.608,132,3.608,133,3.181,134,4.015,135,3.009,142,5.251,145,4.442,146,3.608,147,3.608,149,3.181,957,5.18,960,4.691,961,4.691,962,5.251,963,5.392,964,5.392,965,5.392]],["title/injectables/RoutinesRepository.html",[0,0.773,966,3.127]],["body/injectables/RoutinesRepository.html",[0,1.393,2,2.215,3,0.209,4,0.209,5,0.186,18,0.013,31,0.307,33,1.38,39,0.209,40,0.01,63,0.012,64,0.012,966,5.634,967,5.352]],["title/injectables/RoutinesService.html",[0,0.773,962,2.668]],["body/injectables/RoutinesService.html",[0,1.393,2,2.215,3,0.209,4,0.209,5,0.186,18,0.013,31,0.307,33,1.38,39,0.209,40,0.01,63,0.012,64,0.012,962,4.807,968,5.352]],["title/classes/ShapeHistory.html",[40,0.007,969,2.668]],["body/classes/ShapeHistory.html",[3,0.137,4,0.137,5,0.121,8,0.268,15,1.034,18,0.014,20,0.579,28,2.617,31,0.311,39,0.212,40,0.007,45,0.724,51,3.232,63,0.009,64,0.009,100,1.934,110,1.867,151,1.393,179,1.202,181,0.812,185,3.959,187,4.456,197,3.721,198,2.415,199,2.244,200,2.434,201,1.16,202,3.062,203,1.849,207,2.372,208,3.086,236,3.437,451,3.555,633,2.372,726,5.273,969,4.179,970,5.058,971,2.895,972,5.262,973,5.507,974,5.262,975,5.262,976,4.021,977,4.021,978,5.487,979,5.487,980,4.021,981,4.021,982,4.021,983,4.021,984,4.021,985,4.021,986,3.498,987,4.021,988,2.895,989,3.498]],["title/classes/ShapeHistoryDto.html",[40,0.007,521,2.011]],["body/classes/ShapeHistoryDto.html",[3,0.165,4,0.165,5,0.146,8,0.323,15,1.113,18,0.014,20,0.545,31,0.309,39,0.165,40,0.01,63,0.01,64,0.01,110,2.008,179,1.447,181,0.918,200,2.587,201,1.395,298,3.591,302,3.591,305,1.882,451,3.285,492,3.885,521,3.127,726,5.109,972,5.367,973,5.367,974,5.367,975,5.367,990,6.492,991,4.208,992,4.838,993,4.838,994,6.844,995,4.838,996,4.838,997,4.838,998,7.219]],["title/modules/SharedModule.html",[127,1.615,143,2.498]],["body/modules/SharedModule.html",[3,0.191,4,0.191,5,0.169,18,0.014,19,1.128,31,0.365,33,1.258,39,0.191,40,0.009,63,0.011,64,0.011,106,2.366,127,2.754,129,2.827,134,3.129,135,3.129,143,4.259,149,3.308,150,3.512,151,1.943,198,2.468,331,3.751,483,2.578,762,4.259,999,5.607,1000,5.607,1001,5.607]],["title/classes/Training.html",[40,0.007,483,1.834]],["body/classes/Training.html",[3,0.119,4,0.119,5,0.106,8,0.234,15,1.102,18,0.014,20,0.591,21,1.12,31,0.289,39,0.198,40,0.006,45,0.632,51,3.218,63,0.008,64,0.008,100,2.402,110,1.988,112,0.921,151,1.217,179,1.05,181,0.739,185,4.216,187,4.543,195,1.45,197,3.786,198,2.198,199,1.96,200,2.531,201,1.013,202,1.96,203,2.296,207,2.072,208,3.286,465,3.532,483,3.074,503,3.964,527,3.39,532,1.69,546,3.128,699,3.243,759,3.916,762,2.2,766,2.754,899,4.233,901,4.233,903,3.887,906,4.233,1002,2.529,1003,4.994,1004,3.512,1005,3.512,1006,3.512,1007,3.512,1008,3.512,1009,3.512,1010,3.512,1011,3.512,1012,3.512,1013,3.512,1014,3.512,1015,3.512,1016,3.512,1017,3.055,1018,3.512,1019,3.055]],["title/classes/TrainingDto.html",[40,0.007,692,2.113]],["body/classes/TrainingDto.html",[3,0.133,4,0.133,5,0.118,8,0.261,15,1.188,18,0.014,19,1.238,20,0.556,21,1.683,31,0.268,39,0.133,40,0.009,63,0.009,64,0.009,110,2.143,112,0.898,179,1.169,181,0.797,195,1.285,200,2.696,201,1.127,296,3.175,298,3.543,301,3.435,302,3.609,304,3.706,305,1.521,464,4.118,465,3.435,466,4.118,469,4.22,471,2.815,478,3.513,479,4.826,487,4.118,503,3.372,506,2.615,523,3.876,692,2.851,699,3.435,899,4.118,901,4.118,903,4.118,906,4.118,1020,3.401,1021,3.909,1022,3.909,1023,3.909,1024,3.909,1025,3.909,1026,3.909,1027,3.909,1028,3.909,1029,3.909,1030,3.909,1031,3.909]],["title/classes/TrainingUpdateDto.html",[40,0.007,1032,2.872]],["body/classes/TrainingUpdateDto.html",[3,0.142,4,0.142,5,0.126,8,0.278,15,1.154,18,0.014,20,0.566,21,1.779,31,0.28,39,0.142,40,0.009,63,0.009,64,0.009,110,2.083,112,0.907,179,1.246,181,0.832,195,1.328,200,2.639,201,1.202,296,2.458,298,2.704,301,3.55,302,2.704,304,3.603,305,1.621,465,3.55,478,3.967,503,3.521,506,4.556,523,4.048,699,3.55,899,4.256,901,4.256,903,4.256,906,4.256,1032,4.048,1033,5.971,1034,3.625,1035,4.167,1036,4.167,1037,3.625,1038,4.167,1039,4.167,1040,4.167,1041,4.167,1042,4.167,1043,4.167]],["title/classes/UpdatePlanDto.html",[40,0.007,1044,3.127]],["body/classes/UpdatePlanDto.html",[3,0.146,4,0.146,5,0.129,8,0.286,15,1.138,18,0.014,19,1.298,20,0.558,21,1.786,31,0.321,39,0.146,40,0.01,63,0.01,64,0.01,110,2.055,112,0.877,179,1.281,181,0.848,184,2.413,195,1.346,200,2.613,201,1.235,301,3.6,304,3.313,305,1.667,337,3.418,451,3.034,463,3.253,477,3.806,478,3.995,482,3.359,483,2.966,484,3.359,490,3.726,491,3.726,492,3.587,506,2.866,1032,4.646,1033,3.359,1037,4.981,1044,4.491,1045,6.56,1046,4.284,1047,5.727,1048,4.284,1049,4.284,1050,4.284,1051,4.284]],["title/classes/User.html",[28,1.382,40,0.007]],["body/classes/User.html",[3,0.102,4,0.102,5,0.091,8,0.201,15,1.102,18,0.014,19,0.898,20,0.597,21,1.002,28,2.748,31,0.293,39,0.181,40,0.005,45,0.542,51,3.241,63,0.008,64,0.008,100,2.148,101,1.965,110,1.99,112,0.911,151,1.043,179,0.9,181,0.661,185,4.219,187,4.562,189,2.619,195,1.312,197,3.788,198,1.966,199,1.68,200,2.522,201,0.868,202,2.492,203,1.384,206,2.014,207,1.776,208,3.288,236,2.797,277,3.17,451,3.33,497,3.56,498,4.239,499,3.832,500,3.832,501,3.832,502,3.321,503,3.687,517,3.884,518,3.884,519,2.619,524,3.884,531,2.361,532,1.448,539,3.501,760,2.168,915,2.619,969,3.938,988,3.215,1052,2.168,1053,4.465,1054,3.011,1055,3.011,1056,3.011,1057,3.011,1058,4.465,1059,3.011,1060,3.011,1061,3.011,1062,3.884,1063,3.011,1064,3.011,1065,4.465,1066,3.011,1067,3.011,1068,3.884,1069,3.011,1070,4.629,1071,3.011,1072,2.361,1073,2.168,1074,2.619]],["title/classes/UserDto.html",[40,0.007,88,1.756]],["body/classes/UserDto.html",[3,0.133,4,0.133,5,0.118,8,0.261,15,1.173,18,0.014,20,0.575,21,1.208,31,0.307,39,0.133,40,0.009,63,0.009,64,0.009,88,2.369,101,2.055,110,2.118,112,0.898,179,1.169,181,0.797,195,1.285,200,2.67,201,1.127,277,3.104,291,3.065,296,2.306,298,3.662,299,3.601,301,3.004,302,3.609,304,3.543,305,1.521,451,2.851,467,2.449,476,3.372,477,3.175,478,2.851,487,4.118,492,3.372,497,4.118,498,4.432,499,4.432,500,4.432,501,4.432,502,3.344,503,3.372,504,3.401,506,2.615,523,3.876,969,4.118,1070,3.401,1075,3.401,1076,3.909,1077,3.909,1078,3.909,1079,3.909,1080,3.909,1081,3.909,1082,3.909,1083,3.909,1084,3.909,1085,3.909]],["title/controllers/UsersController.html",[104,1.756,1086,2.872]],["body/controllers/UsersController.html",[1,1.211,3,0.07,4,0.07,5,0.062,8,0.137,9,1.194,12,0.739,15,0.95,17,2.216,18,0.014,19,1.192,20,0.562,21,1.329,26,2.219,28,2.435,31,0.317,33,0.461,35,1.211,36,0.988,39,0.07,40,0.003,45,0.597,50,2.058,56,1.596,57,1.4,63,0.006,64,0.006,68,2.64,71,1.957,78,1.863,80,0.904,86,1.146,88,2.607,92,1.61,93,0.988,94,0.832,101,1.394,102,2.497,104,0.904,106,0.867,110,1.715,112,0.862,114,1.211,195,1.396,201,0.592,208,3.646,214,1.479,220,4.44,221,4.44,222,3.452,223,3.452,224,4.457,230,3.452,237,3.006,238,2.389,240,1.479,241,4.585,242,3.789,243,4.585,244,4.585,245,1.479,246,4.585,247,4.44,253,3.989,254,3.989,255,3.989,256,3.296,257,1.479,258,1.479,260,0.66,263,1.479,271,0.944,273,1.479,279,4.265,343,1.067,404,1.211,428,1.852,494,2.982,502,2.417,521,2.417,532,2.008,560,1.661,561,1.241,562,1.447,565,2.793,566,1.61,576,1.088,579,1.088,582,1.61,583,1.61,584,1.61,585,2.601,593,1.61,597,1.786,602,1.61,603,1.61,604,1.61,605,1.286,606,1.786,608,1.61,609,1.61,610,1.61,710,2.389,712,2.078,713,2.078,714,2.078,715,2.615,716,1.479,760,1.479,1086,2.389,1087,1.786,1088,1.61,1089,2.053,1090,2.053,1091,1.61,1092,2.053,1093,2.053,1094,1.61,1095,2.053,1096,2.053,1097,2.053,1098,2.053,1099,1.61,1100,2.053,1101,2.053,1102,2.053,1103,2.053,1104,2.053,1105,2.053,1106,1.61,1107,2.053,1108,2.053,1109,2.053,1110,1.61,1111,2.053,1112,2.053,1113,2.053,1114,2.053,1115,2.053,1116,2.053,1117,2.053,1118,1.786,1119,2.053,1120,2.053,1121,2.053,1122,2.053,1123,2.053,1124,2.053,1125,2.053,1126,2.053,1127,2.053]],["title/modules/UsersModule.html",[127,1.615,144,2.498]],["body/modules/UsersModule.html",[3,0.169,4,0.169,5,0.151,18,0.014,19,1.002,28,1.727,31,0.394,33,1.118,39,0.169,40,0.008,63,0.011,64,0.011,73,3.728,86,3.873,106,2.667,127,2.559,129,2.512,134,2.781,135,2.781,144,3.958,149,2.939,150,3.121,151,1.727,198,2.193,331,3.333,339,4.55,340,4.55,716,3.588,720,4.642,1073,4.55,1086,4.997,1110,3.907,1128,4.982,1129,4.982,1130,4.982,1131,3.907,1132,4.55,1133,4.982,1134,4.982]],["title/injectables/UsersRepository.html",[0,0.773,1132,2.872]],["body/injectables/UsersRepository.html",[0,0.829,2,1.023,3,0.097,4,0.097,5,0.086,8,0.19,9,1.54,12,1.54,15,1.106,17,2.634,18,0.014,19,1.417,20,0.532,21,1.58,26,2.535,28,2.234,31,0.321,33,0.638,39,0.097,40,0.005,45,0.512,50,1.91,51,1.2,63,0.007,64,0.007,68,2.783,78,2.009,88,2.519,94,1.151,100,1.368,101,1.717,102,2.852,112,0.901,151,0.985,195,1.521,203,1.307,260,0.914,271,1.307,343,1.376,347,2.047,348,4.642,358,2.047,363,2.473,364,4.12,366,3.221,444,1.902,494,3.031,497,2.861,502,2.885,521,2.885,560,1.983,561,1.6,562,1.482,576,2.266,579,2.266,630,2.473,631,2.473,633,3.62,679,2.861,712,2.679,713,2.679,714,2.679,715,2.679,716,2.047,718,2.861,852,2.229,972,2.229,973,2.229,974,2.229,975,2.229,1072,2.229,1088,3.354,1091,3.354,1094,3.354,1099,3.354,1106,3.354,1131,2.229,1132,3.08,1135,2.473,1136,2.843,1137,2.843,1138,3.721,1139,2.843,1140,2.843,1141,2.843,1142,2.843,1143,2.843,1144,2.843,1145,2.843,1146,2.843,1147,2.843,1148,2.843,1149,2.843,1150,2.473,1151,2.473,1152,2.473,1153,2.843]],["title/injectables/UsersService.html",[0,0.773,73,2.353]],["body/injectables/UsersService.html",[0,0.57,2,0.637,3,0.06,4,0.06,5,0.053,8,0.118,9,1.057,12,1.057,15,1.025,17,2.388,18,0.014,19,1.284,20,0.482,21,1.432,26,2.298,28,2.544,31,0.277,33,0.397,39,0.06,40,0.005,45,1.265,50,2.178,51,1.24,56,3.253,57,2.998,63,0.005,64,0.005,68,2.65,69,1.109,71,1.733,73,1.733,78,1.873,80,0.779,88,2.309,93,2.109,94,1.776,100,0.851,101,1.623,102,2.848,112,0.86,181,0.435,195,1.521,197,1.995,260,0.569,271,0.814,277,0.892,299,1.184,305,0.689,343,0.945,366,3.046,368,3.157,377,1.274,380,2.115,396,1.184,397,1.184,403,2.712,404,1.044,409,4.188,413,1.388,415,1.388,421,4.188,422,4.162,423,4.346,425,1.639,428,2.102,444,1.965,494,2.322,502,2.211,521,2.645,532,2.673,560,1.519,561,1.099,562,1.018,576,1.556,579,1.556,605,1.109,648,1.539,654,2.303,655,2.953,659,2.303,660,1.388,662,1.388,663,1.388,664,1.388,666,1.388,667,3.438,679,1.965,712,1.84,713,1.84,714,1.84,715,1.84,718,2.933,720,1.184,1088,2.303,1091,2.303,1094,2.303,1099,2.303,1106,2.303,1110,1.388,1118,1.539,1131,1.388,1138,2.555,1150,1.539,1151,1.539,1152,1.539,1154,1.539,1155,2.938,1156,2.938,1157,2.938,1158,1.77,1159,1.77,1160,1.77,1161,1.77,1162,1.77,1163,1.77,1164,1.77,1165,2.938,1166,1.77,1167,2.938,1168,1.77,1169,2.938,1170,1.77,1171,1.77,1172,2.938,1173,1.77,1174,1.539,1175,1.388,1176,1.77,1177,1.77,1178,2.938,1179,2.938,1180,1.77,1181,1.77,1182,1.77,1183,1.77,1184,1.77,1185,2.938,1186,1.77,1187,1.77,1188,1.77,1189,1.77,1190,1.77,1191,1.77,1192,1.77,1193,1.77,1194,1.77,1195,1.77,1196,2.938,1197,1.77,1198,1.77,1199,1.77,1200,1.77,1201,1.77,1202,1.77,1203,1.77,1204,1.77,1205,1.77,1206,1.77,1207,1.77,1208,2.938,1209,1.77,1210,1.77,1211,1.77,1212,1.77,1213,1.77,1214,1.77,1215,1.77,1216,1.77,1217,1.77,1218,3.766,1219,1.77,1220,1.77,1221,1.77,1222,1.77,1223,1.77,1224,1.77,1225,1.77,1226,1.77,1227,1.77]],["title/coverage.html",[1228,4.278]],["body/coverage.html",[0,1.4,1,1.176,5,0.06,6,1.734,7,2.539,18,0.014,20,0.151,28,0.691,37,1.563,40,0.012,57,0.841,63,0.005,64,0.005,65,1.435,66,2.539,67,3.392,71,1.176,73,1.176,75,1.248,86,1.112,88,0.877,90,1.435,104,2.444,105,1.435,107,1.734,114,3.451,120,1.248,133,1.176,174,1.734,178,1.176,180,2.332,183,0.916,193,1.435,210,1.435,212,1.435,213,1.734,218,1.333,224,1.248,233,1.056,248,1.176,249,1.333,251,1.435,253,1.248,254,1.248,255,1.248,256,1.248,261,1.563,264,1.435,266,1.435,288,1.734,293,1.435,314,1.248,316,1.435,318,1.333,325,1.435,326,1.435,328,1.435,329,1.435,342,1.734,359,1.333,367,1.734,405,1.563,425,4.662,460,1.056,461,1.734,462,1.734,480,1.056,481,1.734,482,2.539,483,0.916,494,1.056,495,1.734,496,1.734,521,1.005,527,0.877,528,2.332,547,1.435,549,1.005,550,1.734,557,1.435,558,1.734,565,1.333,569,0.775,586,1.248,587,1.333,589,1.435,612,1.333,615,1.333,617,1.435,620,1.734,627,1.333,634,1.734,642,1.563,644,1.435,668,1.682,670,2.539,671,0.841,672,1.563,673,2.539,674,2.539,677,1.563,678,1.734,683,2.539,685,1.563,686,2.539,687,2.539,688,1.435,689,2.539,692,1.056,694,1.005,695,0.959,697,1.563,700,1.333,701,2.539,704,1.333,706,1.333,707,2.539,708,1.333,710,1.435,711,2.539,717,1.563,718,1.333,719,2.539,720,1.333,721,2.539,722,1.734,723,1.734,727,1.734,728,1.734,730,2.539,742,1.734,745,1.734,749,2.332,762,1.248,767,1.435,769,1.734,776,1.435,777,1.734,813,1.435,815,1.435,821,1.734,838,1.563,857,1.734,873,1.563,916,2.332,917,2.332,925,1.734,926,1.734,929,1.734,931,2.539,943,1.563,944,2.332,955,1.563,957,1.435,958,1.734,962,1.333,966,1.563,967,1.734,968,1.734,969,1.333,970,2.332,971,2.332,988,1.435,990,1.734,991,1.734,1002,2.332,1020,1.734,1032,1.435,1033,1.563,1034,1.734,1044,1.563,1045,1.734,1052,2.332,1073,1.435,1075,1.734,1086,1.435,1087,1.734,1132,1.435,1135,1.734,1154,1.734,1175,1.563,1228,1.563,1229,1.993,1230,1.993,1231,1.993,1232,5.85,1233,3.239,1234,1.734,1235,8.027,1236,4.71,1237,5.85,1238,7.956,1239,6.096,1240,1.993,1241,2.817,1242,1.734,1243,5.85,1244,5.85,1245,1.734,1246,4.091,1247,1.734,1248,1.734,1249,4.71,1250,1.734,1251,1.734,1252,1.734,1253,5.089,1254,5.089,1255,1.734,1256,1.734,1257,1.734,1258,4.71,1259,1.993,1260,1.734,1261,1.993,1262,1.993]],["title/dependencies.html",[130,2.832,1263,2.891]],["body/dependencies.html",[18,0.014,33,1.179,34,4.57,36,2.527,40,0.009,54,3.514,63,0.011,64,0.011,83,5.12,119,3.099,130,3.099,151,1.821,154,3.514,201,1.515,203,2.416,305,2.044,310,4.57,312,4.119,735,4.57,1174,4.57,1264,7.11,1265,5.253,1266,5.253,1267,5.253,1268,5.253,1269,5.253,1270,5.253,1271,5.253,1272,5.253,1273,5.253,1274,5.253,1275,5.253,1276,5.253,1277,5.253,1278,5.253,1279,5.253,1280,5.253,1281,5.253,1282,5.253,1283,5.253,1284,5.253,1285,5.253,1286,5.253,1287,5.253,1288,5.253,1289,5.253]],["title/miscellaneous/functions.html",[1290,2.082,1291,4.175]],["body/miscellaneous/functions.html",[8,0.422,18,0.012,63,0.012,64,0.012,133,4.541,1234,5.499,1290,3.96,1291,5.499,1292,6.322]],["title/index.html",[8,0.222,1293,3.324,1294,3.324]],["body/index.html",[18,0.013,63,0.009,64,0.009,101,1.388,203,1.912,1228,3.26,1295,4.158,1296,4.158,1297,5.613,1298,5.527,1299,5.527,1300,4.882,1301,4.158,1302,4.158,1303,4.158,1304,4.158,1305,7.796,1306,4.158,1307,4.158,1308,4.158,1309,4.158,1310,3.616,1311,4.158,1312,3.616,1313,4.158,1314,4.158,1315,4.158,1316,4.158,1317,4.158,1318,4.158,1319,4.158,1320,6.804,1321,4.882,1322,3.616,1323,4.882,1324,4.882,1325,4.882,1326,4.158,1327,4.158,1328,6.354,1329,6.354,1330,5.613,1331,5.613,1332,5.613,1333,4.158,1334,5.613,1335,7.105,1336,5.613,1337,5.613,1338,4.158,1339,4.158,1340,5.613,1341,4.158,1342,5.613,1343,4.158,1344,4.158,1345,4.158,1346,4.158,1347,3.616,1348,4.158,1349,4.158,1350,3.616,1351,4.158,1352,4.158,1353,3.616,1354,4.158,1355,4.158,1356,4.158,1357,4.158,1358,4.158,1359,7.484,1360,4.158,1361,4.158,1362,4.158,1363,4.158,1364,7.321,1365,4.158,1366,4.158,1367,5.613,1368,4.158,1369,4.158,1370,4.158,1371,4.158,1372,5.613,1373,5.613,1374,4.158,1375,4.158,1376,4.158,1377,4.158,1378,3.616,1379,3.616,1380,3.616,1381,4.158,1382,4.158,1383,4.158,1384,4.158,1385,4.158,1386,4.158]],["title/modules.html",[129,2.751]],["body/modules.html",[18,0.012,63,0.012,64,0.012,128,4.191,129,2.935,139,3.894,140,3.646,141,3.894,142,3.894,143,3.646,144,3.646,1387,7.704,1388,7.704,1389,7.704,1390,8.077,1391,7.437,1392,7.437]],["title/overview.html",[1393,4.746]],["body/overview.html",[2,1.779,18,0.014,63,0.011,64,0.011,106,2.086,120,4.331,127,2.002,128,5.941,129,2.492,130,2.916,131,3.306,132,3.306,133,2.916,134,2.758,135,2.758,136,4.299,137,4.299,138,4.299,139,5.026,140,4.558,141,5.22,142,5.026,143,4.558,144,4.558,145,4.206,146,3.306,147,3.306,179,1.478,669,2.002,960,4.299,961,4.299,962,4.625,1068,4.299,1393,4.299,1394,4.942,1395,4.942,1396,4.942,1397,4.942]],["title/properties.html",[181,0.711,1263,2.891]],["body/properties.html",[18,0.013,63,0.012,64,0.012,181,0.876,208,2.72,1298,5.145,1299,5.145,1300,5.145,1312,5.145,1321,5.145,1322,5.145,1323,5.145,1324,5.145,1325,5.145,1347,5.145,1350,5.145,1353,5.145,1378,5.145,1379,5.145,1380,5.145,1398,5.914,1399,5.914,1400,5.914,1401,5.914,1402,5.914,1403,5.914,1404,5.914]],["title/miscellaneous/typealiases.html",[1290,2.082,1405,4.8]],["body/miscellaneous/typealiases.html",[8,0.38,18,0.012,20,0.43,63,0.012,64,0.012,180,4.1,205,4.942,528,4.1,545,5.381,749,4.1,764,5.381,916,4.1,917,4.942,923,5.97,944,4.1,953,5.97,970,4.1,971,4.942,986,5.97,1002,4.1,1017,5.97,1052,4.1,1072,5.381,1290,3.567,1406,5.694,1407,4.953,1408,4.953,1409,4.953,1410,4.953,1411,4.953,1412,4.953,1413,4.953,1414,4.953]],["title/miscellaneous/variables.html",[1290,2.082,1415,4.175]],["body/miscellaneous/variables.html",[8,0.121,18,0.014,19,1.131,20,0.561,28,1.041,37,2.354,45,0.327,46,1.581,50,1.774,51,0.767,57,0.767,63,0.005,64,0.005,66,1.425,67,3.209,68,0.63,78,0.471,86,2.141,88,0.8,90,2.763,101,0.607,102,0.736,112,0.868,114,3.468,180,1.309,184,1.988,193,2.162,195,0.93,210,2.162,211,1.581,224,1.881,228,1.138,248,2.264,253,1.881,254,1.881,255,1.881,256,1.881,261,2.354,277,0.916,318,2.567,325,2.763,328,2.763,337,0.963,396,5.27,397,5.282,405,2.354,413,1.425,415,1.425,418,1.581,422,1.216,425,1.676,428,1.014,463,2.835,464,1.216,465,2.141,466,1.216,483,2.803,497,1.216,498,1.309,499,1.309,500,1.309,501,1.309,502,0.916,527,1.322,528,1.309,546,1.138,547,2.162,548,1.581,549,0.916,565,2.009,569,0.707,572,1.962,586,2.403,615,2.567,619,1.581,633,2.911,642,2.354,644,2.162,670,1.425,672,3.009,673,1.425,674,1.425,681,2.354,682,2.612,683,1.425,685,3.009,686,1.425,687,1.425,689,1.425,692,0.963,694,0.916,695,1.444,697,3.009,699,1.676,701,1.425,704,2.567,705,1.309,707,1.425,708,2.567,711,1.425,717,3.009,719,1.425,720,2.567,721,1.425,730,1.425,749,1.309,758,1.581,762,1.881,767,2.162,768,1.581,800,2.612,802,1.581,820,1.581,838,2.354,852,2.354,873,2.354,889,1.581,895,2.612,896,5.113,898,1.581,899,2.009,900,2.612,901,2.009,902,2.612,903,2.009,904,2.612,905,2.612,906,2.009,907,2.612,916,1.309,917,2.162,924,1.581,931,1.425,944,1.309,955,2.354,956,1.581,970,1.309,971,2.162,988,2.162,989,1.581,1002,1.309,1019,1.581,1052,1.309,1062,3.337,1073,2.162,1074,1.581,1175,2.354,1241,1.581,1242,1.581,1245,1.581,1247,1.581,1248,2.612,1250,1.581,1251,1.581,1252,2.612,1253,1.581,1254,5.113,1255,2.612,1256,1.581,1257,2.612,1260,1.581,1290,1.138,1310,1.581,1407,1.581,1408,1.581,1409,1.581,1410,2.612,1411,1.581,1412,1.581,1413,1.581,1414,1.581,1415,1.581,1416,1.817,1417,1.817,1418,1.817,1419,1.817,1420,5.622,1421,1.817,1422,1.817,1423,1.817,1424,1.817,1425,1.817,1426,1.817,1427,3.003,1428,1.817,1429,1.817,1430,1.817,1431,1.817,1432,1.817,1433,1.817,1434,1.817,1435,1.817,1436,1.817,1437,1.817,1438,1.817,1439,1.817,1440,1.817,1441,1.817,1442,1.817,1443,1.817,1444,1.817,1445,3.003,1446,3.837,1447,3.003,1448,1.817,1449,1.817,1450,1.817,1451,1.817,1452,1.817,1453,1.817,1454,3.003,1455,1.817,1456,1.817,1457,1.817,1458,3.003,1459,1.817,1460,1.817,1461,1.817,1462,4.933,1463,3.003,1464,1.817,1465,1.817,1466,1.817,1467,1.817,1468,1.817,1469,1.817,1470,1.817,1471,1.817,1472,1.817,1473,1.817,1474,1.817,1475,1.817,1476,1.817,1477,1.817,1478,1.817,1479,1.817,1480,1.817,1481,1.817,1482,3.003,1483,1.817,1484,1.817,1485,1.817,1486,1.817,1487,1.817,1488,1.817,1489,1.817,1490,1.817,1491,1.817,1492,1.817,1493,1.817,1494,1.817,1495,1.817,1496,1.817,1497,1.817,1498,1.817,1499,1.817,1500,1.817,1501,1.817,1502,1.817,1503,3.003]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1399,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1258,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1259,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1232,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1243,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":896,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["10.0.3",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["14",{"_index":1397,"title":{},"body":{"overview.html":{}}}],["16.1.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":1395,"title":{},"body":{"overview.html":{}}}],["2.3.2",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":1396,"title":{},"body":{"overview.html":{}}}],["24",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["3.0.2",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["30d",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["4.0.0",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["6",{"_index":1068,"title":{},"body":{"classes/User.html":{},"overview.html":{}}}],["6.3.0",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["7",{"_index":1394,"title":{},"body":{"overview.html":{}}}],["7.1.1",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["9.0.0",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["9.4.0",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":633,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["academia",{"_index":1313,"title":{},"body":{"index.html":{}}}],["access_token_strategy",{"_index":90,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":182,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":65,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["according",{"_index":978,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["acesse",{"_index":1330,"title":{},"body":{"index.html":{}}}],["activation",{"_index":1053,"title":{},"body":{"classes/User.html":{}}}],["active",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["addexercise",{"_index":822,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addexercise(planid",{"_index":824,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["addorupdatetraining",{"_index":690,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["addorupdatetraining(id",{"_index":778,"title":{},"body":{"controllers/PlansController.html":{}}}],["addorupdatetraining(planid",{"_index":860,"title":{},"body":{"injectables/PlansService.html":{}}}],["age",{"_index":972,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["age'})@prop({type",{"_index":976,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["aggregate(pipeline",{"_index":845,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["aliases",{"_index":1406,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowdiskuse(false",{"_index":846,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["already",{"_index":1189,"title":{},"body":{"injectables/UsersService.html":{}}}],["alteredtraining",{"_index":891,"title":{},"body":{"injectables/PlansService.html":{}}}],["alteredtraining.push",{"_index":908,"title":{},"body":{"injectables/PlansService.html":{}}}],["além",{"_index":1314,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":741,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["api",{"_index":1353,"title":{},"body":{"index.html":{},"properties.html":{}}}],["api.onrender.com/swagger",{"_index":1344,"title":{},"body":{"index.html":{}}}],["api/back",{"_index":1296,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":585,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":200,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isarray()@isoptional",{"_index":489,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["apiproperty()@isdate()@isdefined()@isnotempty",{"_index":992,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isdate()@isnotempty()@isdefined",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isdefined()@isarray()@arraynotempty",{"_index":467,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isboolean",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isdate",{"_index":1078,"title":{},"body":{"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isjwt()@isstring",{"_index":289,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@ismongoid()@isstring",{"_index":296,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring",{"_index":487,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isdefined()@isnotempty()@isstring()@isemail",{"_index":291,"title":{},"body":{"classes/AuthDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isemail()@isstring()@isnotempty()@isdefined",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isnotempty()@isboolean",{"_index":1021,"title":{},"body":{"classes/TrainingDto.html":{}}}],["apiproperty()@isnumber()@isdefined()@isnotempty",{"_index":994,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["apiproperty()@isobject",{"_index":294,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty()@isoptional()@isarray",{"_index":1047,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isboolean",{"_index":1035,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["apiproperty()@isoptional()@isdate",{"_index":484,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@ismongoid()@isstring",{"_index":1037,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{}}}],["apiproperty()@isoptional()@isstring",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined",{"_index":471,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty()@isstring()@isnotempty()@isdefined()@minlength(6",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":473,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{}}}],["apiproperty()@isstring()@isurl()@isoptional",{"_index":469,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["apiproperty({description",{"_index":185,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["apitags",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('exercises",{"_index":595,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["apitags('plans",{"_index":796,"title":{},"body":{"controllers/PlansController.html":{}}}],["apitags('users",{"_index":1113,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["aplicação",{"_index":1299,"title":{},"body":{"index.html":{},"properties.html":{}}}],["app.controller",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":105,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":128,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":120,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["arr.foreach((obj",{"_index":1194,"title":{},"body":{"injectables/UsersService.html":{}}}],["arrayelemat",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraynotempty",{"_index":476,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UserDto.html":{}}}],["async",{"_index":68,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["atlasconnection",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["atlasconnection}/${configservice.get('mongo_db",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["auth",{"_index":178,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["auth.controller",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":728,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.model",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["auth.name",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.repository",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["auth/auth.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/access",{"_index":593,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["auth_controller",{"_index":672,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_repository",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_service",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/IAuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":212,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdocument",{"_index":205,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["authdocument.accesstoken",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.email",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.refreshtoken",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdocument.userid",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto",{"_index":233,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":35,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"injectables/LocalAuthGuard.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UsersController.html":{}}}],["authguard('jwt",{"_index":42,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["authguard('local",{"_index":729,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":139,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1378,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authrepository",{"_index":316,"title":{"injectables/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"coverage.html":{}}}],["authschema",{"_index":210,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":314,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["available",{"_index":1392,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["avatar'})@prop({type",{"_index":1056,"title":{},"body":{"classes/User.html":{}}}],["await",{"_index":102,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["back",{"_index":1348,"title":{},"body":{"index.html":{}}}],["bad",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request_400",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bad_request_400})@apinotfoundresponse({description",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["badrequestexception",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`delete",{"_index":1221,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`disable",{"_index":1227,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`enable",{"_index":1224,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(`invalid",{"_index":654,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`update",{"_index":666,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(error",{"_index":1217,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(error.message",{"_index":663,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(errors",{"_index":660,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["banco",{"_index":1328,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(passwordlogin",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(password",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["belongs",{"_index":884,"title":{},"body":{"injectables/PlansService.html":{}}}],["birth",{"_index":1058,"title":{},"body":{"classes/User.html":{}}}],["birthdate",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["bmi",{"_index":973,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["body",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["body('exerciseid",{"_index":807,"title":{},"body":{"controllers/PlansController.html":{}}}],["boolean",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1390,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1387,"title":{},"body":{"modules.html":{}}}],["buildparams",{"_index":644,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildparams(params",{"_index":649,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["calculation",{"_index":987,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["calculation'})@prop({type",{"_index":980,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["canactivate",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["canactivate(context",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["catch",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":1216,"title":{},"body":{"injectables/UsersService.html":{}}}],["characters",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["class",{"_index":40,"title":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":179,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_imports",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_plansmodule",{"_index":809,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_plansmodule_imports",{"_index":810,"title":{},"body":{"modules/PlansModule.html":{}}}],["cluster_routinesmodule",{"_index":960,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["cluster_routinesmodule_providers",{"_index":961,"title":{},"body":{"modules/RoutinesModule.html":{},"overview.html":{}}}],["collection",{"_index":206,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{}}}],["com",{"_index":1320,"title":{},"body":{"index.html":{}}}],["comparepasswords",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepasswords(password",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc",{"_index":1340,"title":{},"body":{"index.html":{}}}],["concat",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cond",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('environment_local",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_refresh_secret",{"_index":936,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('mongo_atlas",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mongo_local",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":45,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(auth_service",{"_index":736,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(authservice",{"_index":731,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["constructor(model",{"_index":347,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{}}}],["constructor(reflector",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["constructor(repository",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":70,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["construída",{"_index":1400,"title":{},"body":{"properties.html":{}}}],["content",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context.getclass",{"_index":49,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["context.gethandler",{"_index":48,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["control",{"_index":1003,"title":{},"body":{"classes/Training.html":{}}}],["controle",{"_index":1304,"title":{},"body":{"index.html":{}}}],["controller",{"_index":104,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/RoutinesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exercises",{"_index":594,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["controller('plans",{"_index":795,"title":{},"body":{"controllers/PlansController.html":{}}}],["controller('users",{"_index":1112,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1228,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":343,"title":{},"body":{"injectables/AuthRepository.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":606,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["create(auth",{"_index":350,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["create(exercise",{"_index":563,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["create(plan",{"_index":781,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["create(user",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":758,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["created_201",{"_index":565,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createexercisedto",{"_index":460,"title":{"classes/CreateExerciseDto.html":{}},"body":{"classes/CreateExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["createplandto",{"_index":480,"title":{"classes/CreatePlanDto.html":{}},"body":{"classes/CreatePlanDto.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":494,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["current",{"_index":912,"title":{},"body":{"injectables/PlansService.html":{}}}],["currentdate",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentdate.gettime",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["da",{"_index":1298,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dados",{"_index":1329,"title":{},"body":{"index.html":{}}}],["data",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{}}}],["data.email",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.pipeline",{"_index":840,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["data.pipeline.ts",{"_index":1248,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["data.refreshtoken.refreshtoken",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.userid",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{}}}],["date'})@prop({type",{"_index":1059,"title":{},"body":{"classes/User.html":{}}}],["date(shape.age",{"_index":1204,"title":{},"body":{"injectables/UsersService.html":{}}}],["de",{"_index":1305,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["decodedrefreshtoken",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedrefreshtoken.exp",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken(token",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorator/public.decorator",{"_index":38,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["decorators",{"_index":110,"title":{},"body":{"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":679,"title":{},"body":{"interfaces/IDefaultController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete(id",{"_index":1138,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["demonstração",{"_index":1315,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":130,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":208,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["descrição",{"_index":1295,"title":{},"body":{"index.html":{}}}],["desenho",{"_index":1356,"title":{},"body":{"index.html":{}}}],["desenvolvida",{"_index":1319,"title":{},"body":{"index.html":{}}}],["development",{"_index":1363,"title":{},"body":{"index.html":{}}}],["diagramação",{"_index":1355,"title":{},"body":{"index.html":{}}}],["disable",{"_index":712,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disable(@param('id",{"_index":1126,"title":{},"body":{"controllers/UsersController.html":{}}}],["disable(id",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["disabled",{"_index":1226,"title":{},"body":{"injectables/UsersService.html":{}}}],["doc",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IDefaultController.html":{}}}],["document",{"_index":202,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["documentation",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["documentation/index.html",{"_index":126,"title":{},"body":{"controllers/AppController.html":{}}}],["documentação",{"_index":1335,"title":{},"body":{"index.html":{}}}],["done",{"_index":906,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["done'})@prop({type",{"_index":1004,"title":{},"body":{"classes/Training.html":{}}}],["dotenv",{"_index":310,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{}}}],["draw",{"_index":1331,"title":{},"body":{"index.html":{}}}],["dtos/auth.dto",{"_index":360,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{}}}],["dtos/dtos",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":1310,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["e._id",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1374,"title":{},"body":{"index.html":{}}}],["elemmatch",{"_index":909,"title":{},"body":{"injectables/PlansService.html":{}}}],["em",{"_index":1322,"title":{},"body":{"index.html":{},"properties.html":{}}}],["email",{"_index":101,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["email'})@prop({type",{"_index":189,"title":{},"body":{"classes/Auth.html":{},"classes/User.html":{}}}],["enable",{"_index":713,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enable(@param('id",{"_index":1123,"title":{},"body":{"controllers/UsersController.html":{}}}],["enable(id",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["enabled",{"_index":1223,"title":{},"body":{"injectables/UsersService.html":{}}}],["end",{"_index":1297,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1341,"title":{},"body":{"index.html":{}}}],["eq",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["error",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["error.constraints",{"_index":1212,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors",{"_index":657,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["errors.length",{"_index":659,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["errors.map((error",{"_index":1211,"title":{},"body":{"injectables/UsersService.html":{}}}],["estrutura",{"_index":1338,"title":{},"body":{"index.html":{}}}],["estática",{"_index":1337,"title":{},"body":{"index.html":{}}}],["evolução",{"_index":1308,"title":{},"body":{"index.html":{}}}],["executar",{"_index":1361,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["execução",{"_index":1316,"title":{},"body":{"index.html":{}}}],["exercise",{"_index":527,"title":{"classes/Exercise.html":{}},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercise'})@prop({type",{"_index":541,"title":{},"body":{"classes/Exercise.html":{}}}],["exercise.focusmuscle",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.id",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.image",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.length",{"_index":601,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["exercise.model",{"_index":591,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"interfaces/IExercisesController.html":{}}}],["exercise.name",{"_index":619,"title":{},"body":{"modules/ExercisesModule.html":{},"miscellaneous/variables.html":{}}}],["exercise.notes",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercise.video",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedatapipeline",{"_index":838,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisedatapipeline('_id",{"_index":847,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedatapipeline('userid",{"_index":843,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["exercisedetails",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails._id",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.focusmuscle",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.image",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.name",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.notes",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedetails.video",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisedocument",{"_index":545,"title":{},"body":{"classes/Exercise.html":{},"injectables/ExercisesRepository.html":{},"miscellaneous/typealiases.html":{}}}],["exercisedto",{"_index":549,"title":{"classes/ExerciseDto.html":{}},"body":{"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseexists",{"_index":910,"title":{},"body":{"injectables/PlansService.html":{}}}],["exercisefocusmuscle",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exerciseid",{"_index":699,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["exerciseimage",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercisename",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercises",{"_index":546,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["exercises.controller",{"_index":614,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.dto.ts",{"_index":462,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["exercises.dto.ts:17",{"_index":472,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:23",{"_index":468,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:29",{"_index":470,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:35",{"_index":475,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.dto.ts:40",{"_index":474,"title":{},"body":{"classes/CreateExerciseDto.html":{}}}],["exercises.length",{"_index":651,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.map((exe",{"_index":652,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["exercises.repository",{"_index":618,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises.service",{"_index":613,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["exercises/exercises.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["exercises/exercises.service",{"_index":818,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises/interfaces/exercises.service.interface",{"_index":819,"title":{},"body":{"modules/PlansModule.html":{}}}],["exercises_controller",{"_index":685,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_repository",{"_index":615,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercises_service",{"_index":586,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"interfaces/IExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exerciseschema",{"_index":547,"title":{},"body":{"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exercisescontroller",{"_index":557,"title":{"controllers/ExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"coverage.html":{}}}],["exercisesmodule",{"_index":140,"title":{"modules/ExercisesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["exercisesrepository",{"_index":617,"title":{"injectables/ExercisesRepository.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["exercisesservice",{"_index":612,"title":{"injectables/ExercisesService.html":{}},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["exercisevideo",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exercícios",{"_index":1317,"title":{},"body":{"index.html":{}}}],["existing",{"_index":756,"title":{},"body":{"classes/Plan.html":{}}}],["existingtraining",{"_index":871,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining.findindex",{"_index":893,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtraining[existingtrainingindex",{"_index":897,"title":{},"body":{"injectables/PlansService.html":{}}}],["existingtrainingindex",{"_index":892,"title":{},"body":{"injectables/PlansService.html":{}}}],["existis",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":1190,"title":{},"body":{"injectables/UsersService.html":{}}}],["exp",{"_index":724,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["expired",{"_index":55,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["expires",{"_index":918,"title":{},"body":{"classes/RefreshToken.html":{}}}],["expiresin",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":119,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":41,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["external",{"_index":535,"title":{},"body":{"classes/Exercise.html":{}}}],["extractjwt",{"_index":81,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":98,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["failed",{"_index":667,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":100,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["field",{"_index":682,"title":{},"body":{"interfaces/IDefaultController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":705,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["findbyparams",{"_index":559,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(@query",{"_index":599,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["findbyparams(params",{"_index":568,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["findbyparams(request",{"_index":783,"title":{},"body":{"controllers/PlansController.html":{}}}],["first",{"_index":1062,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["flavsoliver@gmail.com",{"_index":1386,"title":{},"body":{"index.html":{}}}],["fluxos",{"_index":1357,"title":{},"body":{"index.html":{}}}],["flávio",{"_index":1379,"title":{},"body":{"index.html":{},"properties.html":{}}}],["focus",{"_index":529,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["focusmuscle",{"_index":463,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":935,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["forbiddenexception('refresh",{"_index":941,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["foreignfield",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":1325,"title":{},"body":{"index.html":{},"properties.html":{}}}],["frequency",{"_index":945,"title":{},"body":{"classes/Routine.html":{}}}],["funcionalidades",{"_index":1333,"title":{},"body":{"index.html":{}}}],["function",{"_index":671,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"coverage.html":{}}}],["functions",{"_index":1291,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["futuredate",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["física",{"_index":1309,"title":{},"body":{"index.html":{}}}],["físicos",{"_index":1318,"title":{},"body":{"index.html":{}}}],["generateaccesstoken",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(userid",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["gerada",{"_index":1339,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":602,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apibearerauth()@apiunauthorizedresponse({description",{"_index":577,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get('authorization",{"_index":938,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["get('documentation",{"_index":115,"title":{},"body":{"controllers/AppController.html":{}}}],["get('email",{"_index":1115,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('search",{"_index":598,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get('search')@apibearerauth()@apiunauthorizedresponse({description",{"_index":570,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["get()@apibearerauth()@apiunauthorizedresponse({description",{"_index":574,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["getall",{"_index":560,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getall(@req",{"_index":798,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(request",{"_index":785,"title":{},"body":{"controllers/PlansController.html":{}}}],["getall(userid",{"_index":828,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["getbyaccesstoken",{"_index":344,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["getbyaccesstoken(token",{"_index":352,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["getbyemail",{"_index":714,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyemail(@query('email",{"_index":1116,"title":{},"body":{"controllers/UsersController.html":{}}}],["getbyemail(email",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyfield",{"_index":680,"title":{},"body":{"interfaces/IDefaultController.html":{}}}],["getbyid",{"_index":561,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyid(@param('id",{"_index":603,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["getbyid(id",{"_index":576,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["getbyrefreshtoken",{"_index":345,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["getbyrefreshtoken(token",{"_index":354,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["gethello",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getplanbyexerciseid",{"_index":702,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["getplanbyexerciseid(filter",{"_index":831,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["getting",{"_index":1293,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1391,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard/access",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/local",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/refresh",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["gym",{"_index":1300,"title":{},"body":{"index.html":{},"properties.html":{}}}],["handlerequest",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["handlerequest(err",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["hashedpassword",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword(password",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["height",{"_index":974,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["height'})@prop({type",{"_index":982,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["hello",{"_index":176,"title":{},"body":{"injectables/AppService.html":{}}}],["history",{"_index":1070,"title":{},"body":{"classes/User.html":{},"classes/UserDto.html":{}}}],["history.dto",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["history.dto.ts",{"_index":991,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["history.dto.ts:15",{"_index":996,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:21",{"_index":997,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:27",{"_index":995,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.dto.ts:9",{"_index":993,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["history.ts",{"_index":971,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["history.ts:11",{"_index":977,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:15",{"_index":983,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:19",{"_index":985,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["history.ts:25",{"_index":981,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["https://docs.nestjs.com/controllers#controllers",{"_index":959,"title":{},"body":{"controllers/RoutinesController.html":{}}}],["https://flaviosoliver",{"_index":1382,"title":{},"body":{"index.html":{}}}],["https://github.com/flaviosoliver",{"_index":1404,"title":{},"body":{"properties.html":{}}}],["https://todo",{"_index":1343,"title":{},"body":{"index.html":{}}}],["https://www.linkedin.com/in/flaviosoliver",{"_index":1385,"title":{},"body":{"index.html":{}}}],["iat",{"_index":725,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["iauthcontroller",{"_index":251,"title":{"interfaces/IAuthController.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"coverage.html":{}}}],["iauthrepository",{"_index":359,"title":{"interfaces/IAuthRepository.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"coverage.html":{}}}],["iauthservice",{"_index":249,"title":{"interfaces/IAuthService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthService.html":{},"coverage.html":{}}}],["id",{"_index":195,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthService.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["id'})@prop({type",{"_index":1006,"title":{},"body":{"classes/Training.html":{}}}],["idefaultcontroller",{"_index":677,"title":{"interfaces/IDefaultController.html":{}},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["identifier",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["iexercisescontroller",{"_index":589,"title":{"interfaces/IExercisesController.html":{}},"body":{"controllers/ExercisesController.html":{},"interfaces/IExercisesController.html":{},"coverage.html":{}}}],["iexercisesrepository",{"_index":627,"title":{"interfaces/IExercisesRepository.html":{}},"body":{"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesRepository.html":{},"coverage.html":{}}}],["iexercisesservice",{"_index":587,"title":{"interfaces/IExercisesService.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesService.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":99,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["image",{"_index":464,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["image'})@prop({type",{"_index":537,"title":{},"body":{"classes/Exercise.html":{}}}],["implements",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["import",{"_index":31,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["in'})@prop({type",{"_index":919,"title":{},"body":{"classes/RefreshToken.html":{}}}],["incorrect",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["info.message",{"_index":53,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["inject",{"_index":80,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(auth_repository",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(auth_service",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["inject(exercises_repository",{"_index":647,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["inject(exercises_service",{"_index":596,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["inject(plans_repository",{"_index":875,"title":{},"body":{"injectables/PlansService.html":{}}}],["inject(plans_service",{"_index":797,"title":{},"body":{"controllers/PlansController.html":{}}}],["inject(users_repository",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(users_service",{"_index":92,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":358,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(auth.name",{"_index":361,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["injectmodel(exercise.name",{"_index":628,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["injectmodel(plan.name",{"_index":841,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["injectmodel(user.name",{"_index":1147,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["input",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instalação",{"_index":1358,"title":{},"body":{"index.html":{}}}],["installpara",{"_index":1360,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":662,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":668,"title":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":669,"title":{},"body":{"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["interfaces/auth.controller.interface",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces/auth.repository.interface",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["interfaces/auth.service.interface",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["interfaces/exercises.controller.interface",{"_index":590,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["interfaces/exercises.repository.interface",{"_index":616,"title":{},"body":{"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/exercises.service.interface",{"_index":588,"title":{},"body":{"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesService.html":{}}}],["interfaces/jwt",{"_index":84,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["interfaces/plans.controller.interface",{"_index":794,"title":{},"body":{"controllers/PlansController.html":{}}}],["interfaces/plans.repository.interface",{"_index":817,"title":{},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["interfaces/plans.service.interface",{"_index":792,"title":{},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{}}}],["interfaces/users.controller.interface",{"_index":1111,"title":{},"body":{"controllers/UsersController.html":{}}}],["interfaces/users.repository.interface",{"_index":1131,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["interfaces/users.service.interface",{"_index":1110,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["internal",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":59,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["io",{"_index":1332,"title":{},"body":{"index.html":{}}}],["iplanscontroller",{"_index":688,"title":{"interfaces/IPlansController.html":{}},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"coverage.html":{}}}],["iplansrepository",{"_index":700,"title":{"interfaces/IPlansRepository.html":{}},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["iplansservice",{"_index":706,"title":{"interfaces/IPlansService.html":{}},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["is_public_key",{"_index":37,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isarray",{"_index":477,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isboolean",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isdate",{"_index":492,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isdefined",{"_index":298,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isemail",{"_index":299,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["isemail(email",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["isjwt",{"_index":300,"title":{},"body":{"classes/AuthDto.html":{}}}],["islocal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":301,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreatePlanDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isnotempty",{"_index":302,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UserDto.html":{}}}],["isnumber",{"_index":998,"title":{},"body":{"classes/ShapeHistoryDto.html":{}}}],["isobject",{"_index":303,"title":{},"body":{"classes/AuthDto.html":{}}}],["isoptional",{"_index":478,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["ispasswordvalid",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispublic",{"_index":46,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":304,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{}}}],["isurl",{"_index":479,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{}}}],["iuserscontroller",{"_index":710,"title":{"interfaces/IUsersController.html":{}},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["iusersrepository",{"_index":718,"title":{"interfaces/IUsersRepository.html":{}},"body":{"interfaces/IUsersRepository.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["iusersservice",{"_index":71,"title":{"interfaces/IUsersService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["jsonwebtoken",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":54,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":97,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":311,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":75,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["lastname",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["license",{"_index":1402,"title":{},"body":{"properties.html":{}}}],["linguagem",{"_index":1347,"title":{},"body":{"index.html":{},"properties.html":{}}}],["linkedin",{"_index":1384,"title":{},"body":{"index.html":{}}}],["load",{"_index":903,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["load/weight",{"_index":1018,"title":{},"body":{"classes/Training.html":{}}}],["load/weight'})@prop({type",{"_index":1009,"title":{},"body":{"classes/Training.html":{}}}],["local",{"_index":735,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local_strategy",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["localauthguard",{"_index":266,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localconnection",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["localconnection}/${configservice.get('mongo_db",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["localfield",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":329,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["logger",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('exercises",{"_index":641,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["logger('plansservice",{"_index":872,"title":{},"body":{"injectables/PlansService.html":{}}}],["logger('usersservice",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["login(@body",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(doc",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(email",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":218,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthService.html":{}}}],["logout(@req",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(request",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["lookup",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["malformed",{"_index":942,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["map",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapexercise",{"_index":642,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapexercise(exe",{"_index":653,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapexercise(exercise",{"_index":656,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["mapplan",{"_index":873,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapplan(item",{"_index":880,"title":{},"body":{"injectables/PlansService.html":{}}}],["mapplan(plan",{"_index":877,"title":{},"body":{"injectables/PlansService.html":{}}}],["maptrainings",{"_index":1257,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mapuser(user",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":64,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(futuredate.gettime",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["mergedprops",{"_index":1192,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop",{"_index":1196,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergedprops[prop].push(obj[prop",{"_index":1197,"title":{},"body":{"injectables/UsersService.html":{}}}],["mergeobjects",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["messages",{"_index":1200,"title":{},"body":{"injectables/UsersService.html":{}}}],["messages.join",{"_index":1201,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["mim",{"_index":1377,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["minlength(6",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miro",{"_index":1334,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":1290,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1367,"title":{},"body":{"index.html":{}}}],["model",{"_index":348,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["modelagem",{"_index":1327,"title":{},"body":{"index.html":{}}}],["models/training.model",{"_index":1000,"title":{},"body":{"modules/SharedModule.html":{}}}],["modular",{"_index":1336,"title":{},"body":{"index.html":{}}}],["module",{"_index":127,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":129,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":1351,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":203,"title":{},"body":{"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{},"index.html":{}}}],["mongoose.schema.types.objectid",{"_index":766,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["mongoose.types.objectid(value",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["more'})@prop({type",{"_index":1067,"title":{},"body":{"classes/User.html":{}}}],["muscle",{"_index":530,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{}}}],["musculação",{"_index":1311,"title":{},"body":{"index.html":{}}}],["n",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["na",{"_index":1312,"title":{},"body":{"index.html":{},"properties.html":{}}}],["name",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/TrainingDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["name'})@prop({type",{"_index":539,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["nest",{"_index":1326,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1350,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"modules/SharedModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":34,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":36,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":201,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"classes/LoginDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"classes/RefreshToken.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":57,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["newrefreshtoken",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["no_content_204",{"_index":1255,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":1349,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1323,"title":{},"body":{"index.html":{},"properties.html":{}}}],["not_found_404",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["not_found_404})@apiinternalservererrorresponse({description",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["not_found_404})@apiokresponse({description",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["notes",{"_index":465,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["notes'})@prop({type",{"_index":1011,"title":{},"body":{"classes/Training.html":{}}}],["notfoundexception",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`email",{"_index":1118,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`exercise",{"_index":665,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["notfoundexception(`id",{"_index":605,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":1191,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1359,"title":{},"body":{"index.html":{}}}],["null",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":726,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{}}}],["o",{"_index":1324,"title":{},"body":{"index.html":{},"properties.html":{}}}],["obj",{"_index":1195,"title":{},"body":{"injectables/UsersService.html":{}}}],["obj[prop",{"_index":1198,"title":{},"body":{"injectables/UsersService.html":{}}}],["object",{"_index":209,"title":{},"body":{"classes/Auth.html":{}}}],["object'})@prop({type",{"_index":192,"title":{},"body":{"classes/Auth.html":{}}}],["object.entries(mergedprops).map",{"_index":1199,"title":{},"body":{"injectables/UsersService.html":{}}}],["odm",{"_index":1352,"title":{},"body":{"index.html":{}}}],["ok",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok_200",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oliveira",{"_index":1380,"title":{},"body":{"index.html":{},"properties.html":{}}}],["opt",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.focusmuscle",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opt.$or.push",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["out",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["overview",{"_index":1393,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1263,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["para",{"_index":1303,"title":{},"body":{"index.html":{}}}],["param",{"_index":582,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":609,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":572,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["params.focusmuscle",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.focusmuscle?.length",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.name",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params.userid",{"_index":800,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["params.utils",{"_index":646,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["params.utils.ts",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["paramsdto",{"_index":569,"title":{"classes/ParamsDto.html":{}},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":83,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":79,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["passportstrategy(strategy",{"_index":91,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":937,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["password",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/IAuthService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":738,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordlogin",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passworduser",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":583,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/disable",{"_index":1125,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/doneexercise",{"_index":806,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/doneexercise')@apibearerauth()@apiunauthorizedresponse({description",{"_index":790,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/enable",{"_index":1122,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/shape",{"_index":1120,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/update",{"_index":608,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/update')@apibearerauth()@apiunauthorizedresponse({description",{"_index":580,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["patch(':id/updatetraining",{"_index":804,"title":{},"body":{"controllers/PlansController.html":{}}}],["patch(':id/updatetraining')@apibearerauth()@apiunauthorizedresponse({description",{"_index":779,"title":{},"body":{"controllers/PlansController.html":{}}}],["path",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":77,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface",{"_index":85,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/IAuthService.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["payload.interface.ts",{"_index":723,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pipeline",{"_index":842,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["pipelines/exercise",{"_index":839,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["plan",{"_index":695,"title":{"classes/Plan.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plan'})@prop({type",{"_index":751,"title":{},"body":{"classes/Plan.html":{}}}],["plan.dto.ts",{"_index":482,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["plan.dto.ts:16",{"_index":1049,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:19",{"_index":488,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:21",{"_index":1050,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:25",{"_index":486,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:26",{"_index":1048,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:30",{"_index":485,"title":{},"body":{"classes/CreatePlanDto.html":{}}}],["plan.dto.ts:31",{"_index":1046,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:37",{"_index":491,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.dto.ts:42",{"_index":490,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/UpdatePlanDto.html":{}}}],["plan.expiresin",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.focusmuscle",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.id",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plan.length",{"_index":801,"title":{},"body":{"controllers/PlansController.html":{}}}],["plan.model",{"_index":696,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{}}}],["plan.name",{"_index":820,"title":{},"body":{"modules/PlansModule.html":{},"miscellaneous/variables.html":{}}}],["plan.training",{"_index":889,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["plan.userid",{"_index":802,"title":{},"body":{"controllers/PlansController.html":{},"miscellaneous/variables.html":{}}}],["plan.userid.tostring",{"_index":886,"title":{},"body":{"injectables/PlansService.html":{}}}],["plandocument",{"_index":764,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansRepository.html":{},"miscellaneous/typealiases.html":{}}}],["plandto",{"_index":694,"title":{"classes/PlanDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planid",{"_index":709,"title":{},"body":{"interfaces/IPlansService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["plans",{"_index":765,"title":{},"body":{"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["plans.controller",{"_index":812,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.length",{"_index":878,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.map((item",{"_index":879,"title":{},"body":{"injectables/PlansService.html":{}}}],["plans.repository",{"_index":816,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans.service",{"_index":814,"title":{},"body":{"modules/PlansModule.html":{}}}],["plans/plans.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["plans_controller",{"_index":697,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_repository",{"_index":704,"title":{},"body":{"interfaces/IPlansRepository.html":{},"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plans_service",{"_index":708,"title":{},"body":{"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planschema",{"_index":767,"title":{},"body":{"classes/Plan.html":{},"modules/PlansModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["planscontroller",{"_index":776,"title":{"controllers/PlansController.html":{}},"body":{"controllers/PlansController.html":{},"modules/PlansModule.html":{},"coverage.html":{}}}],["plansmodule",{"_index":141,"title":{"modules/PlansModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules.html":{},"overview.html":{}}}],["plansrepository",{"_index":815,"title":{"injectables/PlansRepository.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"coverage.html":{}}}],["plansservice",{"_index":813,"title":{"injectables/PlansService.html":{}},"body":{"modules/PlansModule.html":{},"injectables/PlansService.html":{},"coverage.html":{}}}],["portfolio.vercel.app",{"_index":1383,"title":{},"body":{"index.html":{}}}],["portfólio",{"_index":1381,"title":{},"body":{"index.html":{}}}],["post",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@apiunauthorizedresponse({description",{"_index":564,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["post()@apiunauthorizedresponse({description",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":93,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":96,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["production",{"_index":1369,"title":{},"body":{"index.html":{}}}],["project",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projeto",{"_index":1362,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["prop",{"_index":197,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["prop({type",{"_index":946,"title":{},"body":{"classes/Routine.html":{}}}],["properties",{"_index":181,"title":{"properties.html":{}},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["provide",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"modules/SharedModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@useguards(localauthguard)@post('login')@apiunauthorizedresponse({description",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["push",{"_index":852,"title":{},"body":{"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":584,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["readonly",{"_index":94,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1193,"title":{},"body":{"injectables/UsersService.html":{}}}],["ref",{"_index":759,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/Training.html":{}}}],["reflect",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["refresh",{"_index":191,"title":{},"body":{"classes/Auth.html":{},"classes/AuthDto.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["refresh_token_strategy",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken",{"_index":183,"title":{"classes/RefreshToken.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["refreshtoken(@body",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(data",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken.refreshtoken",{"_index":365,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["refreshtokendocument",{"_index":923,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/typealiases.html":{}}}],["refreshtokendto",{"_index":293,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/AuthDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenguard",{"_index":264,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["refreshtokens(data",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenschema",{"_index":193,"title":{},"body":{"classes/Auth.html":{},"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["refreshtokenstrategy",{"_index":326,"title":{"injectables/RefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{}}}],["regex",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":979,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["removeexercise",{"_index":856,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["repetitions",{"_index":901,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["repetitions'})@prop({type",{"_index":1013,"title":{},"body":{"classes/Training.html":{}}}],["replace('bearer",{"_index":939,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["repository",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["request",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IAuthController.html":{},"interfaces/IPlansController.html":{},"controllers/PlansController.html":{},"injectables/RefreshTokenStrategy.html":{},"miscellaneous/variables.html":{}}}],["request.user?.id",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PlansController.html":{}}}],["require",{"_index":920,"title":{},"body":{"classes/RefreshToken.html":{}}}],["required",{"_index":187,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["res",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["res.sendfile(path.join(__dirname",{"_index":125,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}],["response",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rest",{"_index":1354,"title":{},"body":{"index.html":{}}}],["result",{"_index":366,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesService.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["result.join('\\n",{"_index":1202,"title":{},"body":{"injectables/UsersService.html":{}}}],["result.userid.tostring",{"_index":883,"title":{},"body":{"injectables/PlansService.html":{}}}],["result[0",{"_index":848,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["results",{"_index":63,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":50,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["rotinas",{"_index":1307,"title":{},"body":{"index.html":{}}}],["routine",{"_index":943,"title":{"classes/Routine.html":{}},"body":{"classes/Routine.html":{},"coverage.html":{}}}],["routinedocument",{"_index":953,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/typealiases.html":{}}}],["routines",{"_index":954,"title":{},"body":{"classes/Routine.html":{}}}],["routines.controller",{"_index":965,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines.service",{"_index":964,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["routines/routines.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["routineschema",{"_index":955,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routinescontroller",{"_index":957,"title":{"controllers/RoutinesController.html":{}},"body":{"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"coverage.html":{}}}],["routinesmodule",{"_index":142,"title":{"modules/RoutinesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoutinesModule.html":{},"modules.html":{},"overview.html":{}}}],["routinesrepository",{"_index":966,"title":{"injectables/RoutinesRepository.html":{}},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["routinesservice",{"_index":962,"title":{"injectables/RoutinesService.html":{}},"body":{"modules/RoutinesModule.html":{},"injectables/RoutinesService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1364,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["savenewaccesstoken",{"_index":346,"title":{},"body":{"injectables/AuthRepository.html":{},"interfaces/IAuthRepository.html":{}}}],["savenewaccesstoken(refreshtoken",{"_index":356,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["saveplan",{"_index":703,"title":{},"body":{"interfaces/IPlansRepository.html":{},"injectables/PlansRepository.html":{}}}],["saveplan(plan",{"_index":833,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["schema",{"_index":198,"title":{},"body":{"classes/Auth.html":{},"modules/AuthModule.html":{},"classes/Exercise.html":{},"modules/ExercisesModule.html":{},"classes/Plan.html":{},"modules/PlansModule.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":199,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/RefreshToken.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(auth",{"_index":211,"title":{},"body":{"classes/Auth.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exercise",{"_index":548,"title":{},"body":{"classes/Exercise.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(plan",{"_index":768,"title":{},"body":{"classes/Plan.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(refreshtoken",{"_index":924,"title":{},"body":{"classes/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(routine",{"_index":956,"title":{},"body":{"classes/Routine.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shapehistory",{"_index":989,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(training",{"_index":1019,"title":{},"body":{"classes/Training.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1074,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretaccess",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":95,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["secretrefresh",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["series",{"_index":899,"title":{},"body":{"injectables/PlansService.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"miscellaneous/variables.html":{}}}],["series'})@prop({type",{"_index":1015,"title":{},"body":{"classes/Training.html":{}}}],["servedocs",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(@res",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["servedocs(res",{"_index":113,"title":{},"body":{"controllers/AppController.html":{}}}],["server",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server_error_500",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_error_500})@apiokresponse({description",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["service",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":854,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["setmetadata(is_public_key",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shape",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["shape.age",{"_index":1149,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["shape.bmi",{"_index":1152,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.height",{"_index":1150,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shape.weight",{"_index":1151,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["shapehistory",{"_index":969,"title":{"classes/ShapeHistory.html":{}},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["shapehistorydocument",{"_index":986,"title":{},"body":{"classes/ShapeHistory.html":{},"miscellaneous/typealiases.html":{}}}],["shapehistorydto",{"_index":521,"title":{"classes/ShapeHistoryDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/ShapeHistoryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["shapehistorydto.age",{"_index":1203,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.bmi",{"_index":1207,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.height",{"_index":1205,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistorydto.weight",{"_index":1206,"title":{},"body":{"injectables/UsersService.html":{}}}],["shapehistoryschema",{"_index":988,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/dtos/params.dto",{"_index":592,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/dtos/training.dto",{"_index":793,"title":{},"body":{"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["shared/models/training.model",{"_index":763,"title":{},"body":{"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{}}}],["shared/shared.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{}}}],["shared/utils/build",{"_index":645,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["shared/utils/http",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["sharedmodule",{"_index":143,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlansModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["short",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["signature",{"_index":60,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["signoptions",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"modules/ExercisesModule.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"modules/PlansModule.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"controllers/RoutinesController.html":{},"modules/RoutinesModule.html":{},"injectables/RoutinesRepository.html":{},"injectables/RoutinesService.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["src/.../access",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.controller.interface.ts",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.model.ts",{"_index":1407,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth.repository.interface.ts",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.interface.ts",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../build",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../credentials.utils.ts",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.mapper.ts",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercise.model.ts",{"_index":1408,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exercises.controller.interface.ts",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.repository.interface.ts",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exercises.service.interface.ts",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../local.strategy.ts",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../plan.mapper.ts",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plan.model.ts",{"_index":1409,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../plans.controller.interface.ts",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.repository.interface.ts",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../plans.service.interface.ts",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../refresh",{"_index":1410,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../routine.model.ts",{"_index":1411,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../shape",{"_index":1412,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../training.mapper.ts",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../training.model.ts",{"_index":1413,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.mapper.ts",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":1414,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.controller.interface.ts",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.repository.interface.ts",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.service.interface.ts",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":111,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:16",{"_index":116,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.service.ts",{"_index":174,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["src/main.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app.module.ts",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:48",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:60",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:72",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.model.ts",{"_index":180,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.model.ts:11",{"_index":196,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:15",{"_index":190,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:19",{"_index":188,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.model.ts:23",{"_index":194,"title":{},"body":{"classes/Auth.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.repository.ts",{"_index":342,"title":{},"body":{"injectables/AuthRepository.html":{},"coverage.html":{}}}],["src/modules/auth/auth.repository.ts:15",{"_index":351,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:19",{"_index":353,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:23",{"_index":357,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:30",{"_index":355,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.repository.ts:9",{"_index":349,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:104",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:148",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:156",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:173",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:178",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:195",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:38",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:41",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:79",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/decorator/public.decorator.ts",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dtos/auth.dto.ts",{"_index":288,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:19",{"_index":297,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:26",{"_index":290,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:33",{"_index":292,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/auth.dto.ts:37",{"_index":295,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":742,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:10",{"_index":743,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts:16",{"_index":744,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/refresh",{"_index":925,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/modules/auth/guard/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guard/local",{"_index":727,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guard/refresh",{"_index":929,"title":{},"body":{"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/auth.controller.interface.ts",{"_index":670,"title":{},"body":{"interfaces/IAuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.repository.interface.ts",{"_index":673,"title":{},"body":{"interfaces/IAuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/auth.service.interface.ts",{"_index":674,"title":{},"body":{"interfaces/IAuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/jwt",{"_index":722,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/refresh",{"_index":916,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/access",{"_index":66,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/local.strategy.ts",{"_index":730,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:10",{"_index":732,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/local.strategy.ts:18",{"_index":734,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategy/refresh",{"_index":931,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/utils/credentials.utils.ts",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/dtos/create",{"_index":461,"title":{},"body":{"classes/CreateExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts",{"_index":550,"title":{},"body":{"classes/ExerciseDto.html":{},"coverage.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:19",{"_index":552,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:25",{"_index":554,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:31",{"_index":551,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:37",{"_index":553,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:43",{"_index":556,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/dtos/exercise.dto.ts:48",{"_index":555,"title":{},"body":{"classes/ExerciseDto.html":{}}}],["src/modules/exercises/exercise.model.ts",{"_index":528,"title":{},"body":{"classes/Exercise.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/exercise.model.ts:13",{"_index":540,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:17",{"_index":533,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:21",{"_index":538,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:25",{"_index":544,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:29",{"_index":542,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercise.model.ts:9",{"_index":534,"title":{},"body":{"classes/Exercise.html":{}}}],["src/modules/exercises/exercises.controller.ts",{"_index":558,"title":{},"body":{"controllers/ExercisesController.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.controller.ts:100",{"_index":567,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:110",{"_index":581,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:58",{"_index":575,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:69",{"_index":571,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.controller.ts:84",{"_index":578,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["src/modules/exercises/exercises.module.ts",{"_index":611,"title":{},"body":{"modules/ExercisesModule.html":{}}}],["src/modules/exercises/exercises.repository.ts",{"_index":620,"title":{},"body":{"injectables/ExercisesRepository.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.repository.ts:10",{"_index":621,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:16",{"_index":622,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:20",{"_index":624,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:24",{"_index":625,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:28",{"_index":623,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.repository.ts:32",{"_index":626,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["src/modules/exercises/exercises.service.ts",{"_index":634,"title":{},"body":{"injectables/ExercisesService.html":{},"coverage.html":{}}}],["src/modules/exercises/exercises.service.ts:21",{"_index":635,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:28",{"_index":638,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:36",{"_index":637,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:51",{"_index":639,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:65",{"_index":636,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/exercises.service.ts:80",{"_index":640,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["src/modules/exercises/interfaces/exercises.controller.interface.ts",{"_index":683,"title":{},"body":{"interfaces/IExercisesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.repository.interface.ts",{"_index":686,"title":{},"body":{"interfaces/IExercisesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/interfaces/exercises.service.interface.ts",{"_index":687,"title":{},"body":{"interfaces/IExercisesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exercises/utils/exercise.mapper.ts",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/dtos/create",{"_index":481,"title":{},"body":{"classes/CreatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts",{"_index":769,"title":{},"body":{"classes/PlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:20",{"_index":772,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:26",{"_index":773,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:32",{"_index":771,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:37",{"_index":770,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:44",{"_index":775,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/plan.dto.ts:49",{"_index":774,"title":{},"body":{"classes/PlanDto.html":{}}}],["src/modules/plans/dtos/update",{"_index":1045,"title":{},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/plans/interfaces/plans.controller.interface.ts",{"_index":689,"title":{},"body":{"interfaces/IPlansController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.repository.interface.ts",{"_index":701,"title":{},"body":{"interfaces/IPlansRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/interfaces/plans.service.interface.ts",{"_index":707,"title":{},"body":{"interfaces/IPlansService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/pipelines/exercise",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts",{"_index":749,"title":{},"body":{"classes/Plan.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/plans/plan.model.ts:11",{"_index":754,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:15",{"_index":755,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:19",{"_index":753,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:23",{"_index":752,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:31",{"_index":761,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plan.model.ts:38",{"_index":757,"title":{},"body":{"classes/Plan.html":{}}}],["src/modules/plans/plans.controller.ts",{"_index":777,"title":{},"body":{"controllers/PlansController.html":{},"coverage.html":{}}}],["src/modules/plans/plans.controller.ts:109",{"_index":782,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:124",{"_index":788,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:139",{"_index":780,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:154",{"_index":791,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:61",{"_index":786,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:73",{"_index":784,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.controller.ts:93",{"_index":787,"title":{},"body":{"controllers/PlansController.html":{}}}],["src/modules/plans/plans.module.ts",{"_index":811,"title":{},"body":{"modules/PlansModule.html":{}}}],["src/modules/plans/plans.repository.ts",{"_index":821,"title":{},"body":{"injectables/PlansRepository.html":{},"coverage.html":{}}}],["src/modules/plans/plans.repository.ts:12",{"_index":823,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:18",{"_index":829,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:26",{"_index":830,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:34",{"_index":827,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:38",{"_index":826,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:42",{"_index":835,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:46",{"_index":834,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:50",{"_index":832,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:54",{"_index":825,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.repository.ts:72",{"_index":837,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["src/modules/plans/plans.service.ts",{"_index":857,"title":{},"body":{"injectables/PlansService.html":{},"coverage.html":{}}}],["src/modules/plans/plans.service.ts:121",{"_index":870,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:158",{"_index":868,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:23",{"_index":859,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:30",{"_index":864,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:38",{"_index":865,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:52",{"_index":863,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:67",{"_index":862,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:82",{"_index":866,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/plans.service.ts:98",{"_index":861,"title":{},"body":{"injectables/PlansService.html":{}}}],["src/modules/plans/utils/plan.mapper.ts",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts",{"_index":944,"title":{},"body":{"classes/Routine.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/routines/routine.model.ts:12",{"_index":950,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:15",{"_index":947,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:18",{"_index":948,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:25",{"_index":952,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:28",{"_index":951,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routine.model.ts:9",{"_index":949,"title":{},"body":{"classes/Routine.html":{}}}],["src/modules/routines/routines.controller.ts",{"_index":958,"title":{},"body":{"controllers/RoutinesController.html":{},"coverage.html":{}}}],["src/modules/routines/routines.module.ts",{"_index":963,"title":{},"body":{"modules/RoutinesModule.html":{}}}],["src/modules/routines/routines.repository.ts",{"_index":967,"title":{},"body":{"injectables/RoutinesRepository.html":{},"coverage.html":{}}}],["src/modules/routines/routines.service.ts",{"_index":968,"title":{},"body":{"injectables/RoutinesService.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto",{"_index":684,"title":{},"body":{"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/params.dto.ts",{"_index":745,"title":{},"body":{"classes/ParamsDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/params.dto.ts:2",{"_index":747,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:3",{"_index":746,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/params.dto.ts:4",{"_index":748,"title":{},"body":{"classes/ParamsDto.html":{}}}],["src/modules/shared/dtos/training.dto",{"_index":693,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{}}}],["src/modules/shared/dtos/training.dto.ts",{"_index":1020,"title":{},"body":{"classes/TrainingDto.html":{},"coverage.html":{}}}],["src/modules/shared/dtos/training.dto.ts:17",{"_index":1024,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:24",{"_index":1023,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:30",{"_index":1030,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:36",{"_index":1029,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:42",{"_index":1026,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:47",{"_index":1028,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:52",{"_index":1022,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:58",{"_index":1027,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:64",{"_index":1025,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/training.dto.ts:70",{"_index":1031,"title":{},"body":{"classes/TrainingDto.html":{}}}],["src/modules/shared/dtos/update",{"_index":1033,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["src/modules/shared/interfaces/default.controller.interface.ts",{"_index":678,"title":{},"body":{"interfaces/IDefaultController.html":{},"coverage.html":{}}}],["src/modules/shared/models/training.model",{"_index":493,"title":{},"body":{"classes/CreatePlanDto.html":{},"classes/PlanDto.html":{}}}],["src/modules/shared/models/training.model.ts",{"_index":1002,"title":{},"body":{"classes/Training.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/models/training.model.ts:10",{"_index":1008,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:18",{"_index":1007,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:22",{"_index":1016,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:26",{"_index":1014,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:30",{"_index":1010,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:34",{"_index":1012,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/models/training.model.ts:38",{"_index":1005,"title":{},"body":{"classes/Training.html":{}}}],["src/modules/shared/shared.module.ts",{"_index":999,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/modules/shared/utils/build",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/http",{"_index":1253,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/shared/utils/training.mapper.ts",{"_index":1256,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/dtos/create",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/dtos",{"_index":675,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["src/modules/users/dtos/shape",{"_index":990,"title":{},"body":{"classes/ShapeHistoryDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto",{"_index":89,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/modules/users/dtos/user.dto.ts",{"_index":1075,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user.dto.ts:22",{"_index":1082,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:29",{"_index":1080,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:35",{"_index":1084,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:41",{"_index":1081,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:47",{"_index":1083,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:53",{"_index":1079,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:59",{"_index":1076,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:65",{"_index":1085,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/dtos/user.dto.ts:70",{"_index":1077,"title":{},"body":{"classes/UserDto.html":{}}}],["src/modules/users/interfaces/users.controller.interface.ts",{"_index":711,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.repository.interface.ts",{"_index":719,"title":{},"body":{"interfaces/IUsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/interfaces/users.service.interface",{"_index":87,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/modules/users/interfaces/users.service.interface.ts",{"_index":721,"title":{},"body":{"interfaces/IUsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/shape",{"_index":970,"title":{},"body":{"classes/ShapeHistory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts",{"_index":1052,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts:11",{"_index":1064,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:15",{"_index":1061,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:21",{"_index":1069,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:25",{"_index":1063,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:29",{"_index":1066,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:33",{"_index":1060,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:37",{"_index":1055,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:41",{"_index":1071,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/user.model.ts:45",{"_index":1057,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:111",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:122",{"_index":1109,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:136",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:147",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:57",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:68",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:80",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:96",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1128,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.repository.ts",{"_index":1135,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/modules/users/users.repository.ts:15",{"_index":1137,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:19",{"_index":1142,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:23",{"_index":1144,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:27",{"_index":1143,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:32",{"_index":1145,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:36",{"_index":1146,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:52",{"_index":1139,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:56",{"_index":1141,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:60",{"_index":1140,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.repository.ts:9",{"_index":1136,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.service.ts",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:109",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:129",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:162",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:174",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:187",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:20",{"_index":1157,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:27",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:35",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:50",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:67",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:71",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:95",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/utils/user.mapper.ts",{"_index":1260,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1365,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1368,"title":{},"body":{"index.html":{}}}],["start:prodtestes",{"_index":1370,"title":{},"body":{"index.html":{}}}],["started",{"_index":1294,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":915,"title":{},"body":{"injectables/PlansService.html":{},"classes/User.html":{}}}],["status'})@prop({type",{"_index":1054,"title":{},"body":{"classes/User.html":{}}}],["status.utils",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["status.utils.ts",{"_index":1254,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["str",{"_index":1213,"title":{},"body":{"injectables/UsersService.html":{}}}],["strategy",{"_index":82,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["strategy/access",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/refresh",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{}}}],["super",{"_index":44,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["super.canactivate(context",{"_index":52,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["support",{"_index":1388,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":1065,"title":{},"body":{"classes/User.html":{}}}],["svg",{"_index":1389,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1342,"title":{},"body":{"index.html":{}}}],["t",{"_index":681,"title":{},"body":{"interfaces/IDefaultController.html":{},"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["t.exerciseid",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t.exerciseid.tostring",{"_index":894,"title":{},"body":{"injectables/PlansService.html":{}}}],["table",{"_index":1262,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1261,"title":{},"body":{"coverage.html":{}}}],["tecnologias",{"_index":1345,"title":{},"body":{"index.html":{}}}],["test",{"_index":1373,"title":{},"body":{"index.html":{}}}],["test:covsobre",{"_index":1376,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1375,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1372,"title":{},"body":{"index.html":{}}}],["then((errors",{"_index":1210,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(email",{"_index":739,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.decodetoken(newaccesstoken",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(user.id",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(user.id",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getbyemail(user.email",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getbyid(id",{"_index":1218,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashedpassword(user.password",{"_index":1187,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.decode(token",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(error",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.logger.error(str",{"_index":1215,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.model",{"_index":844,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(auth",{"_index":362,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["this.model.create(exercise",{"_index":629,"title":{},"body":{"injectables/ExercisesRepository.html":{}}}],["this.model.create(plan",{"_index":849,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.create(user",{"_index":1148,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.deleteone",{"_index":1153,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["this.model.find",{"_index":630,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.find(params",{"_index":632,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{}}}],["this.model.findbyid(id",{"_index":631,"title":{},"body":{"injectables/ExercisesRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findbyidandupdate(plan.id",{"_index":850,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.findone",{"_index":363,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.findone(filter",{"_index":851,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.model.updateone",{"_index":364,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/ExercisesRepository.html":{},"injectables/PlansRepository.html":{},"injectables/UsersRepository.html":{}}}],["this.model.updateone(filter",{"_index":853,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":47,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["this.repository.create(doc",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.create(exercise",{"_index":661,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["this.repository.create(plan",{"_index":882,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.create(user",{"_index":1188,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.delete(id",{"_index":1220,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.disable(id",{"_index":1225,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.enable(id",{"_index":1222,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findbyparams(parameters",{"_index":650,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{}}}],["this.repository.getall",{"_index":648,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getall(userid",{"_index":876,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyemail(email",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.getbyid(id",{"_index":655,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.getbyid(planid",{"_index":885,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.getbyrefreshtoken",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.getplanbyexerciseid(filter",{"_index":911,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.savenewaccesstoken",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.saveplan(plan",{"_index":890,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.update(id",{"_index":664,"title":{},"body":{"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["this.repository.updateexercisedonestatus(filter",{"_index":914,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.repository.updateshape(id",{"_index":1219,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.secretrefresh",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.service.addorupdatetraining(id",{"_index":805,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(exercise",{"_index":607,"title":{},"body":{"controllers/ExercisesController.html":{}}}],["this.service.create(plan",{"_index":803,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.create(user",{"_index":1114,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.disable(id",{"_index":1127,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.enable(id",{"_index":1124,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.findbyparams(params",{"_index":600,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{}}}],["this.service.getall",{"_index":597,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/UsersController.html":{}}}],["this.service.getall(userid",{"_index":799,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.getbyemail(email",{"_index":1117,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.service.getbyid(id",{"_index":604,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.login(email",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.logout(userid",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.refreshtokens(data",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.update(id",{"_index":610,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["this.service.updateexercisedonestatus(id",{"_index":808,"title":{},"body":{"controllers/PlansController.html":{}}}],["this.service.updateshape(id",{"_index":1121,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.transformstring(arr",{"_index":1214,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.unixtimestamp",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatetraining(plan.training",{"_index":888,"title":{},"body":{"injectables/PlansService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":103,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.getbyid(userid",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":56,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":207,"title":{},"body":{"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{}}}],["token",{"_index":62,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"classes/Auth.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IAuthRepository.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["token'})@prop({type",{"_index":186,"title":{},"body":{"classes/Auth.html":{},"classes/RefreshToken.html":{}}}],["token.dto",{"_index":306,"title":{},"body":{"classes/AuthDto.html":{}}}],["token.dto.ts",{"_index":926,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:2",{"_index":928,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:3",{"_index":927,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:16",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:28",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:5",{"_index":930,"title":{},"body":{"injectables/RefreshTokenGuard.html":{}}}],["token.model",{"_index":204,"title":{},"body":{"classes/Auth.html":{}}}],["token.model.ts",{"_index":917,"title":{},"body":{"classes/RefreshToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["token.model.ts:12",{"_index":921,"title":{},"body":{"classes/RefreshToken.html":{}}}],["token.model.ts:8",{"_index":922,"title":{},"body":{"classes/RefreshToken.html":{}}}],["token.strategy",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":67,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/RefreshTokenStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.strategy.ts:14",{"_index":72,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:17",{"_index":932,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["token.strategy.ts:25",{"_index":76,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":934,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["training",{"_index":483,"title":{"classes/Training.html":{}},"body":{"classes/CreatePlanDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["training.$.done",{"_index":855,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["training.createdat",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["training.done",{"_index":907,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.dto",{"_index":1051,"title":{},"body":{"classes/UpdatePlanDto.html":{}}}],["training.dto.ts",{"_index":1034,"title":{},"body":{"classes/TrainingUpdateDto.html":{},"coverage.html":{}}}],["training.dto.ts:17",{"_index":1039,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:23",{"_index":1038,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:28",{"_index":1043,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:33",{"_index":1042,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:38",{"_index":1040,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:43",{"_index":1041,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.dto.ts:48",{"_index":1036,"title":{},"body":{"classes/TrainingUpdateDto.html":{}}}],["training.exerciseid",{"_index":895,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.exerciseid.tostring",{"_index":913,"title":{},"body":{"injectables/PlansService.html":{}}}],["training.id",{"_index":898,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.load",{"_index":904,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.name",{"_index":1001,"title":{},"body":{"modules/SharedModule.html":{}}}],["training.notes",{"_index":905,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.repetitions",{"_index":902,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.series",{"_index":900,"title":{},"body":{"injectables/PlansService.html":{},"miscellaneous/variables.html":{}}}],["training.updatedat",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trainingdata",{"_index":698,"title":{},"body":{"interfaces/IPlansController.html":{},"controllers/PlansController.html":{}}}],["trainingdocument",{"_index":1017,"title":{},"body":{"classes/Training.html":{},"miscellaneous/typealiases.html":{}}}],["trainingdto",{"_index":692,"title":{"classes/TrainingDto.html":{}},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/TrainingDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingschema",{"_index":762,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"modules/SharedModule.html":{},"classes/Training.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["trainingupdatedto",{"_index":1032,"title":{"classes/TrainingUpdateDto.html":{}},"body":{"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["transformstring",{"_index":1156,"title":{},"body":{"injectables/UsersService.html":{}}}],["transformstring(arr",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["treinos",{"_index":1306,"title":{},"body":{"index.html":{}}}],["trim",{"_index":940,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["true",{"_index":51,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"classes/Auth.html":{},"classes/Exercise.html":{},"classes/Plan.html":{},"injectables/PlansRepository.html":{},"classes/RefreshToken.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/Training.html":{},"classes/User.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IAuthController.html":{},"interfaces/IAuthRepository.html":{},"interfaces/IAuthService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/RefreshToken.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokenStrategy.html":{},"classes/Routine.html":{},"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"classes/Training.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/User.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1405,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":1321,"title":{},"body":{"index.html":{},"properties.html":{}}}],["uma",{"_index":1301,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_401",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorized_401})@apibadrequestresponse({description",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":61,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["unauthorizedexception('token",{"_index":58,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["unauthorizedexception(`invalid",{"_index":740,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(`user",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":532,"title":{},"body":{"classes/Exercise.html":{},"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"classes/Plan.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/Training.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["undefined})@apibody({type",{"_index":566,"title":{},"body":{"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["undefined})@prop({type",{"_index":531,"title":{},"body":{"classes/Exercise.html":{},"classes/Plan.html":{},"classes/User.html":{}}}],["unit",{"_index":1371,"title":{},"body":{"index.html":{}}}],["unix",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["unixtimestamp",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["unknown",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/RefreshTokenStrategy.html":{}}}],["unlicensed",{"_index":1403,"title":{},"body":{"properties.html":{}}}],["unwind",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":562,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"interfaces/IDefaultController.html":{},"interfaces/IExercisesController.html":{},"interfaces/IExercisesRepository.html":{},"interfaces/IExercisesService.html":{},"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["update')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1108,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":1119,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":579,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesRepository.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updatedtraining",{"_index":887,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateexercisedonestatus",{"_index":691,"title":{},"body":{"interfaces/IPlansController.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{}}}],["updateexercisedonestatus(filter",{"_index":836,"title":{},"body":{"injectables/PlansRepository.html":{}}}],["updateexercisedonestatus(id",{"_index":789,"title":{},"body":{"controllers/PlansController.html":{}}}],["updateexercisedonestatus(planid",{"_index":867,"title":{},"body":{"injectables/PlansService.html":{}}}],["updateplandto",{"_index":1044,"title":{"classes/UpdatePlanDto.html":{}},"body":{"classes/UpdatePlanDto.html":{},"coverage.html":{}}}],["updateshape",{"_index":715,"title":{},"body":{"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updateshape(id",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatetraining",{"_index":858,"title":{},"body":{"injectables/PlansService.html":{}}}],["updatetraining(existingtraining",{"_index":869,"title":{},"body":{"injectables/PlansService.html":{}}}],["uri",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":536,"title":{},"body":{"classes/Exercise.html":{}}}],["useclass",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExercisesModule.html":{},"modules/PlansModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExercisesController.html":{},"controllers/PlansController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get(':id')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get('email')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@get()@apibearerauth()@apiunauthorizedresponse({description",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/disable')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/enable')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/shape",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@patch(':id/update')@apibearerauth()@apiunauthorizedresponse({description",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard)@post('logout')@apibearerauth()@apiunauthorizedresponse({description",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard)@post('refreshtoken')@apibearerauth()@apiunauthorizedresponse({description",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":28,"title":{"classes/User.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"classes/Auth.html":{},"injectables/AuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"injectables/LocalStrategy.html":{},"classes/Plan.html":{},"injectables/PlansService.html":{},"classes/ShapeHistory.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.active",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.avatar",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.birthdate",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.dto.ts",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:49",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:55",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:61",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.firstname",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.id",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.lastname",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.model",{"_index":716,"title":{},"body":{"interfaces/IUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["user.name",{"_index":1134,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.password",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.shape",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdocument",{"_index":1072,"title":{},"body":{"classes/User.html":{},"injectables/UsersRepository.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":88,"title":{"classes/UserDto.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"interfaces/IAuthService.html":{},"interfaces/IUsersController.html":{},"interfaces/IUsersRepository.html":{},"interfaces/IUsersService.html":{},"classes/UserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":184,"title":{},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreatePlanDto.html":{},"interfaces/IAuthService.html":{},"interfaces/IPlansRepository.html":{},"interfaces/IPlansService.html":{},"classes/ParamsDto.html":{},"classes/Plan.html":{},"classes/PlanDto.html":{},"controllers/PlansController.html":{},"injectables/PlansRepository.html":{},"injectables/PlansService.html":{},"classes/Routine.html":{},"classes/UpdatePlanDto.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":737,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":760,"title":{},"body":{"classes/Plan.html":{},"classes/Routine.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1130,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":1133,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1129,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dtos/dtos",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/interfaces/users.service.interface",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["users/user.model",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["users_controller",{"_index":717,"title":{},"body":{"interfaces/IUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_repository",{"_index":720,"title":{},"body":{"interfaces/IUsersRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users_service",{"_index":86,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IUsersService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema",{"_index":1073,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1086,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":144,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1132,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"coverage.html":{}}}],["usersservice",{"_index":73,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["utilizadas",{"_index":1346,"title":{},"body":{"index.html":{}}}],["utilizando",{"_index":1401,"title":{},"body":{"properties.html":{}}}],["utils/credentials.utils",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/exercise.mapper",{"_index":643,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["utils/plan.mapper",{"_index":874,"title":{},"body":{"injectables/PlansService.html":{}}}],["utils/user.mapper",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["valid",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":69,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/ExercisesService.html":{},"injectables/LocalStrategy.html":{},"injectables/PlansService.html":{},"injectables/RefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["validate(email",{"_index":733,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(exercise",{"_index":658,"title":{},"body":{"injectables/ExercisesService.html":{}}}],["validate(payload",{"_index":74,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validate(plan",{"_index":881,"title":{},"body":{"injectables/PlansService.html":{}}}],["validate(req",{"_index":933,"title":{},"body":{"injectables/RefreshTokenStrategy.html":{}}}],["validate(shapehistorydto",{"_index":1209,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate(user).then((errors",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IAuthService.html":{}}}],["validateuser(email",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":305,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateExerciseDto.html":{},"classes/CreatePlanDto.html":{},"classes/CreateUserDto.html":{},"classes/ExerciseDto.html":{},"injectables/ExercisesService.html":{},"classes/LoginDto.html":{},"classes/PlanDto.html":{},"injectables/PlansService.html":{},"classes/ShapeHistoryDto.html":{},"classes/TrainingDto.html":{},"classes/TrainingUpdateDto.html":{},"classes/UpdatePlanDto.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["validity",{"_index":750,"title":{},"body":{"classes/Plan.html":{}}}],["validobj",{"_index":1208,"title":{},"body":{"injectables/UsersService.html":{}}}],["value",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesService.html":{},"injectables/PlansService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1415,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1398,"title":{},"body":{"properties.html":{}}}],["video",{"_index":466,"title":{},"body":{"classes/CreateExerciseDto.html":{},"classes/Exercise.html":{},"classes/ExerciseDto.html":{},"classes/TrainingDto.html":{},"miscellaneous/variables.html":{}}}],["video'})@prop({type",{"_index":543,"title":{},"body":{"classes/Exercise.html":{}}}],["void",{"_index":676,"title":{},"body":{"interfaces/IAuthService.html":{}}}],["watch",{"_index":1366,"title":{},"body":{"index.html":{}}}],["web",{"_index":1302,"title":{},"body":{"index.html":{}}}],["weight",{"_index":975,"title":{},"body":{"classes/ShapeHistory.html":{},"classes/ShapeHistoryDto.html":{},"injectables/UsersRepository.html":{}}}],["weight'})@prop({type",{"_index":984,"title":{},"body":{"classes/ShapeHistory.html":{}}}],["world",{"_index":177,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":573,"title":{},"body":{"controllers/ExercisesController.html":{},"injectables/ExercisesService.html":{},"controllers/PlansController.html":{},"injectables/PlansService.html":{}}}],["zoom",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PlansModule.html":{},"modules/RoutinesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/access-token.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guard/access-token.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guard/access-token.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guard/access-token.guard.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorator/public.decorator';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    if (info && info.message === 'jwt expired') {\n      throw new UnauthorizedException('Token Expired');\n    }\n    if (info && info.message === 'invalid signature') {\n      throw new UnauthorizedException('Invalid Token');\n    }\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/access-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: IUsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/access-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/access-token.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from 'src/modules/users/interfaces/users.service.interface';\nimport { UserDto } from 'src/modules/users/dtos/user.dto';\n\nexport const ACCESS_TOKEN_STRATEGY = 'ACCESS_TOKEN_STRATEGY';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService\n  ) {\n    super({\n      secretOrKey: process.env.JWT_SECRET,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n    });\n  }\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload;\n    const user = await this.usersService.getByEmail(email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                    Async\n                                serveDocs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        serveDocs\n                        \n                    \n                \n            \n            \n                \n                    \n                    serveDocs(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('documentation')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { AppService } from './app.service';\nimport * as path from 'path';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('documentation')\n  async serveDocs(@Res() res: Response) {\n    return res.sendFile(path.join(__dirname, '../documentation/index.html'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\n\n\nPlansModule\n\nPlansModule\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ExercisesModule\n                        \n                        \n                            PlansModule\n                        \n                        \n                            RoutinesModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { RoutinesModule } from './routines/routines.module';\nimport { ExercisesModule } from './exercises/exercises.module';\nimport { UsersModule } from './users/users.module';\nimport { PlansModule } from './plans/plans.module';\nimport { SharedModule } from './shared/shared.module';\nimport { AppController } from '../app.controller';\nimport { AppService } from '../app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        const localConnection = configService.get('MONGO_LOCAL');\n        const atlasConnection = configService.get('MONGO_ATLAS');\n        const isLocal = configService.get('ENVIRONMENT_LOCAL') ?? false;\n        return {\n          uri: isLocal\n            ? `${localConnection}/${configService.get('MONGO_DB')}`\n            : `${atlasConnection}/${configService.get('MONGO_DB')}`,\n        };\n      },\n      inject: [ConfigService],\n    }),\n    AuthModule,\n    UsersModule,\n    ExercisesModule,\n    PlansModule,\n    RoutinesModule,\n    SharedModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User token'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshToken\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User refresh token object'})@Prop({type: RefreshTokenSchema, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.model.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport { RefreshToken, RefreshTokenSchema } from './refresh-token.model';\n\nexport type AuthDocument = Auth & Document;\n\n@Schema({ collection: 'auth', timestamps: true })\nexport class Auth {\n  @ApiProperty({ description: 'User Id}' })\n  userId: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({ description: 'User token' })\n  @Prop({ type: String, required: true })\n  accessToken: string;\n\n  @ApiProperty({ description: 'User refresh token object' })\n  @Prop({ type: RefreshTokenSchema, required: true })\n  refreshToken: RefreshToken;\n}\n\nexport const AuthSchema = SchemaFactory.createForClass(Auth);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(doc: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseGuards(LocalAuthGuard)@Post('login')@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: UserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Post('logout')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(data: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshTokenGuard)@Post('refreshtoken')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Inject, Post, Req, UseGuards } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  AUTH_SERVICE,\n  IAuthService,\n} from './interfaces/auth.service.interface';\nimport { IAuthController } from './interfaces/auth.controller.interface';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n} from '../shared/utils/http-response-status.utils';\nimport { UserDto } from '../users/dtos/dtos';\nimport { AuthDto, LoginDto } from './dtos/dtos';\nimport { Public } from './decorator/public.decorator';\nimport { AccessTokenGuard } from './guard/access-token.guard';\nimport { RefreshTokenGuard } from './guard/refresh-token.guard';\nimport { LocalAuthGuard } from './guard/local-auth.guard';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController implements IAuthController {\n  constructor(\n    @Inject(AUTH_SERVICE)\n    private readonly service: IAuthService\n  ) {}\n\n  @Public()\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: UserDto })\n  async login(@Body() doc: LoginDto): Promise {\n    const { email, password } = doc;\n    return await this.service.login(email, password);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Post('logout')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async logout(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return this.service.logout(userId);\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('refreshtoken')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async refreshToken(@Body() data: AuthDto): Promise {\n    return await this.service.refreshTokens(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsJWT()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RefreshTokenDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/auth.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsEmail,\n  IsJWT,\n  IsMongoId,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\nimport { RefreshTokenDto } from './refresh-token.dto';\n\nexport class AuthDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsJWT()\n  @IsString()\n  accessToken: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsObject()\n  refreshToken: RefreshTokenDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './interfaces/auth.service.interface';\nimport { AuthRepository } from './auth.repository';\nimport { AUTH_REPOSITORY } from './interfaces/auth.repository.interface';\nimport { Auth, AuthSchema } from './auth.model';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { USERS_SERVICE } from '../users/interfaces/users.service.interface';\nimport { UsersService } from '../users/users.service';\nimport {\n  ACCESS_TOKEN_STRATEGY,\n  AccessTokenStrategy,\n} from './strategy/access-token.strategy';\nimport {\n  REFRESH_TOKEN_STRATEGY,\n  RefreshTokenStrategy,\n} from './strategy/refresh-token.strategy';\nimport { LOCAL_STRATEGY, LocalStrategy } from './strategy/local.strategy';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Auth.name,\n        schema: AuthSchema,\n      },\n    ]),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '7d' },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    ConfigModule,\n  ],\n  providers: [\n    { useClass: AuthService, provide: AUTH_SERVICE },\n    { useClass: AuthRepository, provide: AUTH_REPOSITORY },\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: LocalStrategy, provide: LOCAL_STRATEGY },\n    { useClass: AccessTokenStrategy, provide: ACCESS_TOKEN_STRATEGY },\n    {\n      useClass: RefreshTokenStrategy,\n      provide: REFRESH_TOKEN_STRATEGY,\n    },\n  ],\n  controllers: [AuthController],\n  exports: [AUTH_SERVICE, AUTH_REPOSITORY],\n})\nexport class AuthModule {\n  constructor() {\n    dotenv.config();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthRepository.html":{"url":"injectables/AuthRepository.html","title":"injectable - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByAccessToken\n                            \n                            \n                                    Async\n                                getByRefreshToken\n                            \n                            \n                                    Async\n                                saveNewAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(auth: Auth)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    auth\n                                    \n                                                Auth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByAccessToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNewAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNewAccessToken(refreshToken: string, auth: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    auth\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Auth, AuthDocument } from './auth.model';\nimport { IAuthRepository } from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/auth.dto';\n\n@Injectable()\nexport class AuthRepository implements IAuthRepository {\n  constructor(\n    @InjectModel(Auth.name)\n    readonly model: Model\n  ) {}\n\n  async create(auth: Auth): Promise {\n    return await this.model.create(auth);\n  }\n\n  async getByAccessToken(token: string): Promise {\n    return await this.model.findOne({ accessToken: token });\n  }\n\n  async saveNewAccessToken(refreshToken: string, auth: AuthDto): Promise {\n    await this.model.updateOne(\n      { 'refreshToken.refreshToken': refreshToken },\n      auth\n    );\n  }\n\n  async getByRefreshToken(token: string): Promise {\n    const result = await this.model.findOne({\n      'refreshToken.refreshToken': token,\n    });\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretAccess\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretRefresh\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decodeToken\n                            \n                            \n                                    Private\n                                generateAccessToken\n                            \n                            \n                                    Private\n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshTokens\n                            \n                            \n                                unixTimestamp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IAuthRepository, usersService: IUsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IAuthRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        IUsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(data: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unixTimestamp\n                        \n                    \n                \n            \n            \n                \nunixTimestamp()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('AuthService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretAccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('JWT_SECRET')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretRefresh\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configService.get('JWT_REFRESH_SECRET')\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:38\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from '../users/interfaces/users.service.interface';\nimport {\n  AUTH_REPOSITORY,\n  IAuthRepository,\n} from './interfaces/auth.repository.interface';\nimport { AuthDto } from './dtos/dtos';\nimport { IAuthService } from './interfaces/auth.service.interface';\nimport { comparePasswords } from './utils/credentials.utils';\nimport { User } from '../users/user.model';\n\n@Injectable()\nexport class AuthService implements IAuthService {\n  private readonly logger = new Logger('AuthService');\n\n  constructor(\n    @Inject(AUTH_REPOSITORY)\n    private readonly repository: IAuthRepository,\n    @Inject(USERS_SERVICE)\n    private readonly usersService: IUsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService\n  ) {}\n\n  private readonly secretAccess = this.configService.get('JWT_SECRET');\n  private readonly secretRefresh =\n    this.configService.get('JWT_REFRESH_SECRET');\n\n  async login(email: string, password: string): Promise {\n    try {\n      const user = await this.usersService.getByEmail(email);\n\n      if (!user) {\n        throw new UnauthorizedException(`User email ${email}`);\n      }\n\n      const isPasswordValid = await comparePasswords(password, user.password);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException(\n          `Password is incorrect to user ${user.email}`\n        );\n      }\n\n      const accessToken = this.generateAccessToken(user.id, user.email);\n      const refreshToken = await this.generateRefreshToken(user.id, user.email);\n\n      const doc: AuthDto = {\n        userId: user.id,\n        email: user.email,\n        accessToken: accessToken,\n        refreshToken: {\n          refreshToken: refreshToken,\n          expiresIn: this.unixTimestamp(),\n        },\n      };\n\n      await this.repository.create(doc);\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async logout(userId: string) {\n    try {\n      const user = await this.usersService.getById(userId);\n\n      if (!user) {\n        throw new UnauthorizedException(`User id ${userId}`);\n      }\n\n      const doc: AuthDto = {\n        userId: '',\n        email: '',\n        accessToken: '',\n        refreshToken: {\n          refreshToken: '',\n          expiresIn: 0,\n        },\n      };\n\n      return doc;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async refreshTokens(data: AuthDto): Promise {\n    try {\n      const doc = await this.repository.getByRefreshToken(\n        data.refreshToken.refreshToken\n      );\n\n      if (!doc) {\n        throw new NotFoundException(\n          `Token ${data.refreshToken.refreshToken} not found`\n        );\n      }\n\n      const newAccessToken = await this.generateAccessToken(\n        data.userId,\n        data.email\n      );\n\n      const newRefreshToken = await this.generateRefreshToken(\n        data.userId,\n        data.email\n      );\n\n      const decodedRefreshToken = await this.decodeToken(newAccessToken);\n\n      const authDocument = new AuthDto();\n      authDocument.userId = data.userId;\n      authDocument.email = data.email;\n      authDocument.accessToken = newAccessToken;\n      authDocument.refreshToken = {\n        refreshToken: newRefreshToken,\n        expiresIn: decodedRefreshToken.exp,\n      };\n\n      await this.repository.saveNewAccessToken(\n        data.refreshToken.refreshToken,\n        authDocument\n      );\n      return authDocument;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n  }\n\n  async decodeToken(token: string): Promise {\n    try {\n      return this.jwtService.decode(token);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async validateUser(email: string, password: string) {\n    let user: User;\n    try {\n      user = await this.usersService.getByEmail(email);\n\n      if (!user) return null;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException();\n    }\n    const isPasswordValid = comparePasswords(password, user.password);\n\n    if (!isPasswordValid) return null;\n\n    return user;\n  }\n\n  private generateAccessToken(userId: string, email: string): string {\n    const payload = { sub: userId, email: email };\n    return this.jwtService.sign(payload);\n  }\n\n  private async generateRefreshToken(\n    userId: string,\n    email: string\n  ): Promise {\n    const refreshToken = await this.jwtService.signAsync(\n      {\n        sub: userId,\n        email: email,\n      },\n      {\n        secret: this.secretRefresh,\n        expiresIn: '30d',\n      }\n    );\n    return refreshToken;\n  }\n\n  unixTimestamp() {\n    const currentDate = new Date();\n    const futureDate = new Date(\n      currentDate.getTime() + 30 * 24 * 60 * 60 * 1000\n    );\n    const unix = Math.floor(futureDate.getTime() / 1000);\n\n    return unix;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExerciseDto.html":{"url":"classes/CreateExerciseDto.html","title":"class - CreateExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/create-exercises.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/create-exercises.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class CreateExerciseDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePlanDto.html":{"url":"classes/CreatePlanDto.html","title":"class - CreatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/create-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         [Training]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/create-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDefined,\n  IsNotEmpty,\n  IsString,\n  IsArray,\n  ArrayNotEmpty,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class CreatePlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: [Training];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()@MinLength(6, {message: 'Your password is too short! It must be 5 characters or more!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ShapeHistoryDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user.dto.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ShapeHistoryDto } from './shape-history.dto';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  @MinLength(6, {\n    message: 'Your password is too short! It must be 5 characters or more!',\n  })\n  password: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  firstName: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDate()\n  @IsNotEmpty()\n  @IsDefined()\n  birthDate: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistoryDto[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exercise.html":{"url":"classes/Exercise.html","title":"class - Exercise","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exercise\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercise.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Exercise', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Image'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Info notes to exercise'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'External URL for Exercise Video'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercise.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type ExerciseDocument = Exercise & Document;\n\n@Schema({ collection: 'exercises', timestamps: true })\nexport class Exercise {\n  @ApiProperty({ description: 'Exercise Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Exercise', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'External URL for Exercise Image' })\n  @Prop({ type: String, required: false })\n  image?: string;\n\n  @ApiProperty({ description: 'External URL for Exercise Video' })\n  @Prop({ type: String, required: false })\n  video?: string;\n\n  @ApiProperty({ description: 'Info notes to exercise' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n}\n\nexport const ExerciseSchema = SchemaFactory.createForClass(Exercise);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExerciseDto.html":{"url":"classes/ExerciseDto.html","title":"class - ExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/dtos/exercise.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/dtos/exercise.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\n\nexport class ExerciseDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  notes?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExercisesController.html":{"url":"controllers/ExercisesController.html","title":"controller - ExercisesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exercises\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateExerciseDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/exercises/exercises.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Inject,\n  Get,\n  UseGuards,\n  Param,\n  NotFoundException,\n  Body,\n  Post,\n  Patch,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  EXERCISES_SERVICE,\n  IExercisesService,\n} from './interfaces/exercises.service.interface';\nimport { IExercisesController } from './interfaces/exercises.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { Exercise } from './exercise.model';\nimport { ExerciseDto, CreateExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { AccessTokenGuard } from '../auth/guard/access-token.guard';\n\n@Controller('exercises')\n@UseGuards(AccessTokenGuard)\n@ApiTags('exercises')\nexport class ExercisesController implements IExercisesController {\n  constructor(\n    @Inject(EXERCISES_SERVICE)\n    private readonly service: IExercisesService\n  ) {}\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Exercise] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Get('search')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async findByParams(@Query() params?: ParamsDto): Promise {\n    const exercise = await this.service.findByParams(params);\n    if (!exercise || exercise.length === 0) {\n      return;\n    }\n    return exercise;\n  }\n\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [ExerciseDto] })\n  async getById(@Param('id') id: string): Promise {\n    const exercise = await this.service.getById(id);\n    if (!exercise) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return exercise;\n  }\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [ExerciseDto] })\n  @ApiBody({ type: CreateExerciseDto })\n  async create(@Body() exercise: CreateExerciseDto): Promise {\n    return await this.service.create(exercise);\n  }\n\n  @Patch(':id/update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() exercise: ExerciseDto\n  ): Promise {\n    return await this.service.update(id, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExercisesModule.html":{"url":"modules/ExercisesModule.html","title":"module - ExercisesModule","body":"\n                   \n\n\n\n\n    Modules\n    ExercisesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/exercises/exercises.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ExercisesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExercisesService } from './exercises.service';\nimport { ExercisesController } from './exercises.controller';\nimport { Exercise, ExerciseSchema } from './exercise.model';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { EXERCISES_SERVICE } from './interfaces/exercises.service.interface';\nimport { EXERCISES_REPOSITORY } from './interfaces/exercises.repository.interface';\nimport { ExercisesRepository } from './exercises.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Exercise.name,\n        schema: ExerciseSchema,\n      },\n    ]),\n  ],\n  controllers: [ExercisesController],\n  providers: [\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n    { useClass: ExercisesRepository, provide: EXERCISES_REPOSITORY },\n  ],\n  exports: [EXERCISES_SERVICE, EXERCISES_REPOSITORY],\n})\nexport class ExercisesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesRepository.html":{"url":"injectables/ExercisesRepository.html","title":"injectable - ExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IExercisesRepository } from './interfaces/exercises.repository.interface';\nimport { Exercise, ExerciseDocument } from './exercise.model';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { ParamsDto } from '../shared/dtos/params.dto';\n\n@Injectable()\nexport class ExercisesRepository implements IExercisesRepository {\n  constructor(\n    @InjectModel(Exercise.name)\n    readonly model: Model\n  ) {}\n\n  async create(exercise: CreateExerciseDto): Promise {\n    return await this.model.create(exercise);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    await this.model.updateOne({ _id: id }, exercise);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesService.html":{"url":"injectables/ExercisesService.html","title":"injectable - ExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/exercises.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IExercisesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IExercisesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(exercise: CreateExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exercise\n                                    \n                                                CreateExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, exercise: ExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exercises/exercises.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exercise\n                                    \n                                                ExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('exercises')\n                    \n                \n                    \n                        \n                                Defined in src/modules/exercises/exercises.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  EXERCISES_REPOSITORY,\n  IExercisesRepository,\n} from './interfaces/exercises.repository.interface';\nimport { CreateExerciseDto, ExerciseDto } from './dtos/dtos';\nimport { mapExercise } from './utils/exercise.mapper';\nimport { IExercisesService } from './interfaces/exercises.service.interface';\nimport { validate } from 'class-validator';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\n\n@Injectable()\nexport class ExercisesService implements IExercisesService {\n  private readonly logger = new Logger('exercises');\n\n  constructor(\n    @Inject(EXERCISES_REPOSITORY)\n    private readonly repository: IExercisesRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let exercises = await this.repository.findByParams(parameters);\n      if (exercises && exercises.length > 0) {\n        return exercises.map((exe) => mapExercise(exe));\n      } else {\n        return (exercises = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid exercise params`);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const exercise = await this.repository.getById(id);\n      if (exercise != null || exercise != undefined) {\n        return mapExercise(exercise);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async create(exercise: CreateExerciseDto): Promise {\n    try {\n      const errors = await validate(exercise);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(exercise);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, exercise: ExerciseDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, exercise);\n      } else {\n        throw new NotFoundException(`Exercise id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update exercise id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthController.html":{"url":"interfaces/IAuthController.html","title":"interface - IAuthController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            logout\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logout:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { AuthDto, LoginDto } from '../dtos/dtos';\n\nexport const AUTH_CONTROLLER = 'AUTH_CONTROLLER';\n\nexport interface IAuthController {\n  login: (doc: LoginDto) => Promise;\n  logout: (request: Request) => Promise;\n  refreshToken: (data: AuthDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthRepository.html":{"url":"interfaces/IAuthRepository.html","title":"interface - IAuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            getByAccessToken\n                                        \n                                \n                                \n                                        \n                                            getByRefreshToken\n                                        \n                                \n                                \n                                        \n                                            saveNewAccessToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByAccessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByAccessToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByRefreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByRefreshToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        saveNewAccessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        saveNewAccessToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Auth } from '../auth.model';\nimport { AuthDto } from '../dtos/auth.dto';\n\nexport const AUTH_REPOSITORY = 'AUTH_REPOSITORY';\n\nexport interface IAuthRepository {\n  create: (auth: Auth) => Promise;\n  getByAccessToken: (token: string) => Promise;\n  getByRefreshToken: (token: string) => Promise;\n  saveNewAccessToken: (refreshToken: string, auth: AuthDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthService.html":{"url":"interfaces/IAuthService.html","title":"interface - IAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/auth.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            logout\n                                        \n                                \n                                \n                                        \n                                            refreshTokens\n                                        \n                                \n                                \n                                        \n                                            validateUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logout:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTokens:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validateUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validateUser:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserDto } from 'src/modules/users/dtos/dtos';\nimport { AuthDto } from '../dtos/auth.dto';\nimport { JwtPayload } from './jwt-payload.interface';\n\nexport const AUTH_SERVICE = 'AUTH_SERVICE';\n\nexport interface IAuthService {\n  login: (email: string, password: string) => Promise;\n  logout: (userId: string) => void;\n  refreshTokens: (data: any) => Promise;\n  validateUser: (email: string, password: string) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDefaultController.html":{"url":"interfaces/IDefaultController.html","title":"interface - IDefaultController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDefaultController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/interfaces/default.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByField\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByField\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByField:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDefaultController {\n  create: (doc: T) => Promise;\n  getAll: () => Promise;\n  getByField: (field: any) => Promise;\n  update: (id: string, doc: T) => Promise;\n  delete: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesController.html":{"url":"interfaces/IExercisesController.html","title":"interface - IExercisesController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\nimport { Exercise } from '../exercise.model';\n\nexport const EXERCISES_CONTROLLER = 'EXERCISES_CONTROLLER';\n\nexport interface IExercisesController {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesRepository.html":{"url":"interfaces/IExercisesRepository.html","title":"interface - IExercisesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_REPOSITORY = 'EXERCISES_REPOSITORY';\n\nexport interface IExercisesRepository {\n  create: (exercise: CreateExerciseDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExercisesService.html":{"url":"interfaces/IExercisesService.html","title":"interface - IExercisesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IExercisesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exercises/interfaces/exercises.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { CreateExerciseDto, ExerciseDto } from '../dtos/dtos';\n\nexport const EXERCISES_SERVICE = 'EXERCISES_SERVICE';\n\nexport interface IExercisesService {\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params: ParamsDto) => Promise;\n  create: (exercise: CreateExerciseDto) => Promise;\n  update: (id: string, exercise: ExerciseDto) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansController.html":{"url":"interfaces/IPlansController.html","title":"interface - IPlansController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\nimport { CreatePlanDto, PlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\nimport { ParamsDto } from 'src/modules/shared/dtos/params.dto';\n\nexport const PLANS_CONTROLLER = 'PLANS_CONTROLLER';\n\nexport interface IPlansController {\n  getAll: (request: Request) => Promise;\n  findByParams: (request: Request, params?: ParamsDto) => Promise;\n  getById: (id: string) => Promise;\n  create: (plan: CreatePlanDto, request: Request) => Promise;\n  update: (id: string, plan: PlanDto, request: Request) => Promise;\n  addOrUpdateTraining: (\n    id: string,\n    request: Request,\n    trainingData: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    id: string,\n    request: Request,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansRepository.html":{"url":"interfaces/IPlansRepository.html","title":"interface - IPlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            getPlanByExerciseId\n                                        \n                                \n                                \n                                        \n                                            savePlan\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getPlanByExerciseId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getPlanByExerciseId:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savePlan\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        savePlan:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { Plan } from '../plan.model';\n\nexport const PLANS_REPOSITORY = 'PLANS_REPOSITORY';\n\nexport interface IPlansRepository {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto) => Promise;\n  getPlanByExerciseId: (filter: any) => Promise;\n  savePlan: (plan: Plan) => Promise;\n  updateExerciseDoneStatus: (filter: any) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPlansService.html":{"url":"interfaces/IPlansService.html","title":"interface - IPlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/interfaces/plans.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addOrUpdateTraining\n                                        \n                                \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            findByParams\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateExerciseDoneStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addOrUpdateTraining\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addOrUpdateTraining:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        findByParams\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        findByParams:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateExerciseDoneStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateExerciseDoneStatus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ParamsDto } from 'src/modules/shared/dtos/params.dto';\nimport { PlanDto, CreatePlanDto } from '../dtos/dtos';\nimport { TrainingDto } from 'src/modules/shared/dtos/training.dto';\n\nexport const PLANS_SERVICE = 'PLANS_SERVICE';\n\nexport interface IPlansService {\n  getAll: (userId: string) => Promise;\n  getById: (id: string) => Promise;\n  findByParams: (params?: ParamsDto) => Promise;\n  create: (plan: CreatePlanDto) => Promise;\n  update: (id: string, plan: PlanDto, userId: string) => Promise;\n  addOrUpdateTraining: (\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ) => Promise;\n  updateExerciseDoneStatus: (\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersController.html":{"url":"interfaces/IUsersController.html","title":"interface - IUsersController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.controller.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\nimport { User } from '../user.model';\n\nexport const USERS_CONTROLLER = 'USERS_CONTROLLER';\n\nexport interface IUsersController {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersRepository.html":{"url":"interfaces/IUsersRepository.html","title":"interface - IUsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_REPOSITORY = 'USERS_REPOSITORY';\n\nexport interface IUsersRepository {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getById: (id: string) => Promise;\n  getByEmail: (email: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUsersService.html":{"url":"interfaces/IUsersService.html","title":"interface - IUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            create\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            disable\n                                        \n                                \n                                \n                                        \n                                            enable\n                                        \n                                \n                                \n                                        \n                                            getAll\n                                        \n                                \n                                \n                                        \n                                            getByEmail\n                                        \n                                \n                                \n                                        \n                                            getById\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                                \n                                        \n                                            updateShape\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        create\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        create:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getByEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getByEmail:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getById:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateShape\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateShape:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto, ShapeHistoryDto, UserDto } from '../dtos/dtos';\n\nexport const USERS_SERVICE = 'USERS_SERVICE';\n\nexport interface IUsersService {\n  create: (user: CreateUserDto) => Promise;\n  getAll: () => Promise;\n  getByEmail: (email: string) => Promise;\n  getById: (id: string) => Promise;\n  update: (id: string, user: UserDto) => Promise;\n  updateShape: (id: string, shape: ShapeHistoryDto) => Promise;\n  delete: (id: string) => Promise;\n  enable: (id: string) => Promise;\n  disable: (id: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  email: string;\n  sub: string;\n  iat: number;\n  exp: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/local.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { AUTH_SERVICE } from '../interfaces/auth.service.interface';\n\nexport const LOCAL_STRATEGY = 'LOCAL_STRATEGY';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(@Inject(AUTH_SERVICE) private authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(email: string, password: string) {\n    const user = await this.authService.validateUser(email, password);\n\n    if (!user) {\n      throw new UnauthorizedException(`Invalid Email and/or Password`);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParamsDto.html":{"url":"classes/ParamsDto.html","title":"class - ParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/params.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParamsDto {\n  name?: string;\n  focusMuscle?: string[];\n  userId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Plan.html":{"url":"classes/Plan.html","title":"class - Plan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Plan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plan.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Validity of plan'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Focus Muscle of Plan', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Id}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Plan Name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Existing Exercises in the Plan', type: undefined})@Prop({type: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id who created the plan'})@Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plan.model.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type PlanDocument = Plan & Document;\n\n@Schema({ collection: 'plans', timestamps: true })\nexport class Plan {\n  @ApiProperty({ description: 'Plan Id}' })\n  id: string;\n\n  @ApiProperty({ description: 'Plan Name' })\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @ApiProperty({ description: 'Focus Muscle of Plan', type: [String] })\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @ApiProperty({ description: 'Validity of plan' })\n  @Prop({ type: Date, required: true })\n  expiresIn?: Date;\n\n  @ApiProperty({ description: 'User Id who created the plan' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @ApiProperty({\n    description: 'Existing Exercises in the Plan',\n    type: [Training],\n  })\n  @Prop({ type: [TrainingSchema], required: false })\n  training?: Training[];\n}\n\nexport const PlanSchema = SchemaFactory.createForClass(Plan);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlanDto.html":{"url":"classes/PlanDto.html","title":"class - PlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/plan.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDate,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { Training } from 'src/modules/shared/models/training.model';\n\nexport class PlanDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  focusMuscle: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  userId: string;\n\n  @ApiProperty()\n  @IsArray()\n  @IsOptional()\n  training?: Training[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlansController.html":{"url":"controllers/PlansController.html","title":"controller - PlansController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlansController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                plans\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findByParams\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(id: string, request: Request, trainingData: TrainingDto[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/updatetraining')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingData\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreatePlanDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(request: Request, params?: ParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('search')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(id: string, request: Request, exerciseId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/doneexercise')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/plans/plans.controller.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Post,\n  Query,\n  UseGuards,\n  Patch,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport {\n  IPlansService,\n  PLANS_SERVICE,\n} from './interfaces/plans.service.interface';\nimport { Plan } from './plan.model';\nimport { CreatePlanDto, PlanDto } from './dtos/dtos';\nimport {\n  UNAUTHORIZED_401,\n  BAD_REQUEST_400,\n  NOT_FOUND_404,\n  SERVER_ERROR_500,\n  OK_200,\n  CREATED_201,\n} from '../shared/utils/http-response-status.utils';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { IPlansController } from './interfaces/plans.controller.interface';\nimport { AccessTokenGuard } from '../auth/guard/access-token.guard';\n\n@Controller('plans')\n@UseGuards(AccessTokenGuard)\n@ApiTags('plans')\nexport class PlansController implements IPlansController {\n  constructor(\n    @Inject(PLANS_SERVICE)\n    private readonly service: IPlansService\n  ) {}\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [Plan] })\n  async getAll(@Req() request: Request): Promise {\n    const userId = request.user?.id;\n    return await this.service.getAll(userId);\n  }\n\n  @Get('search')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async findByParams(\n    @Req() request: Request,\n    @Query() params?: ParamsDto\n  ): Promise {\n    const userId = request.user?.id;\n    params.userId = userId;\n    const plan = await this.service.findByParams(params);\n    if (!plan || plan.length === 0) {\n      return;\n    }\n    return plan;\n  }\n\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [PlanDto] })\n  async getById(@Param('id') id: string): Promise {\n    const plan = await this.service.getById(id);\n    if (!plan) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return plan;\n  }\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [PlanDto] })\n  @ApiBody({ type: CreatePlanDto })\n  async create(\n    @Body() plan: CreatePlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    plan.userId = userId;\n    return await this.service.create(plan);\n  }\n\n  @Patch(':id/update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(\n    @Param('id') id: string,\n    @Body() plan: PlanDto,\n    @Req() request: Request\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.update(id, plan, userId);\n  }\n\n  @Patch(':id/updatetraining')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async addOrUpdateTraining(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body() trainingData: TrainingDto[]\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.addOrUpdateTraining(id, userId, trainingData);\n  }\n\n  @Patch(':id/doneexercise')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateExerciseDoneStatus(\n    @Param('id') id: string,\n    @Req() request: Request,\n    @Body('exerciseId') exerciseId: string\n  ): Promise {\n    const userId = request.user?.id;\n    return await this.service.updateExerciseDoneStatus(id, userId, exerciseId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlansModule.html":{"url":"modules/PlansModule.html","title":"module - PlansModule","body":"\n                   \n\n\n\n\n    Modules\n    PlansModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlansModule\n\n\n\ncluster_PlansModule_imports\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/plans/plans.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            PlansController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExercisesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Plan, PlanSchema } from './plan.model';\nimport { PlansController } from './plans.controller';\nimport { PlansService } from './plans.service';\nimport { PlansRepository } from './plans.repository';\nimport { PLANS_SERVICE } from './interfaces/plans.service.interface';\nimport { PLANS_REPOSITORY } from './interfaces/plans.repository.interface';\nimport { ExercisesModule } from '../exercises/exercises.module';\nimport { ExercisesService } from '../exercises/exercises.service';\nimport { EXERCISES_SERVICE } from '../exercises/interfaces/exercises.service.interface';\nimport { SharedModule } from '../shared/shared.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Plan.name,\n        schema: PlanSchema,\n      },\n    ]),\n    ExercisesModule,\n    SharedModule,\n  ],\n  controllers: [PlansController],\n  providers: [\n    { useClass: PlansService, provide: PLANS_SERVICE },\n    { useClass: PlansRepository, provide: PLANS_REPOSITORY },\n    { useClass: ExercisesService, provide: EXERCISES_SERVICE },\n  ],\n})\nexport class PlansModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansRepository.html":{"url":"injectables/PlansRepository.html","title":"injectable - PlansRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addExercise\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPlanByExerciseId\n                            \n                            \n                                    Async\n                                savePlan\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    addExercise(planId: string, training: TrainingDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    training\n                                    \n                                                TrainingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlanByExerciseId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanByExerciseId(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        savePlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    savePlan(plan: Plan)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                Plan\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.repository.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectModel } from '@nestjs/mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Plan, PlanDocument } from './plan.model';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { IPlansRepository } from './interfaces/plans.repository.interface';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { TrainingDto } from '../shared/dtos/training.dto';\nimport { exerciseDataPipeline } from './pipelines/exercise-data.pipeline';\n\n@Injectable()\nexport class PlansRepository implements IPlansRepository {\n  constructor(\n    @InjectModel(Plan.name)\n    readonly model: Model\n  ) {}\n\n  async getAll(userId: string): Promise {\n    const pipeline = exerciseDataPipeline('userId', userId);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result;\n  }\n\n  async getById(id: string): Promise {\n    const pipeline = exerciseDataPipeline('_id', id);\n    const result = await this.model\n      .aggregate(pipeline)\n      .allowDiskUse(false);\n    return result[0];\n  }\n\n  async findByParams(params: ParamsDto): Promise {\n    return await this.model.find(params);\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    return await this.model.create(plan);\n  }\n\n  async update(id: string, plan: PlanDto): Promise {\n    await this.model.updateOne({ _id: id }, plan);\n  }\n\n  async savePlan(plan: Plan): Promise {\n    return this.model.findByIdAndUpdate(plan.id, plan, { new: true });\n  }\n\n  async getPlanByExerciseId(filter: any): Promise {\n    return await this.model.findOne(filter);\n  }\n\n  async addExercise(\n    planId: string,\n    training: TrainingDto,\n    userId: string\n  ): Promise {\n    await this.model.updateOne({\n      $and: [\n        {\n          _id: planId,\n          userId: userId,\n        },\n      ],\n      $push: {\n        training: training,\n      },\n    });\n  }\n\n  async updateExerciseDoneStatus(filter: any): Promise {\n    await this.model.updateOne(filter, {\n      $set: {\n        'training.$.done': true,\n      },\n    });\n  }\n\n  //removeExercise()\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlansService.html":{"url":"injectables/PlansService.html","title":"injectable - PlansService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlansService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/plans.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addOrUpdateTraining\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByParams\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExerciseDoneStatus\n                            \n                            \n                                    Private\n                                updateTraining\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IPlansRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/plans/plans.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IPlansRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addOrUpdateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    addOrUpdateTraining(planId: string, userId: string, trainingDto: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingDto\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(plan: CreatePlanDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plan\n                                    \n                                                CreatePlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByParams\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByParams(params?: ParamsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ParamsDto\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, plan: PlanDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plan\n                                    \n                                                PlanDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExerciseDoneStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExerciseDoneStatus(planId: string, userId: string, exerciseId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    planId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exerciseId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTraining(existingTraining: TrainingDto[], updateTraining: TrainingDto[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/plans/plans.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    existingTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTraining\n                                    \n                                            TrainingDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Training[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('PlansService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/plans.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { IPlansService } from './interfaces/plans.service.interface';\nimport {\n  IPlansRepository,\n  PLANS_REPOSITORY,\n} from './interfaces/plans.repository.interface';\nimport { PlanDto, CreatePlanDto } from './dtos/dtos';\nimport { mapPlan } from './utils/plan.mapper';\nimport { ParamsDto } from '../shared/dtos/params.dto';\nimport { buildParams } from '../shared/utils/build-params.utils';\nimport { Training } from '../shared/models/training.model';\nimport { TrainingDto } from '../shared/dtos/training.dto';\n\n@Injectable()\nexport class PlansService implements IPlansService {\n  private readonly logger = new Logger('PlansService');\n\n  constructor(\n    @Inject(PLANS_REPOSITORY)\n    private readonly repository: IPlansRepository\n  ) {}\n\n  async getAll(userId: string): Promise {\n    try {\n      return await this.repository.getAll(userId);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const plan = await this.repository.getById(id);\n      if (plan != null || plan !== undefined) {\n        return mapPlan(plan);\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async findByParams(params?: ParamsDto): Promise {\n    try {\n      const parameters = buildParams(params);\n      let plans = await this.repository.findByParams(parameters);\n      if (plans && plans.length > 0) {\n        return plans.map((item) => mapPlan(item));\n      } else {\n        return (plans = []);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid plan params`);\n    }\n  }\n\n  async create(plan: CreatePlanDto): Promise {\n    try {\n      const errors = await validate(plan);\n      if (errors.length > 0) {\n        throw new BadRequestException(errors);\n      }\n      return await this.repository.create(plan);\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, plan: PlanDto, userId: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined && result.userId.toString() === userId) {\n        return await this.repository.update(id, plan);\n      } else {\n        throw new NotFoundException(\n          `Plan id ${id} not found or does not belongs to the user ${userId}`\n        );\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${id} failed`);\n    }\n  }\n\n  async addOrUpdateTraining(\n    planId: string,\n    userId: string,\n    trainingDto: TrainingDto[]\n  ): Promise {\n    try {\n      const plan = await this.repository.getById(planId);\n      if (!plan || plan.userId.toString() !== userId) {\n        throw new NotFoundException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const updatedTraining = this.updateTraining(plan.training, trainingDto);\n      plan.training = updatedTraining;\n\n      return this.repository.savePlan(plan);\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update plan id ${planId} failed`);\n    }\n  }\n\n  private updateTraining(\n    existingTraining: TrainingDto[],\n    updateTraining: TrainingDto[]\n  ): Training[] {\n    const alteredTraining: TrainingDto[] = [];\n\n    for (const training of updateTraining) {\n      const existingTrainingIndex = existingTraining.findIndex(\n        (t) => t.exerciseId.toString() === training.exerciseId\n      );\n\n      if (existingTrainingIndex !== -1) {\n        existingTraining[existingTrainingIndex] = {\n          id: training.id,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        };\n      } else {\n        alteredTraining.push({\n          id: undefined,\n          exerciseId: training.exerciseId,\n          series: training.series,\n          repetitions: training.repetitions,\n          load: training.load,\n          notes: training.notes,\n          done: training.done,\n        });\n      }\n    }\n\n    return [...existingTraining, ...alteredTraining];\n  }\n\n  async updateExerciseDoneStatus(\n    planId: string,\n    userId: string,\n    exerciseId: string\n  ): Promise {\n    try {\n      const filter = {\n        _id: planId,\n        userId: userId,\n        training: {\n          $elemMatch: {\n            exerciseId: exerciseId,\n          },\n        },\n      };\n\n      const plan = await this.repository.getById(planId);\n\n      if (!plan) {\n        throw new BadRequestException(\n          `Plan id ${planId} not found or does not belongs to the user ${userId}`\n        );\n      }\n\n      const exerciseExists = await this.repository.getPlanByExerciseId(filter);\n\n      if (!exerciseExists) {\n        throw new BadRequestException(\n          `Exercise id ${exerciseId} not found or plan does not belongs to the current user`\n        );\n      }\n\n      for (const training of plan.training) {\n        if (training.exerciseId.toString() === exerciseId) {\n          await this.repository.updateExerciseDoneStatus(filter);\n        }\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(\n        `Update status exercise in plan ${planId} failed`\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshToken.html":{"url":"classes/RefreshToken.html","title":"class - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/refresh-token.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token expires in'})@Prop({type: Number, require: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/refresh-token.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refresh token'})@Prop({type: String, require: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/refresh-token.model.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Schema({ _id: false })\nexport class RefreshToken {\n  @ApiProperty({ description: 'Refresh token' })\n  @Prop({ type: String, require: true })\n  refreshToken: string;\n\n  @ApiProperty({ description: 'Refresh token expires in' })\n  @Prop({ type: Number, require: true })\n  expiresIn: number;\n}\n\nexport type RefreshTokenDocument = RefreshToken & Document;\nexport const RefreshTokenSchema = SchemaFactory.createForClass(RefreshToken);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expiresIn\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/refresh-token.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/refresh-token.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RefreshTokenDto {\n  refreshToken: string;\n  expiresIn: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guard/refresh-token.guard.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guard/refresh-token.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshTokenGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenStrategy.html":{"url":"injectables/RefreshTokenStrategy.html","title":"injectable - RefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategy/refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategy/refresh-token.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategy/refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ForbiddenException, Inject, Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../auth.service';\nimport { AUTH_SERVICE } from '../interfaces/auth.service.interface';\n\nexport const REFRESH_TOKEN_STRATEGY = 'REFRESH_TOKEN_STRATEGY';\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh'\n) {\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    private readonly configService: ConfigService\n  ) {\n    super({\n      secretOrKey: configService.get('JWT_REFRESH_SECRET'),\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      passReqToCallback: true,\n    });\n  }\n  async validate(req: Request, payload: JwtPayload) {\n    const refreshToken = req\n      ?.get('authorization')\n      ?.replace('Bearer', '')\n      .trim();\n\n    if (!refreshToken) throw new ForbiddenException('Refresh token malformed');\n\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Routine.html":{"url":"classes/Routine.html","title":"class - Routine","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Routine\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routine.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                focusMuscle\n                            \n                            \n                                    \n                                frequency\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                training\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Training[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true, ref: 'Users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/routines/routine.model.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose from 'mongoose';\nimport { Training, TrainingSchema } from '../shared/models/training.model';\n\nexport type RoutineDocument = Routine & Document;\n\n@Schema({ collection: 'routines', timestamps: true })\nexport class Routine {\n  id: string;\n\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @Prop({ type: [String], required: true })\n  focusMuscle: string[];\n\n  @Prop({ type: String, required: true })\n  frequency: string;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Users',\n  })\n  userId: string;\n\n  @Prop({ type: [TrainingSchema], required: true })\n  training: Training[];\n}\n\nexport const RoutineSchema = SchemaFactory.createForClass(Routine);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoutinesController.html":{"url":"controllers/RoutinesController.html","title":"controller - RoutinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoutinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        /*\nhttps://docs.nestjs.com/controllers#controllers\n*/\n\nimport { Controller } from '@nestjs/common';\n\n@Controller()\nexport class RoutinesController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoutinesModule.html":{"url":"modules/RoutinesModule.html","title":"module - RoutinesModule","body":"\n                   \n\n\n\n\n    Modules\n    RoutinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nRoutinesService\n\nRoutinesService\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/routines/routines.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoutinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoutinesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoutinesService } from './routines.service';\nimport { RoutinesController } from './routines.controller';\n\n@Module({\n  imports: [],\n  controllers: [RoutinesController],\n  providers: [RoutinesService],\n})\nexport class RoutinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesRepository.html":{"url":"injectables/RoutinesRepository.html","title":"injectable - RoutinesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.repository.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesRepository {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoutinesService.html":{"url":"injectables/RoutinesService.html","title":"injectable - RoutinesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoutinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/routines/routines.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoutinesService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistory.html":{"url":"classes/ShapeHistory.html","title":"class - ShapeHistory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/shape-history.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User age'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'According to registered User data, BMI calculation'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User height'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User weight'})@Prop({type: Number, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/shape-history.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type ShapeHistoryDocument = ShapeHistory & Document;\n\n@Schema({ _id: false, timestamps: true })\nexport class ShapeHistory {\n  @ApiProperty({ description: 'User age' })\n  @Prop({ type: Date, required: true })\n  age: Date;\n\n  @ApiProperty({ description: 'User height' })\n  @Prop({ type: Number, required: true })\n  height: number;\n\n  @ApiProperty({ description: 'User weight' })\n  @Prop({ type: Number, required: true })\n  weight: number;\n\n  @ApiProperty({\n    description: 'According to registered User data, BMI calculation',\n  })\n  @Prop({ type: Number, required: true })\n  bmi: number;\n}\n\nexport const ShapeHistorySchema = SchemaFactory.createForClass(ShapeHistory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShapeHistoryDto.html":{"url":"classes/ShapeHistoryDto.html","title":"class - ShapeHistoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShapeHistoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/shape-history.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                bmi\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                height\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDate()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        bmi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/shape-history.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsDefined, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class ShapeHistoryDto {\n  @ApiProperty()\n  @IsDate()\n  @IsDefined()\n  @IsNotEmpty()\n  age: Date;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  height: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  weight: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsDefined()\n  @IsNotEmpty()\n  bmi: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Training, TrainingSchema } from './models/training.model';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Training.name,\n        schema: TrainingSchema,\n      },\n    ]),\n  ],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Training.html":{"url":"classes/Training.html","title":"class - Training","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Training\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/models/training.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Control Done'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Id'})@Prop({type: undefined, required: true, ref: 'Exercises'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Training Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise load/weight'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Notes'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Repetitions'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exercise Series'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/models/training.model.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport mongoose from 'mongoose';\n\nexport type TrainingDocument = Training & Document;\n\n@Schema({ timestamps: true })\nexport class Training {\n  @ApiProperty({ description: 'Training Id' })\n  id: string;\n\n  @ApiProperty({ description: 'Exercise Id' })\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    required: true,\n    ref: 'Exercises',\n  })\n  exerciseId: string;\n\n  @ApiProperty({ description: 'Exercise Series' })\n  @Prop({ type: String, required: true })\n  series: string;\n\n  @ApiProperty({ description: 'Exercise Repetitions' })\n  @Prop({ type: String, required: true })\n  repetitions: string;\n\n  @ApiProperty({ description: 'Exercise load/weight' })\n  @Prop({ type: String, required: true })\n  load: string;\n\n  @ApiProperty({ description: 'Exercise Notes' })\n  @Prop({ type: String, required: false })\n  notes?: string;\n\n  @ApiProperty({ description: 'Exercise Control Done' })\n  @Prop({ type: Boolean, required: true })\n  done: boolean;\n}\n\nexport const TrainingSchema = SchemaFactory.createForClass(Training);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingDto.html":{"url":"classes/TrainingDto.html","title":"class - TrainingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                series\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()@IsDefined()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/training.dto.ts:70\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n} from 'class-validator';\nexport class TrainingDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  exerciseId: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  series: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  repetitions: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  load: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsBoolean()\n  done: boolean;\n\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  @IsDefined()\n  name?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  image?;\n\n  @ApiProperty()\n  @IsString()\n  @IsUrl()\n  @IsOptional()\n  video?;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrainingUpdateDto.html":{"url":"classes/TrainingUpdateDto.html","title":"class - TrainingUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrainingUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/shared/dtos/update-training.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                done\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                exerciseId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                load\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                notes\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                repetitions\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        exerciseId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        load\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        repetitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        series\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/shared/dtos/update-training.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsDefined,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class TrainingUpdateDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  exerciseId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  series?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  repetitions?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  load?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  notes?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsBoolean()\n  done?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePlanDto.html":{"url":"classes/UpdatePlanDto.html","title":"class - UpdatePlanDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePlanDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/plans/dtos/update-plan.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                expiresIn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                focusMuscle\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                training\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        expiresIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        focusMuscle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        training\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [TrainingUpdateDto]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/plans/dtos/update-plan.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsString,\n  IsArray,\n  IsMongoId,\n  IsOptional,\n  IsDate,\n} from 'class-validator';\nimport { TrainingUpdateDto } from 'src/modules/shared/dtos/update-training.dto';\n\nexport class UpdatePlanDto {\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  id?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  focusMuscle?: string[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsDate()\n  expiresIn?: Date;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsMongoId()\n  @IsString()\n  userId?: string;\n\n  @ApiProperty()\n  @IsOptional()\n  @IsArray()\n  training?: [TrainingUpdateDto];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User activation status'})@Prop({type: Boolean, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User avatar'})@Prop({type: String, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User birth date'})@Prop({type: Date, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User sur name'})@Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password, it must be 5 characters or more'})@Prop({type: String, required: true, minlength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User shape history data', type: undefined})@Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { ShapeHistory, ShapeHistorySchema } from './shape-history';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport type UserDocument = User & Document;\n\n@Schema({ collection: 'users', timestamps: true })\nexport class User {\n  @ApiProperty({ description: 'User Id' })\n  id: string;\n\n  @ApiProperty({ description: 'User email' })\n  @Prop({ type: String, required: true })\n  email: string;\n\n  @ApiProperty({\n    description: 'User password, it must be 5 characters or more',\n  })\n  @Prop({ type: String, required: true, minlength: 6 })\n  password: string;\n\n  @ApiProperty({ description: 'User first name' })\n  @Prop({ type: String, required: true })\n  firstName: string;\n\n  @ApiProperty({ description: 'User sur name' })\n  @Prop({ type: String, required: true })\n  lastName: string;\n\n  @ApiProperty({ description: 'User birth date' })\n  @Prop({ type: Date, required: true })\n  birthDate: Date;\n\n  @ApiProperty({ description: 'User activation status' })\n  @Prop({ type: Boolean, required: true })\n  active: boolean;\n\n  @ApiProperty({ description: 'User shape history data', type: [ShapeHistory] })\n  @Prop({ type: [ShapeHistorySchema], required: true })\n  shape: ShapeHistory[];\n\n  @ApiProperty({ description: 'User avatar' })\n  @Prop({ type: String, required: false })\n  avatar?: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                active\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                shape\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsMongoId()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        shape\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ShapeHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsDefined()@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsBoolean,\n  IsDate,\n  IsDefined,\n  IsEmail,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ShapeHistory } from '../shape-history';\n\nexport class UserDto {\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsMongoId()\n  @IsString()\n  id: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsDate()\n  birthDate: Date;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsBoolean()\n  active: boolean;\n\n  @ApiProperty()\n  @IsDefined()\n  @IsArray()\n  @ArrayNotEmpty()\n  shape: ShapeHistory[];\n\n  @ApiProperty()\n  @IsOptional()\n  @IsString()\n  avatar?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                disable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                enable\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getByEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: CREATED_201, type: undefined})@ApiBody({type: CreateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/disable')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/enable')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200, type: String})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get()@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get('email')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Get(':id')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiInternalServerErrorResponse({description: SERVER_ERROR_500})@ApiOkResponse({description: OK_200, type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenGuard)@Patch(':id/shape-update')@ApiBearerAuth()@ApiUnauthorizedResponse({description: UNAUTHORIZED_401})@ApiBadRequestResponse({description: BAD_REQUEST_400})@ApiNotFoundResponse({description: NOT_FOUND_404})@ApiOkResponse({description: OK_200})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  NotFoundException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiInternalServerErrorResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n  IUsersService,\n  USERS_SERVICE,\n} from './interfaces/users.service.interface';\nimport { IUsersController } from './interfaces/users.controller.interface';\nimport {\n  BAD_REQUEST_400,\n  CREATED_201,\n  NOT_FOUND_404,\n  OK_200,\n  SERVER_ERROR_500,\n  UNAUTHORIZED_401,\n} from '../shared/utils/http-response-status.utils';\nimport { User } from './user.model';\nimport { ShapeHistoryDto, UserDto, CreateUserDto } from './dtos/dtos';\nimport { AccessTokenGuard } from '../auth/guard/access-token.guard';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController implements IUsersController {\n  constructor(\n    @Inject(USERS_SERVICE)\n    private readonly service: IUsersService\n  ) {}\n\n  @UseGuards(AccessTokenGuard)\n  @Get()\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [User] })\n  async getAll(): Promise {\n    return await this.service.getAll();\n  }\n\n  @Post()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: CREATED_201, type: [UserDto] })\n  @ApiBody({ type: CreateUserDto })\n  async create(@Body() user: CreateUserDto): Promise {\n    return await this.service.create(user);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get('email')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getByEmail(@Query('email') email: string): Promise {\n    const user = await this.service.getByEmail(email);\n    if (!user) {\n      throw new NotFoundException(`Email ${email} not found`);\n    }\n    return user;\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Get(':id')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiInternalServerErrorResponse({ description: SERVER_ERROR_500 })\n  @ApiOkResponse({ description: OK_200, type: [UserDto] })\n  async getById(@Param('id') id: string): Promise {\n    const user = await this.service.getById(id);\n    if (!user) {\n      throw new NotFoundException(`Id ${id} not found`);\n    }\n    return user;\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async update(@Param('id') id: string, @Body() user: UserDto): Promise {\n    return await this.service.update(id, user);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/shape-update')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200 })\n  async updateShape(\n    @Param('id') id: string,\n    @Body() shape: ShapeHistoryDto\n  ): Promise {\n    return await this.service.updateShape(id, shape);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/enable')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async enable(@Param('id') id: string): Promise {\n    return await this.service.enable(id);\n  }\n\n  @UseGuards(AccessTokenGuard)\n  @Patch(':id/disable')\n  @ApiBearerAuth()\n  @ApiUnauthorizedResponse({ description: UNAUTHORIZED_401 })\n  @ApiBadRequestResponse({ description: BAD_REQUEST_400 })\n  @ApiNotFoundResponse({ description: NOT_FOUND_404 })\n  @ApiOkResponse({ description: OK_200, type: String })\n  async disable(@Param('id') id: string): Promise {\n    return await this.service.disable(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './user.model';\nimport { USERS_SERVICE } from './interfaces/users.service.interface';\nimport { USERS_REPOSITORY } from './interfaces/users.repository.interface';\nimport { UsersRepository } from './users.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [\n    { useClass: UsersService, provide: USERS_SERVICE },\n    { useClass: UsersRepository, provide: USERS_REPOSITORY },\n  ],\n  exports: [USERS_SERVICE, USERS_REPOSITORY],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './user.model';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { IUsersRepository } from './interfaces/users.repository.interface';\n\n@Injectable()\nexport class UsersRepository implements IUsersRepository {\n  constructor(\n    @InjectModel(User.name)\n    readonly model: Model\n  ) {}\n\n  async create(user: CreateUserDto): Promise {\n    return await this.model.create(user);\n  }\n\n  async getAll(): Promise {\n    return await this.model.find();\n  }\n\n  async getById(id: string): Promise {\n    return await this.model.findById(id);\n  }\n\n  async getByEmail(email: string): Promise {\n    const result = await this.model.findOne({ email: email });\n    return result ? result : null;\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    await this.model.updateOne({ _id: id }, user);\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    await this.model.updateOne(\n      { _id: id },\n      {\n        $push: {\n          shape: {\n            age: shape.age,\n            height: shape.height,\n            weight: shape.weight,\n            bmi: shape.bmi,\n          },\n        },\n      }\n    );\n  }\n\n  async delete(id: string): Promise {\n    await this.model.deleteOne({ _id: id });\n  }\n\n  async enable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: true });\n  }\n\n  async disable(id: string): Promise {\n    await this.model.updateOne({ _id: id }, { active: false });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                disable\n                            \n                            \n                                    Async\n                                enable\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                hashedPassword\n                            \n                            \n                                transformString\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateShape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IUsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IUsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disable\n                        \n                    \n                \n            \n            \n                \n                    \n                    disable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enable\n                        \n                    \n                \n            \n            \n                \n                    \n                    enable(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        hashedPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashedPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transformString\n                        \n                    \n                \n            \n            \n                \ntransformString(arr: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShape\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShape(id: string, shape: ShapeHistoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    shape\n                                    \n                                                ShapeHistoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('UsersService')\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  Logger,\n  NotFoundException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport {\n  IUsersRepository,\n  USERS_REPOSITORY,\n} from './interfaces/users.repository.interface';\nimport { CreateUserDto, ShapeHistoryDto, UserDto } from './dtos/dtos';\nimport { isEmail, validate } from 'class-validator';\nimport { IUsersService } from './interfaces/users.service.interface';\nimport { mapUser } from './utils/user.mapper';\n\n@Injectable()\nexport class UsersService implements IUsersService {\n  private readonly logger = new Logger('UsersService');\n\n  constructor(\n    @Inject(USERS_REPOSITORY)\n    private readonly repository: IUsersRepository\n  ) {}\n\n  async getAll(): Promise {\n    try {\n      return await this.repository.getAll();\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async getById(id: string): Promise {\n    try {\n      const user = await this.repository.getById(id);\n      if (user != null || user != undefined) {\n        const userDto = mapUser(user);\n        return userDto;\n      } else {\n        throw new NotFoundException(`Id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid id ${id}`);\n    }\n  }\n\n  async getByEmail(email: string): Promise {\n    try {\n      const valid = isEmail(email);\n      if (valid) {\n        const user = await this.repository.getByEmail(email);\n        if (user != null || user != undefined) {\n          return mapUser(user);\n        }\n      } else {\n        throw new NotFoundException(`Email ${email} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Invalid email ${email}`);\n    }\n  }\n\n  async hashedPassword(password: string): Promise {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async create(user: CreateUserDto): Promise {\n    try {\n      validate(user).then((errors) => {\n        if (errors.length > 0) {\n          throw new BadRequestException(errors);\n        }\n      });\n      const existis = await this.getByEmail(user.email);\n      if (!existis) {\n        user.password = await this.hashedPassword(user.password);\n        return await this.repository.create(user);\n      } else {\n        throw new BadRequestException(\n          `User with email ${user.email} already exists`\n        );\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        this.logger.error(error);\n        throw new BadRequestException(error.message);\n      }\n    }\n  }\n\n  async update(id: string, user: UserDto): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.update(id, user);\n      } else {\n        throw new NotFoundException(`User id ${id} not found`);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Update user id ${id} failed`);\n    }\n  }\n\n  transformString(arr: any): string {\n    const mergedProps: Record = {};\n\n    arr.forEach((obj) => {\n      for (const prop in obj) {\n        if (mergedProps[prop]) {\n          mergedProps[prop].push(obj[prop]);\n        } else {\n          mergedProps[prop] = [obj[prop]];\n        }\n      }\n    });\n\n    const result = Object.entries(mergedProps).map(\n      ([prop, messages]) => `${prop}: ${messages.join(', ')}`\n    );\n\n    return result.join('\\n');\n  }\n\n  async updateShape(id: string, shape: ShapeHistoryDto): Promise {\n    const shapeHistoryDto = new ShapeHistoryDto();\n    shapeHistoryDto.age = new Date(shape.age);\n    shapeHistoryDto.height = shape.height;\n    shapeHistoryDto.weight = shape.weight;\n    shapeHistoryDto.bmi = shape.bmi;\n\n    const validObj = validate(shapeHistoryDto)\n      .then((errors) => {\n        if (errors.length > 0) {\n          const arr = errors.map((error) => error.constraints);\n          const str = this.transformString(arr);\n          this.logger.error(str);\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .catch((error) => {\n        this.logger.error(error);\n        throw new BadRequestException(error);\n      });\n\n    if ((await validObj) === true) {\n      const user = this.getById(id);\n      if (user !== undefined) {\n        await this.repository.updateShape(id, shape);\n      }\n    } else {\n      throw new BadRequestException();\n    }\n  }\n\n  async delete(id: string): Promise {\n    try {\n      const result = await this.repository.getById(id);\n      if (result !== undefined) {\n        return await this.repository.delete(id);\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Delete user id ${id} failed`);\n    }\n  }\n\n  async enable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.enable(id);\n        return `${id} enabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Enable user id ${id} failed`);\n    }\n  }\n\n  async disable(id: string): Promise {\n    try {\n      const user = await this.getById(id);\n      if (user !== undefined) {\n        await this.repository.disable(id);\n        return `${id} disabled`;\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(`Disable user id ${id} failed`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.model.ts\n            \n            variable\n            AuthSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.repository.ts\n            \n            injectable\n            AuthRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/auth/decorator/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/decorator/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/access-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guard/refresh-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            interface\n            IAuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.controller.interface.ts\n            \n            variable\n            AUTH_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            interface\n            IAuthRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.repository.interface.ts\n            \n            variable\n            AUTH_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            interface\n            IAuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/auth.service.interface.ts\n            \n            variable\n            AUTH_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/refresh-token.model.ts\n            \n            class\n            RefreshToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/refresh-token.model.ts\n            \n            variable\n            RefreshTokenSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/access-token.strategy.ts\n            \n            variable\n            ACCESS_TOKEN_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/local.strategy.ts\n            \n            variable\n            LOCAL_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/refresh-token.strategy.ts\n            \n            injectable\n            RefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategy/refresh-token.strategy.ts\n            \n            variable\n            REFRESH_TOKEN_STRATEGY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/utils/credentials.utils.ts\n            \n            variable\n            comparePasswords\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/create-exercises.dto.ts\n            \n            class\n            CreateExerciseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/dtos/exercise.dto.ts\n            \n            class\n            ExerciseDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            class\n            Exercise\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercise.model.ts\n            \n            variable\n            ExerciseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.controller.ts\n            \n            controller\n            ExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.repository.ts\n            \n            injectable\n            ExercisesRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/exercises/exercises.service.ts\n            \n            injectable\n            ExercisesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            interface\n            IExercisesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.controller.interface.ts\n            \n            variable\n            EXERCISES_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            interface\n            IExercisesRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.repository.interface.ts\n            \n            variable\n            EXERCISES_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            interface\n            IExercisesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exercises/interfaces/exercises.service.interface.ts\n            \n            variable\n            EXERCISES_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exercises/utils/exercise.mapper.ts\n            \n            variable\n            mapExercise\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/create-plan.dto.ts\n            \n            class\n            CreatePlanDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/plan.dto.ts\n            \n            class\n            PlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/dtos/update-plan.dto.ts\n            \n            class\n            UpdatePlanDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            interface\n            IPlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.controller.interface.ts\n            \n            variable\n            PLANS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            interface\n            IPlansRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.repository.interface.ts\n            \n            variable\n            PLANS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            interface\n            IPlansService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/interfaces/plans.service.interface.ts\n            \n            variable\n            PLANS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/pipelines/exercise-data.pipeline.ts\n            \n            variable\n            exerciseDataPipeline\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            class\n            Plan\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/plans/plan.model.ts\n            \n            variable\n            PlanSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.controller.ts\n            \n            controller\n            PlansController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.repository.ts\n            \n            injectable\n            PlansRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/plans.service.ts\n            \n            injectable\n            PlansService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/plans/utils/plan.mapper.ts\n            \n            variable\n            mapPlan\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            class\n            Routine\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/routines/routine.model.ts\n            \n            variable\n            RoutineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.controller.ts\n            \n            controller\n            RoutinesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.repository.ts\n            \n            injectable\n            RoutinesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/routines/routines.service.ts\n            \n            injectable\n            RoutinesService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/params.dto.ts\n            \n            class\n            ParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/training.dto.ts\n            \n            class\n            TrainingDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/shared/dtos/update-training.dto.ts\n            \n            class\n            TrainingUpdateDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/interfaces/default.controller.interface.ts\n            \n            interface\n            IDefaultController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            class\n            Training\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/shared/models/training.model.ts\n            \n            variable\n            TrainingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/build-params.utils.ts\n            \n            variable\n            buildParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            BAD_REQUEST_400\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            CREATED_201\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NO_CONTENT_204\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            NOT_FOUND_404\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            OK_200\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            SERVER_ERROR_500\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/http-response-status.utils.ts\n            \n            variable\n            UNAUTHORIZED_401\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/shared/utils/training.mapper.ts\n            \n            variable\n            mapTrainings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/shape-history.dto.ts\n            \n            class\n            ShapeHistoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            interface\n            IUsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.controller.interface.ts\n            \n            variable\n            USERS_CONTROLLER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            interface\n            IUsersRepository\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.repository.interface.ts\n            \n            variable\n            USERS_REPOSITORY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            interface\n            IUsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.service.interface.ts\n            \n            variable\n            USERS_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            class\n            ShapeHistory\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/shape-history.ts\n            \n            variable\n            ShapeHistorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/users/utils/user.mapper.ts\n            \n            variable\n            mapUser\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.4.0\n        \n            @nestjs/config : ^2.3.2\n        \n            @nestjs/core : ^9.4.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.4.0\n        \n            @nestjs/serve-static : ^4.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-validator : ^0.14.0\n        \n            dotenv : ^16.1.0\n        \n            jsonwebtoken : ^9.0.0\n        \n            mongoose : ^7.1.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescrição\nAPI/Back-end da aplicação To-do Gym.\nUma aplicação web para controle de treinos, rotinas, evolução física e musculação na academia, além de demonstração da execução de exercícios físicos.\nDesenvolvida com TypeScript em NodeJS com o framework Nest.\nModelagem de Banco de Dados\n\n  \n\n\nAcesse Draw IO\nFuncionalidades\n\n  \n\n\nAcesse Miro\nDocumentação Modular Estática\nDocumentação de estrutura da aplicação gerada com Compodoc\nDocumentação de Endpoints com Swagger\nhttps://todo-gym-api.onrender.com/swagger/\nTecnologias Utilizadas\nLinguagem: TypeScript\nBack-end: NodeJS\nFramework Node: NestJS\nBanco de Dados: MongoDB\nODM Mongoose\nDocumentação API Rest: Swagger\nDocumentação Modular Estática: Compodoc\nDiagramação Banco de Dados: Draw IO\nDesenho de Fluxos: Miro\nInstalação\nnpm installPara executar o projeto\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTestes\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSobre mim\n\nAuthor - Flávio Oliveira\nPortfólio - https://flaviosoliver-portfolio.vercel.app/\nLinkedIn - https://www.linkedin.com/in/flaviosoliver/\nEmail - flavsoliver@gmail.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExercisesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlansModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoutinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RoutinesModule\n\n\n\ncluster_RoutinesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nExercisesModule\n\nExercisesModule\n\n\n\nPlansModule\n\nPlansModule\n\nPlansModule -->\n\nExercisesModule->PlansModule\n\n\n\nAppModule -->\n\nExercisesModule->AppModule\n\n\n\nAppModule -->\n\nPlansModule->AppModule\n\n\n\n\n\nRoutinesModule\n\nRoutinesModule\n\nAppModule -->\n\nRoutinesModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPlansModule -->\n\nSharedModule->PlansModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRoutinesService\n\nRoutinesService\n\nRoutinesModule -->\n\nRoutinesService->RoutinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : API da aplicação To-do Gym, construída em NodeJS, utilizando o framework NestJS na linguagem TypeScript\n        \n            License : UNLICENSED\n        \n            Author : Flávio Oliveira - https://github.com/flaviosoliver\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthDocument   (src/.../auth.model.ts)\n                        \n                        \n                            ExerciseDocument   (src/.../exercise.model.ts)\n                        \n                        \n                            PlanDocument   (src/.../plan.model.ts)\n                        \n                        \n                            RefreshTokenDocument   (src/.../refresh-token.model.ts)\n                        \n                        \n                            RoutineDocument   (src/.../routine.model.ts)\n                        \n                        \n                            ShapeHistoryDocument   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingDocument   (src/.../training.model.ts)\n                        \n                        \n                            UserDocument   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/auth.model.ts\n    \n    \n        \n            \n                \n                    \n                    AuthDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/exercises/exercise.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExerciseDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/plans/plan.model.ts\n    \n    \n        \n            \n                \n                    \n                    PlanDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/auth/refresh-token.model.ts\n    \n    \n        \n            \n                \n                    \n                    RefreshTokenDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/routines/routine.model.ts\n    \n    \n        \n            \n                \n                    \n                    RoutineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/shape-history.ts\n    \n    \n        \n            \n                \n                    \n                    ShapeHistoryDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/shared/models/training.model.ts\n    \n    \n        \n            \n                \n                    \n                    TrainingDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ACCESS_TOKEN_STRATEGY   (src/.../access-token.strategy.ts)\n                        \n                        \n                            AUTH_CONTROLLER   (src/.../auth.controller.interface.ts)\n                        \n                        \n                            AUTH_REPOSITORY   (src/.../auth.repository.interface.ts)\n                        \n                        \n                            AUTH_SERVICE   (src/.../auth.service.interface.ts)\n                        \n                        \n                            AuthSchema   (src/.../auth.model.ts)\n                        \n                        \n                            BAD_REQUEST_400   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            buildParams   (src/.../build-params.utils.ts)\n                        \n                        \n                            comparePasswords   (src/.../credentials.utils.ts)\n                        \n                        \n                            CREATED_201   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            exerciseDataPipeline   (src/.../exercise-data.pipeline.ts)\n                        \n                        \n                            EXERCISES_CONTROLLER   (src/.../exercises.controller.interface.ts)\n                        \n                        \n                            EXERCISES_REPOSITORY   (src/.../exercises.repository.interface.ts)\n                        \n                        \n                            EXERCISES_SERVICE   (src/.../exercises.service.interface.ts)\n                        \n                        \n                            ExerciseSchema   (src/.../exercise.model.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            LOCAL_STRATEGY   (src/.../local.strategy.ts)\n                        \n                        \n                            mapExercise   (src/.../exercise.mapper.ts)\n                        \n                        \n                            mapPlan   (src/.../plan.mapper.ts)\n                        \n                        \n                            mapTrainings   (src/.../training.mapper.ts)\n                        \n                        \n                            mapUser   (src/.../user.mapper.ts)\n                        \n                        \n                            NO_CONTENT_204   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            NOT_FOUND_404   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            OK_200   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            PLANS_CONTROLLER   (src/.../plans.controller.interface.ts)\n                        \n                        \n                            PLANS_REPOSITORY   (src/.../plans.repository.interface.ts)\n                        \n                        \n                            PLANS_SERVICE   (src/.../plans.service.interface.ts)\n                        \n                        \n                            PlanSchema   (src/.../plan.model.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REFRESH_TOKEN_STRATEGY   (src/.../refresh-token.strategy.ts)\n                        \n                        \n                            RefreshTokenSchema   (src/.../refresh-token.model.ts)\n                        \n                        \n                            RoutineSchema   (src/.../routine.model.ts)\n                        \n                        \n                            SERVER_ERROR_500   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            ShapeHistorySchema   (src/.../shape-history.ts)\n                        \n                        \n                            TrainingSchema   (src/.../training.model.ts)\n                        \n                        \n                            UNAUTHORIZED_401   (src/.../http-response-status.utils.ts)\n                        \n                        \n                            USERS_CONTROLLER   (src/.../users.controller.interface.ts)\n                        \n                        \n                            USERS_REPOSITORY   (src/.../users.repository.interface.ts)\n                        \n                        \n                            USERS_SERVICE   (src/.../users.service.interface.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/strategy/access-token.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ACCESS_TOKEN_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ACCESS_TOKEN_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/interfaces/auth.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/auth.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Auth)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/http-response-status.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BAD_REQUEST_400\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BAD REQUEST'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CREATED_201\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CREATED'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NO_CONTENT_204\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NO CONTENT'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        NOT_FOUND_404\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'NOT FOUND'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OK_200\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'OK'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SERVER_ERROR_500\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'INTERNAL SERVER ERROR'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UNAUTHORIZED_401\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UNAUTHORIZED'\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/build-params.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (params?: ParamsDto): any => {\n  const opt: any = { $or: [] };\n\n  if (params && params.userId) {\n    opt.$or.push({ userId: params.userId });\n  }\n\n  if (params && params.name) {\n    opt.$or.push({ name: { $regex: params.name, $options: 'i' } });\n  }\n\n  if (params && params.focusMuscle?.length > 0) {\n    opt.$or.push({ focusMuscle: { $in: params.focusMuscle } });\n  } else {\n    opt.$or.focusMuscle = [];\n  }\n\n  return opt;\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/utils/credentials.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  passwordLogin: string,\n  passwordUser: string\n): Promise => {\n  return await bcrypt.compare(passwordLogin, passwordUser);\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/pipelines/exercise-data.pipeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        exerciseDataPipeline\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (field: string, value: string): any => [\n  {\n    $match: {\n      [field]: new mongoose.Types.ObjectId(value),\n    },\n  },\n  {\n    $unwind: '$training',\n  },\n  {\n    $lookup: {\n      from: 'exercises',\n      localField: 'training.exerciseId',\n      foreignField: '_id',\n      as: 'exerciseDetails',\n    },\n  },\n  {\n    $unwind: '$exerciseDetails',\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        exerciseId: '$exerciseDetails._id',\n        series: '$training.series',\n        repetitions: '$training.repetitions',\n        load: '$training.load',\n        done: '$training.done',\n        createdAt: '$training.createdAt',\n        updatedAt: '$training.updatedAt',\n        exerciseName: '$exerciseDetails.name',\n        exerciseFocusMuscle: '$exerciseDetails.focusMuscle',\n        exerciseImage: '$exerciseDetails.image',\n        exerciseVideo: '$exerciseDetails.video',\n        notes: {\n          $concat: ['$training.notes', '\\n', '$exerciseDetails.notes'],\n        },\n      },\n    },\n  },\n  {\n    $group: {\n      _id: '$_id',\n      name: {\n        $first: '$name',\n      },\n      focusMuscle: {\n        $first: '$focusMuscle',\n      },\n      userId: {\n        $first: '$userId',\n      },\n      training: {\n        $push: '$training',\n      },\n      exerciseDetails: {\n        $push: '$exerciseDetails',\n      },\n    },\n  },\n  {\n    $project: {\n      _id: 1,\n      name: 1,\n      focusMuscle: 1,\n      userId: 1,\n      training: {\n        $map: {\n          input: '$training',\n          as: 't',\n          in: {\n            $mergeObjects: [\n              '$$t',\n              {\n                $arrayElemAt: [\n                  {\n                    $filter: {\n                      input: '$exerciseDetails',\n                      as: 'e',\n                      cond: {\n                        $eq: ['$$e._id', '$$t.exerciseId'],\n                      },\n                    },\n                  },\n                  0,\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/interfaces/exercises.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXERCISES_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXERCISES_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/exercise.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExerciseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Exercise)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorator/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/strategy/local.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOCAL_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'LOCAL_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/exercises/utils/exercise.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapExercise\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (exercise: Exercise): ExerciseDto => {\n  return {\n    id: exercise.id,\n    name: exercise.name,\n    focusMuscle: exercise.focusMuscle,\n    image: exercise.image,\n    video: exercise.video,\n    notes: exercise.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/utils/plan.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapPlan\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (plan: Plan): PlanDto => {\n  return {\n    id: plan.id,\n    name: plan.name,\n    focusMuscle: plan.focusMuscle,\n    expiresIn: plan.expiresIn,\n    userId: plan.userId,\n    training: plan.training,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/utils/training.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapTrainings\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (training: Training): TrainingDto => {\n  return {\n    id: training.id,\n    exerciseId: training.exerciseId,\n    series: training.series,\n    repetitions: training.repetitions,\n    load: training.load,\n    done: training.done,\n    notes: training.notes,\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/users/utils/user.mapper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (user: User): UserDto => {\n  return {\n    id: user.id,\n    email: user.email,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    birthDate: user.birthDate,\n    active: user.active,\n    shape: user.shape,\n    avatar: user.avatar ? user.avatar : '',\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/interfaces/plans.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLANS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PLANS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/plans/plan.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PlanSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Plan)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/strategy/refresh-token.strategy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REFRESH_TOKEN_STRATEGY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'REFRESH_TOKEN_STRATEGY'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/refresh-token.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RefreshTokenSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(RefreshToken)\n                    \n                \n\n\n        \n    \n\n    src/modules/routines/routine.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoutineSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Routine)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/shape-history.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShapeHistorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShapeHistory)\n                    \n                \n\n\n        \n    \n\n    src/modules/shared/models/training.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TrainingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Training)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.controller.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_CONTROLLER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_CONTROLLER'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.repository.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_REPOSITORY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_REPOSITORY'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/interfaces/users.service.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        USERS_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'USERS_SERVICE'\n                    \n                \n\n\n        \n    \n\n    src/modules/users/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
